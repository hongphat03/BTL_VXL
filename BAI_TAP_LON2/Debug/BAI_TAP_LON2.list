
BAI_TAP_LON2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004774  08004774  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08004774  08004774  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004774  08004774  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200000b8  08004834  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08004834  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebdc  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258c  00000000  00000000  0002ecbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00031fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189a6  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f063  00000000  00000000  0004b586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b054  00000000  00000000  0005a5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e563d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  000e5690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080046f0 	.word	0x080046f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080046f0 	.word	0x080046f0

0800014c <getKeyInput1>:
int button_flag2 = 0;
int button_flag3 = 0;
int button_flag4 = 0;


void getKeyInput1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	key01 = key11;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <getKeyInput1+0x64>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <getKeyInput1+0x68>)
 8000156:	6013      	str	r3, [r2, #0]
	key11 = key21;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <getKeyInput1+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a14      	ldr	r2, [pc, #80]	; (80001b0 <getKeyInput1+0x64>)
 800015e:	6013      	str	r3, [r2, #0]
	key21 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000160:	2102      	movs	r1, #2
 8000162:	4816      	ldr	r0, [pc, #88]	; (80001bc <getKeyInput1+0x70>)
 8000164:	f001 fe78 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <getKeyInput1+0x6c>)
 800016e:	601a      	str	r2, [r3, #0]
	if((key01 == key11) && (key11 == key21)){
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <getKeyInput1+0x68>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <getKeyInput1+0x64>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	429a      	cmp	r2, r3
 800017a:	d116      	bne.n	80001aa <getKeyInput1+0x5e>
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <getKeyInput1+0x64>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <getKeyInput1+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	429a      	cmp	r2, r3
 8000186:	d110      	bne.n	80001aa <getKeyInput1+0x5e>
		if(key31 != key21){
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <getKeyInput1+0x74>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <getKeyInput1+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d00a      	beq.n	80001aa <getKeyInput1+0x5e>
			key31 = key21;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <getKeyInput1+0x6c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <getKeyInput1+0x74>)
 800019a:	6013      	str	r3, [r2, #0]
			if(key21== PRESSED_STATE){
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <getKeyInput1+0x6c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d102      	bne.n	80001aa <getKeyInput1+0x5e>
				button_flag1 = 1;
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <getKeyInput1+0x78>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000004 	.word	0x20000004
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000008 	.word	0x20000008
 80001bc:	40010800 	.word	0x40010800
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	200000d4 	.word	0x200000d4

080001c8 <getKeyInput2>:

void getKeyInput2(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	key02 = key12;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <getKeyInput2+0x64>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <getKeyInput2+0x68>)
 80001d2:	6013      	str	r3, [r2, #0]
	key12 = key22;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <getKeyInput2+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a14      	ldr	r2, [pc, #80]	; (800022c <getKeyInput2+0x64>)
 80001da:	6013      	str	r3, [r2, #0]
	key22 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001dc:	2110      	movs	r1, #16
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <getKeyInput2+0x70>)
 80001e0:	f001 fe3a 	bl	8001e58 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <getKeyInput2+0x6c>)
 80001ea:	601a      	str	r2, [r3, #0]
	if((key02 == key12) && (key12 == key22)){
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <getKeyInput2+0x68>)
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <getKeyInput2+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d116      	bne.n	8000226 <getKeyInput2+0x5e>
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <getKeyInput2+0x64>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <getKeyInput2+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d110      	bne.n	8000226 <getKeyInput2+0x5e>
		if(key32 != key22){
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <getKeyInput2+0x74>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <getKeyInput2+0x6c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d00a      	beq.n	8000226 <getKeyInput2+0x5e>
			key32 = key22;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <getKeyInput2+0x6c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <getKeyInput2+0x74>)
 8000216:	6013      	str	r3, [r2, #0]
			if(key22 == PRESSED_STATE){
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <getKeyInput2+0x6c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <getKeyInput2+0x5e>
				button_flag2= 1;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <getKeyInput2+0x78>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000024 	.word	0x20000024
 8000230:	20000020 	.word	0x20000020
 8000234:	20000028 	.word	0x20000028
 8000238:	40010800 	.word	0x40010800
 800023c:	2000002c 	.word	0x2000002c
 8000240:	200000d8 	.word	0x200000d8

08000244 <getKeyInput3>:

void getKeyInput3(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	key03 = key13;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <getKeyInput3+0x64>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <getKeyInput3+0x68>)
 800024e:	6013      	str	r3, [r2, #0]
	key13 = key23;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <getKeyInput3+0x6c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <getKeyInput3+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
	key23 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000258:	2101      	movs	r1, #1
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <getKeyInput3+0x70>)
 800025c:	f001 fdfc 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <getKeyInput3+0x6c>)
 8000266:	601a      	str	r2, [r3, #0]
	if((key03 == key13) && (key13 == key23)){
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <getKeyInput3+0x68>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <getKeyInput3+0x64>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d116      	bne.n	80002a2 <getKeyInput3+0x5e>
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <getKeyInput3+0x64>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <getKeyInput3+0x6c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d110      	bne.n	80002a2 <getKeyInput3+0x5e>
		if(key33 != key23){
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <getKeyInput3+0x74>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <getKeyInput3+0x6c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d00a      	beq.n	80002a2 <getKeyInput3+0x5e>
			key33 = key23;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <getKeyInput3+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <getKeyInput3+0x74>)
 8000292:	6013      	str	r3, [r2, #0]
			if(key23 == PRESSED_STATE){
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <getKeyInput3+0x6c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <getKeyInput3+0x5e>
				button_flag3= 1;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <getKeyInput3+0x78>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000014 	.word	0x20000014
 80002ac:	20000010 	.word	0x20000010
 80002b0:	20000018 	.word	0x20000018
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	2000001c 	.word	0x2000001c
 80002bc:	200000dc 	.word	0x200000dc

080002c0 <getKeyInput4>:

void getKeyInput4(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	key04 = key14;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <getKeyInput4+0x64>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a17      	ldr	r2, [pc, #92]	; (8000328 <getKeyInput4+0x68>)
 80002ca:	6013      	str	r3, [r2, #0]
	key14 = key24;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <getKeyInput4+0x6c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <getKeyInput4+0x64>)
 80002d2:	6013      	str	r3, [r2, #0]
	key24 = HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin);
 80002d4:	2101      	movs	r1, #1
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <getKeyInput4+0x70>)
 80002d8:	f001 fdbe 	bl	8001e58 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <getKeyInput4+0x6c>)
 80002e2:	601a      	str	r2, [r3, #0]
	if((key04 == key14) && (key14 == key24)){
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput4+0x68>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <getKeyInput4+0x64>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d116      	bne.n	800031e <getKeyInput4+0x5e>
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <getKeyInput4+0x64>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <getKeyInput4+0x6c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d110      	bne.n	800031e <getKeyInput4+0x5e>
		if(key34 != key24){
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <getKeyInput4+0x74>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <getKeyInput4+0x6c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	429a      	cmp	r2, r3
 8000306:	d00a      	beq.n	800031e <getKeyInput4+0x5e>
			key34 = key24;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <getKeyInput4+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <getKeyInput4+0x74>)
 800030e:	6013      	str	r3, [r2, #0]
			if(key24 == PRESSED_STATE){
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <getKeyInput4+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <getKeyInput4+0x5e>
				button_flag4= 1;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <getKeyInput4+0x78>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000034 	.word	0x20000034
 8000328:	20000030 	.word	0x20000030
 800032c:	20000038 	.word	0x20000038
 8000330:	40010800 	.word	0x40010800
 8000334:	2000003c 	.word	0x2000003c
 8000338:	200000e0 	.word	0x200000e0

0800033c <control_unit>:



#include "control.h"

void control_unit(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if(button_flag1 == 1)
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <control_unit+0xb8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d10a      	bne.n	800035e <control_unit+0x22>
	{
		ped = 0;
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <control_unit+0xbc>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		mode = mode +1;
 800034e:	4b2b      	ldr	r3, [pc, #172]	; (80003fc <control_unit+0xc0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	4a29      	ldr	r2, [pc, #164]	; (80003fc <control_unit+0xc0>)
 8000356:	6013      	str	r3, [r2, #0]
		button_flag1 = 0;
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <control_unit+0xb8>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
	}
	if(mode == 1)
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <control_unit+0xc0>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d111      	bne.n	800038a <control_unit+0x4e>
	{
		fsm_automatic_run(global_red, global_green, global_yellow);
 8000366:	4b26      	ldr	r3, [pc, #152]	; (8000400 <control_unit+0xc4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a26      	ldr	r2, [pc, #152]	; (8000404 <control_unit+0xc8>)
 800036c:	6811      	ldr	r1, [r2, #0]
 800036e:	4a26      	ldr	r2, [pc, #152]	; (8000408 <control_unit+0xcc>)
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f850 	bl	8000418 <fsm_automatic_run>
		fsm_automatic_run2(global_red, global_green, global_yellow);
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <control_unit+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <control_unit+0xc8>)
 800037e:	6811      	ldr	r1, [r2, #0]
 8000380:	4a21      	ldr	r2, [pc, #132]	; (8000408 <control_unit+0xcc>)
 8000382:	6812      	ldr	r2, [r2, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fa23 	bl	80007d0 <fsm_automatic_run2>
	}
	if(mode == 2)
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <control_unit+0xc0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d101      	bne.n	8000396 <control_unit+0x5a>
	{
	    fsm_automatic_run3();
 8000392:	f000 faa9 	bl	80008e8 <fsm_automatic_run3>
	}

	if(mode == 3)
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <control_unit+0xc0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b03      	cmp	r3, #3
 800039c:	d101      	bne.n	80003a2 <control_unit+0x66>
	{
		fsm_automatic_run4();
 800039e:	f000 fb0d 	bl	80009bc <fsm_automatic_run4>
	}

	if(mode == 4)
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <control_unit+0xc0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d108      	bne.n	80003bc <control_unit+0x80>
	{
		mode = 1;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <control_unit+0xc0>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
		status = INIT;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <control_unit+0xd0>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
		status1 = INIT;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <control_unit+0xd4>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
	}
	if(button_flag4 == 1)
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <control_unit+0xd8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d114      	bne.n	80003ee <control_unit+0xb2>
	{
		ped = 1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <control_unit+0xbc>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
		setTimer2((global_green+global_red+global_yellow)*1000*2);
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <control_unit+0xc8>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <control_unit+0xc4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	441a      	add	r2, r3
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <control_unit+0xcc>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f8b8 	bl	8001558 <setTimer2>
		button_flag4 = 0;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <control_unit+0xd8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
	}

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000d4 	.word	0x200000d4
 80003f8:	20000100 	.word	0x20000100
 80003fc:	20000040 	.word	0x20000040
 8000400:	200000ec 	.word	0x200000ec
 8000404:	200000f0 	.word	0x200000f0
 8000408:	200000f4 	.word	0x200000f4
 800040c:	200000e4 	.word	0x200000e4
 8000410:	200000e8 	.word	0x200000e8
 8000414:	200000e0 	.word	0x200000e0

08000418 <fsm_automatic_run>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */
#include "fsm_automatic.h"
#include "main.h"
void fsm_automatic_run(int x, int y, int z){
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
	switch(status){
 8000424:	4b89      	ldr	r3, [pc, #548]	; (800064c <fsm_automatic_run+0x234>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	2b03      	cmp	r3, #3
 800042c:	f200 81ab 	bhi.w	8000786 <fsm_automatic_run+0x36e>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <fsm_automatic_run+0x20>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000449 	.word	0x08000449
 800043c:	08000689 	.word	0x08000689
 8000440:	08000487 	.word	0x08000487
 8000444:	08000569 	.word	0x08000569
		case INIT:
		    	status = AUTO_GREEN;
 8000448:	4b80      	ldr	r3, [pc, #512]	; (800064c <fsm_automatic_run+0x234>)
 800044a:	2203      	movs	r2, #3
 800044c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000454:	487e      	ldr	r0, [pc, #504]	; (8000650 <fsm_automatic_run+0x238>)
 8000456:	f001 fd16 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	487d      	ldr	r0, [pc, #500]	; (8000654 <fsm_automatic_run+0x23c>)
 8000460:	f001 fd11 	bl	8001e86 <HAL_GPIO_WritePin>
				countdown = global_green;
 8000464:	4b7c      	ldr	r3, [pc, #496]	; (8000658 <fsm_automatic_run+0x240>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a7c      	ldr	r2, [pc, #496]	; (800065c <fsm_automatic_run+0x244>)
 800046a:	6013      	str	r3, [r2, #0]
				setTimer4(1000);
 800046c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000470:	f001 f8a6 	bl	80015c0 <setTimer4>
				setTimer1(y*1000);
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800047a:	fb02 f303 	mul.w	r3, r2, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f001 f850 	bl	8001524 <setTimer1>
			break;
 8000484:	e186      	b.n	8000794 <fsm_automatic_run+0x37c>
		case AUTO_GREEN:
			if(timer4_flag == 1){
 8000486:	4b76      	ldr	r3, [pc, #472]	; (8000660 <fsm_automatic_run+0x248>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d123      	bne.n	80004d6 <fsm_automatic_run+0xbe>
				setTimer4(1000);
 800048e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000492:	f001 f895 	bl	80015c0 <setTimer4>
				sprintf(data,"!7SEG:%d%d#\n",countdown/10,countdown%10);
 8000496:	4b71      	ldr	r3, [pc, #452]	; (800065c <fsm_automatic_run+0x244>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a72      	ldr	r2, [pc, #456]	; (8000664 <fsm_automatic_run+0x24c>)
 800049c:	fb82 1203 	smull	r1, r2, r2, r3
 80004a0:	1092      	asrs	r2, r2, #2
 80004a2:	17db      	asrs	r3, r3, #31
 80004a4:	1ad0      	subs	r0, r2, r3
 80004a6:	4b6d      	ldr	r3, [pc, #436]	; (800065c <fsm_automatic_run+0x244>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	4b6e      	ldr	r3, [pc, #440]	; (8000664 <fsm_automatic_run+0x24c>)
 80004ac:	fb83 1302 	smull	r1, r3, r3, r2
 80004b0:	1099      	asrs	r1, r3, #2
 80004b2:	17d3      	asrs	r3, r2, #31
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	460b      	mov	r3, r1
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	440b      	add	r3, r1
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	1ad1      	subs	r1, r2, r3
 80004c0:	460b      	mov	r3, r1
 80004c2:	4602      	mov	r2, r0
 80004c4:	4968      	ldr	r1, [pc, #416]	; (8000668 <fsm_automatic_run+0x250>)
 80004c6:	4869      	ldr	r0, [pc, #420]	; (800066c <fsm_automatic_run+0x254>)
 80004c8:	f003 fcd8 	bl	8003e7c <siprintf>
				countdown--;
 80004cc:	4b63      	ldr	r3, [pc, #396]	; (800065c <fsm_automatic_run+0x244>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a62      	ldr	r2, [pc, #392]	; (800065c <fsm_automatic_run+0x244>)
 80004d4:	6013      	str	r3, [r2, #0]
			}
			if(ped == 1){
 80004d6:	4b66      	ldr	r3, [pc, #408]	; (8000670 <fsm_automatic_run+0x258>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d115      	bne.n	800050a <fsm_automatic_run+0xf2>
				if(timer2_flag == 1){
 80004de:	4b65      	ldr	r3, [pc, #404]	; (8000674 <fsm_automatic_run+0x25c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d102      	bne.n	80004ec <fsm_automatic_run+0xd4>
					ped = 0;
 80004e6:	4b62      	ldr	r3, [pc, #392]	; (8000670 <fsm_automatic_run+0x258>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	4857      	ldr	r0, [pc, #348]	; (8000650 <fsm_automatic_run+0x238>)
 80004f4:	f001 fcc7 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fe:	4855      	ldr	r0, [pc, #340]	; (8000654 <fsm_automatic_run+0x23c>)
 8000500:	f001 fcc1 	bl	8001e86 <HAL_GPIO_WritePin>
				PWM = 0;
 8000504:	4b5c      	ldr	r3, [pc, #368]	; (8000678 <fsm_automatic_run+0x260>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
//					if(PWM == 950){
//						PWM = 0;
//					}
//				}
			}
			if(timer1_flag == 1){
 800050a:	4b5c      	ldr	r3, [pc, #368]	; (800067c <fsm_automatic_run+0x264>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	f040 813b 	bne.w	800078a <fsm_automatic_run+0x372>
				PWM = 0;
 8000514:	4b58      	ldr	r3, [pc, #352]	; (8000678 <fsm_automatic_run+0x260>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW;
 800051a:	4b4c      	ldr	r3, [pc, #304]	; (800064c <fsm_automatic_run+0x234>)
 800051c:	2204      	movs	r2, #4
 800051e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000526:	484a      	ldr	r0, [pc, #296]	; (8000650 <fsm_automatic_run+0x238>)
 8000528:	f001 fcad 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	2108      	movs	r1, #8
 8000530:	4848      	ldr	r0, [pc, #288]	; (8000654 <fsm_automatic_run+0x23c>)
 8000532:	f001 fca8 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053c:	4844      	ldr	r0, [pc, #272]	; (8000650 <fsm_automatic_run+0x238>)
 800053e:	f001 fca2 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000548:	4842      	ldr	r0, [pc, #264]	; (8000654 <fsm_automatic_run+0x23c>)
 800054a:	f001 fc9c 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer1(z*1000);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000554:	fb02 f303 	mul.w	r3, r2, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f000 ffe3 	bl	8001524 <setTimer1>
				countdown=global_yellow;
 800055e:	4b48      	ldr	r3, [pc, #288]	; (8000680 <fsm_automatic_run+0x268>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a3e      	ldr	r2, [pc, #248]	; (800065c <fsm_automatic_run+0x244>)
 8000564:	6013      	str	r3, [r2, #0]
			}

			break;
 8000566:	e110      	b.n	800078a <fsm_automatic_run+0x372>
		case AUTO_YELLOW:
			if(timer4_flag == 1){
 8000568:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <fsm_automatic_run+0x248>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d123      	bne.n	80005b8 <fsm_automatic_run+0x1a0>
				setTimer4(1000);
 8000570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000574:	f001 f824 	bl	80015c0 <setTimer4>

				sprintf(data,"!7SEG:%d%d#\n",countdown/10,countdown%10);
 8000578:	4b38      	ldr	r3, [pc, #224]	; (800065c <fsm_automatic_run+0x244>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a39      	ldr	r2, [pc, #228]	; (8000664 <fsm_automatic_run+0x24c>)
 800057e:	fb82 1203 	smull	r1, r2, r2, r3
 8000582:	1092      	asrs	r2, r2, #2
 8000584:	17db      	asrs	r3, r3, #31
 8000586:	1ad0      	subs	r0, r2, r3
 8000588:	4b34      	ldr	r3, [pc, #208]	; (800065c <fsm_automatic_run+0x244>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b35      	ldr	r3, [pc, #212]	; (8000664 <fsm_automatic_run+0x24c>)
 800058e:	fb83 1302 	smull	r1, r3, r3, r2
 8000592:	1099      	asrs	r1, r3, #2
 8000594:	17d3      	asrs	r3, r2, #31
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	460b      	mov	r3, r1
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	440b      	add	r3, r1
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	1ad1      	subs	r1, r2, r3
 80005a2:	460b      	mov	r3, r1
 80005a4:	4602      	mov	r2, r0
 80005a6:	4930      	ldr	r1, [pc, #192]	; (8000668 <fsm_automatic_run+0x250>)
 80005a8:	4830      	ldr	r0, [pc, #192]	; (800066c <fsm_automatic_run+0x254>)
 80005aa:	f003 fc67 	bl	8003e7c <siprintf>
				countdown--;
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <fsm_automatic_run+0x244>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <fsm_automatic_run+0x244>)
 80005b6:	6013      	str	r3, [r2, #0]
			}
			if(ped == 1){
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <fsm_automatic_run+0x258>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d115      	bne.n	80005ec <fsm_automatic_run+0x1d4>
				if(timer2_flag == 1){
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <fsm_automatic_run+0x25c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d102      	bne.n	80005ce <fsm_automatic_run+0x1b6>
					ped = 0;
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <fsm_automatic_run+0x258>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <fsm_automatic_run+0x238>)
 80005d6:	f001 fc56 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	481c      	ldr	r0, [pc, #112]	; (8000654 <fsm_automatic_run+0x23c>)
 80005e2:	f001 fc50 	bl	8001e86 <HAL_GPIO_WritePin>
				PWM = 0;
 80005e6:	4b24      	ldr	r3, [pc, #144]	; (8000678 <fsm_automatic_run+0x260>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
//				PWM = PWM+1;
//				if(PWM == 950){
//					PWM = 0;
//				}
			}
			if(timer1_flag == 1){
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <fsm_automatic_run+0x264>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	f040 80cc 	bne.w	800078e <fsm_automatic_run+0x376>
				PWM = 0 ;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <fsm_automatic_run+0x260>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
				status = AUTO_RED;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <fsm_automatic_run+0x234>)
 80005fe:	2202      	movs	r2, #2
 8000600:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <fsm_automatic_run+0x238>)
 800060a:	f001 fc3c 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <fsm_automatic_run+0x23c>)
 8000616:	f001 fc36 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <fsm_automatic_run+0x238>)
 8000622:	f001 fc30 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <fsm_automatic_run+0x23c>)
 800062c:	f001 fc2b 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer1(x*1000);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000636:	fb02 f303 	mul.w	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ff72 	bl	8001524 <setTimer1>
				countdown=global_red;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <fsm_automatic_run+0x26c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a05      	ldr	r2, [pc, #20]	; (800065c <fsm_automatic_run+0x244>)
 8000646:	6013      	str	r3, [r2, #0]
			}

			break;
 8000648:	e0a1      	b.n	800078e <fsm_automatic_run+0x376>
 800064a:	bf00      	nop
 800064c:	200000e4 	.word	0x200000e4
 8000650:	40010800 	.word	0x40010800
 8000654:	40010c00 	.word	0x40010c00
 8000658:	200000f0 	.word	0x200000f0
 800065c:	20000104 	.word	0x20000104
 8000660:	20000134 	.word	0x20000134
 8000664:	66666667 	.word	0x66666667
 8000668:	08004708 	.word	0x08004708
 800066c:	2000010c 	.word	0x2000010c
 8000670:	20000100 	.word	0x20000100
 8000674:	20000124 	.word	0x20000124
 8000678:	20000108 	.word	0x20000108
 800067c:	2000011c 	.word	0x2000011c
 8000680:	200000f4 	.word	0x200000f4
 8000684:	200000ec 	.word	0x200000ec
		case AUTO_RED:
			if(timer4_flag == 1){
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <fsm_automatic_run+0x384>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d123      	bne.n	80006d8 <fsm_automatic_run+0x2c0>
				setTimer4(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 ff94 	bl	80015c0 <setTimer4>
				sprintf(data,"!7SEG:%d%d#\n",countdown/10,countdown%10);
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <fsm_automatic_run+0x388>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <fsm_automatic_run+0x38c>)
 800069e:	fb82 1203 	smull	r1, r2, r2, r3
 80006a2:	1092      	asrs	r2, r2, #2
 80006a4:	17db      	asrs	r3, r3, #31
 80006a6:	1ad0      	subs	r0, r2, r3
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <fsm_automatic_run+0x388>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <fsm_automatic_run+0x38c>)
 80006ae:	fb83 1302 	smull	r1, r3, r3, r2
 80006b2:	1099      	asrs	r1, r3, #2
 80006b4:	17d3      	asrs	r3, r2, #31
 80006b6:	1ac9      	subs	r1, r1, r3
 80006b8:	460b      	mov	r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	1ad1      	subs	r1, r2, r3
 80006c2:	460b      	mov	r3, r1
 80006c4:	4602      	mov	r2, r0
 80006c6:	4938      	ldr	r1, [pc, #224]	; (80007a8 <fsm_automatic_run+0x390>)
 80006c8:	4838      	ldr	r0, [pc, #224]	; (80007ac <fsm_automatic_run+0x394>)
 80006ca:	f003 fbd7 	bl	8003e7c <siprintf>
//				printf('\n');
				countdown--;
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <fsm_automatic_run+0x388>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <fsm_automatic_run+0x388>)
 80006d6:	6013      	str	r3, [r2, #0]
			}
			if(ped == 1){
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <fsm_automatic_run+0x398>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d124      	bne.n	800072a <fsm_automatic_run+0x312>
				if(timer2_flag == 1){
 80006e0:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <fsm_automatic_run+0x39c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d102      	bne.n	80006ee <fsm_automatic_run+0x2d6>
					ped = 0;
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <fsm_automatic_run+0x398>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4830      	ldr	r0, [pc, #192]	; (80007b8 <fsm_automatic_run+0x3a0>)
 80006f6:	f001 fbc6 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000700:	482e      	ldr	r0, [pc, #184]	; (80007bc <fsm_automatic_run+0x3a4>)
 8000702:	f001 fbc0 	bl	8001e86 <HAL_GPIO_WritePin>
				if(countdown <= 3){
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <fsm_automatic_run+0x388>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b03      	cmp	r3, #3
 800070c:	dc0d      	bgt.n	800072a <fsm_automatic_run+0x312>
					PWM = PWM+5;
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <fsm_automatic_run+0x3a8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3305      	adds	r3, #5
 8000714:	4a2a      	ldr	r2, [pc, #168]	; (80007c0 <fsm_automatic_run+0x3a8>)
 8000716:	6013      	str	r3, [r2, #0]
					if(PWM == 950){
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <fsm_automatic_run+0x3a8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000720:	4293      	cmp	r3, r2
 8000722:	d102      	bne.n	800072a <fsm_automatic_run+0x312>
						PWM = 0;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <fsm_automatic_run+0x3a8>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if(timer1_flag == 1){
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <fsm_automatic_run+0x3ac>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d12f      	bne.n	8000792 <fsm_automatic_run+0x37a>
				PWM = 0;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <fsm_automatic_run+0x3a8>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN;
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <fsm_automatic_run+0x3b0>)
 800073a:	2203      	movs	r2, #3
 800073c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	481c      	ldr	r0, [pc, #112]	; (80007b8 <fsm_automatic_run+0x3a0>)
 8000746:	f001 fb9e 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000750:	481a      	ldr	r0, [pc, #104]	; (80007bc <fsm_automatic_run+0x3a4>)
 8000752:	f001 fb98 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <fsm_automatic_run+0x3a0>)
 800075e:	f001 fb92 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2108      	movs	r1, #8
 8000766:	4815      	ldr	r0, [pc, #84]	; (80007bc <fsm_automatic_run+0x3a4>)
 8000768:	f001 fb8d 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer1(y*1000);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fed4 	bl	8001524 <setTimer1>
				countdown=global_green;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <fsm_automatic_run+0x3b4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <fsm_automatic_run+0x388>)
 8000782:	6013      	str	r3, [r2, #0]
			}

			break;
 8000784:	e005      	b.n	8000792 <fsm_automatic_run+0x37a>
		default:
			break;
 8000786:	bf00      	nop
 8000788:	e004      	b.n	8000794 <fsm_automatic_run+0x37c>
			break;
 800078a:	bf00      	nop
 800078c:	e002      	b.n	8000794 <fsm_automatic_run+0x37c>
			break;
 800078e:	bf00      	nop
 8000790:	e000      	b.n	8000794 <fsm_automatic_run+0x37c>
			break;
 8000792:	bf00      	nop
		}
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000134 	.word	0x20000134
 80007a0:	20000104 	.word	0x20000104
 80007a4:	66666667 	.word	0x66666667
 80007a8:	08004708 	.word	0x08004708
 80007ac:	2000010c 	.word	0x2000010c
 80007b0:	20000100 	.word	0x20000100
 80007b4:	20000124 	.word	0x20000124
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	20000108 	.word	0x20000108
 80007c4:	2000011c 	.word	0x2000011c
 80007c8:	200000e4 	.word	0x200000e4
 80007cc:	200000f0 	.word	0x200000f0

080007d0 <fsm_automatic_run2>:
void fsm_automatic_run2(int x, int y, int z){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
	switch(status1){
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <fsm_automatic_run2+0x10c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d86e      	bhi.n	80008c4 <fsm_automatic_run2+0xf4>
 80007e6:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <fsm_automatic_run2+0x1c>)
 80007e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ec:	080007fd 	.word	0x080007fd
 80007f0:	08000891 	.word	0x08000891
 80007f4:	08000829 	.word	0x08000829
 80007f8:	0800085d 	.word	0x0800085d
		case INIT:
		    status1 = AUTO_GREEN;
 80007fc:	4b37      	ldr	r3, [pc, #220]	; (80008dc <fsm_automatic_run2+0x10c>)
 80007fe:	2203      	movs	r2, #3
 8000800:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	2120      	movs	r1, #32
 8000806:	4836      	ldr	r0, [pc, #216]	; (80008e0 <fsm_automatic_run2+0x110>)
 8000808:	f001 fb3d 	bl	8001e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2110      	movs	r1, #16
 8000810:	4833      	ldr	r0, [pc, #204]	; (80008e0 <fsm_automatic_run2+0x110>)
 8000812:	f001 fb38 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 feb3 	bl	800158c <setTimer3>
			break;
 8000826:	e054      	b.n	80008d2 <fsm_automatic_run2+0x102>
		case AUTO_GREEN:
			if(timer3_flag == 1){
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <fsm_automatic_run2+0x114>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d14b      	bne.n	80008c8 <fsm_automatic_run2+0xf8>
				status1 = AUTO_YELLOW;
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <fsm_automatic_run2+0x10c>)
 8000832:	2204      	movs	r2, #4
 8000834:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	4829      	ldr	r0, [pc, #164]	; (80008e0 <fsm_automatic_run2+0x110>)
 800083c:	f001 fb23 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	2110      	movs	r1, #16
 8000844:	4826      	ldr	r0, [pc, #152]	; (80008e0 <fsm_automatic_run2+0x110>)
 8000846:	f001 fb1e 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer3(y*1000);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000850:	fb02 f303 	mul.w	r3, r2, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fe99 	bl	800158c <setTimer3>
			}
			break;
 800085a:	e035      	b.n	80008c8 <fsm_automatic_run2+0xf8>
		case AUTO_YELLOW:
			if(timer3_flag == 1){
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <fsm_automatic_run2+0x114>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d133      	bne.n	80008cc <fsm_automatic_run2+0xfc>
				status1 = AUTO_RED;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <fsm_automatic_run2+0x10c>)
 8000866:	2202      	movs	r2, #2
 8000868:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	2120      	movs	r1, #32
 800086e:	481c      	ldr	r0, [pc, #112]	; (80008e0 <fsm_automatic_run2+0x110>)
 8000870:	f001 fb09 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2110      	movs	r1, #16
 8000878:	4819      	ldr	r0, [pc, #100]	; (80008e0 <fsm_automatic_run2+0x110>)
 800087a:	f001 fb04 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer3(z*1000);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fe7f 	bl	800158c <setTimer3>
			}
			break;
 800088e:	e01d      	b.n	80008cc <fsm_automatic_run2+0xfc>
		case AUTO_RED:
			if(timer3_flag == 1){
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <fsm_automatic_run2+0x114>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d11b      	bne.n	80008d0 <fsm_automatic_run2+0x100>
				status1 = AUTO_GREEN;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <fsm_automatic_run2+0x10c>)
 800089a:	2203      	movs	r2, #3
 800089c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2120      	movs	r1, #32
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <fsm_automatic_run2+0x110>)
 80008a4:	f001 faef 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <fsm_automatic_run2+0x110>)
 80008ae:	f001 faea 	bl	8001e86 <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b8:	fb02 f303 	mul.w	r3, r2, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fe65 	bl	800158c <setTimer3>
			}


			break;
 80008c2:	e005      	b.n	80008d0 <fsm_automatic_run2+0x100>
		default:
			break;
 80008c4:	bf00      	nop
 80008c6:	e004      	b.n	80008d2 <fsm_automatic_run2+0x102>
			break;
 80008c8:	bf00      	nop
 80008ca:	e002      	b.n	80008d2 <fsm_automatic_run2+0x102>
			break;
 80008cc:	bf00      	nop
 80008ce:	e000      	b.n	80008d2 <fsm_automatic_run2+0x102>
			break;
 80008d0:	bf00      	nop
		}
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	40010c00 	.word	0x40010c00
 80008e4:	2000012c 	.word	0x2000012c

080008e8 <fsm_automatic_run3>:
void fsm_automatic_run3()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <fsm_automatic_run3+0xc4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d107      	bne.n	8000904 <fsm_automatic_run3+0x1c>
			{
				count = count + 1;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <fsm_automatic_run3+0xc8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <fsm_automatic_run3+0xc8>)
 80008fc:	6013      	str	r3, [r2, #0]
				button_flag2 = 0;
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <fsm_automatic_run3+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
			}
			if(count  == 0)
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <fsm_automatic_run3+0xc8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d114      	bne.n	8000936 <fsm_automatic_run3+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2120      	movs	r1, #32
 8000910:	4828      	ldr	r0, [pc, #160]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000912:	f001 fab8 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2110      	movs	r1, #16
 800091a:	4826      	ldr	r0, [pc, #152]	; (80009b4 <fsm_automatic_run3+0xcc>)
 800091c:	f001 fab3 	bl	8001e86 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000926:	4824      	ldr	r0, [pc, #144]	; (80009b8 <fsm_automatic_run3+0xd0>)
 8000928:	f001 faad 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	4820      	ldr	r0, [pc, #128]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000932:	f001 faa8 	bl	8001e86 <HAL_GPIO_WritePin>
			}
			if(count == 1)
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <fsm_automatic_run3+0xc8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d114      	bne.n	8000968 <fsm_automatic_run3+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	2120      	movs	r1, #32
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000944:	f001 fa9f 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2110      	movs	r1, #16
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <fsm_automatic_run3+0xcc>)
 800094e:	f001 fa9a 	bl	8001e86 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <fsm_automatic_run3+0xd0>)
 800095a:	f001 fa94 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	2108      	movs	r1, #8
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000964:	f001 fa8f 	bl	8001e86 <HAL_GPIO_WritePin>
			}
			if(count == 2)
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <fsm_automatic_run3+0xc8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d114      	bne.n	800099a <fsm_automatic_run3+0xb2>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000976:	f001 fa86 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2110      	movs	r1, #16
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000980:	f001 fa81 	bl	8001e86 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <fsm_automatic_run3+0xd0>)
 800098c:	f001 fa7b 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2108      	movs	r1, #8
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <fsm_automatic_run3+0xcc>)
 8000996:	f001 fa76 	bl	8001e86 <HAL_GPIO_WritePin>
			}
			if(count == 3)
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <fsm_automatic_run3+0xc8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d102      	bne.n	80009a8 <fsm_automatic_run3+0xc0>
			{
				count = 0;
 80009a2:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <fsm_automatic_run3+0xc8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
			}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000d8 	.word	0x200000d8
 80009b0:	200000fc 	.word	0x200000fc
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	40010800 	.word	0x40010800

080009bc <fsm_automatic_run4>:
void fsm_automatic_run4()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 80009c0:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <fsm_automatic_run4+0x150>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d107      	bne.n	80009d8 <fsm_automatic_run4+0x1c>
			{
				button_flag2 = 0;
 80009c8:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <fsm_automatic_run4+0x150>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
				light_mode = light_mode +1;
 80009ce:	4b50      	ldr	r3, [pc, #320]	; (8000b10 <fsm_automatic_run4+0x154>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a4e      	ldr	r2, [pc, #312]	; (8000b10 <fsm_automatic_run4+0x154>)
 80009d6:	6013      	str	r3, [r2, #0]
			}
			if(light_mode  == 0)
 80009d8:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <fsm_automatic_run4+0x154>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d114      	bne.n	8000a0a <fsm_automatic_run4+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2120      	movs	r1, #32
 80009e4:	484b      	ldr	r0, [pc, #300]	; (8000b14 <fsm_automatic_run4+0x158>)
 80009e6:	f001 fa4e 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2110      	movs	r1, #16
 80009ee:	4849      	ldr	r0, [pc, #292]	; (8000b14 <fsm_automatic_run4+0x158>)
 80009f0:	f001 fa49 	bl	8001e86 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4847      	ldr	r0, [pc, #284]	; (8000b18 <fsm_automatic_run4+0x15c>)
 80009fc:	f001 fa43 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	4843      	ldr	r0, [pc, #268]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a06:	f001 fa3e 	bl	8001e86 <HAL_GPIO_WritePin>
			}
			if(light_mode == 1)
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d114      	bne.n	8000a3c <fsm_automatic_run4+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	483f      	ldr	r0, [pc, #252]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a18:	f001 fa35 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2110      	movs	r1, #16
 8000a20:	483c      	ldr	r0, [pc, #240]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a22:	f001 fa30 	bl	8001e86 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	483a      	ldr	r0, [pc, #232]	; (8000b18 <fsm_automatic_run4+0x15c>)
 8000a2e:	f001 fa2a 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2108      	movs	r1, #8
 8000a36:	4837      	ldr	r0, [pc, #220]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a38:	f001 fa25 	bl	8001e86 <HAL_GPIO_WritePin>
			}
			if(light_mode == 2)
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d114      	bne.n	8000a6e <fsm_automatic_run4+0xb2>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2120      	movs	r1, #32
 8000a48:	4832      	ldr	r0, [pc, #200]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a4a:	f001 fa1c 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2110      	movs	r1, #16
 8000a52:	4830      	ldr	r0, [pc, #192]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a54:	f001 fa17 	bl	8001e86 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	482e      	ldr	r0, [pc, #184]	; (8000b18 <fsm_automatic_run4+0x15c>)
 8000a60:	f001 fa11 	bl	8001e86 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2108      	movs	r1, #8
 8000a68:	482a      	ldr	r0, [pc, #168]	; (8000b14 <fsm_automatic_run4+0x158>)
 8000a6a:	f001 fa0c 	bl	8001e86 <HAL_GPIO_WritePin>
			}
			if(light_mode == 3)
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d102      	bne.n	8000a7c <fsm_automatic_run4+0xc0>
			{
				light_mode = 0;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 0)
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <fsm_automatic_run4+0x160>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d112      	bne.n	8000aaa <fsm_automatic_run4+0xee>
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10e      	bne.n	8000aaa <fsm_automatic_run4+0xee>
			{
				global_green = global_green + 1;
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <fsm_automatic_run4+0x164>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <fsm_automatic_run4+0x164>)
 8000a94:	6013      	str	r3, [r2, #0]
				if(global_green == 10){
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <fsm_automatic_run4+0x164>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d102      	bne.n	8000aa4 <fsm_automatic_run4+0xe8>
					global_green = 0;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <fsm_automatic_run4+0x164>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <fsm_automatic_run4+0x160>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 1)
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <fsm_automatic_run4+0x160>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d112      	bne.n	8000ad8 <fsm_automatic_run4+0x11c>
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d10e      	bne.n	8000ad8 <fsm_automatic_run4+0x11c>
			{
				global_yellow = global_yellow + 1;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <fsm_automatic_run4+0x168>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <fsm_automatic_run4+0x168>)
 8000ac2:	6013      	str	r3, [r2, #0]
				if(global_yellow == 10){
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <fsm_automatic_run4+0x168>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b0a      	cmp	r3, #10
 8000aca:	d102      	bne.n	8000ad2 <fsm_automatic_run4+0x116>
					global_yellow = 0;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <fsm_automatic_run4+0x168>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <fsm_automatic_run4+0x160>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 2)
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <fsm_automatic_run4+0x160>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d112      	bne.n	8000b06 <fsm_automatic_run4+0x14a>
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <fsm_automatic_run4+0x154>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d10e      	bne.n	8000b06 <fsm_automatic_run4+0x14a>
			{
				global_red = global_red + 1;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <fsm_automatic_run4+0x16c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <fsm_automatic_run4+0x16c>)
 8000af0:	6013      	str	r3, [r2, #0]
				if(global_red == 10){
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <fsm_automatic_run4+0x16c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d102      	bne.n	8000b00 <fsm_automatic_run4+0x144>
					global_red = 0;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <fsm_automatic_run4+0x16c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <fsm_automatic_run4+0x160>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
			}
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000d8 	.word	0x200000d8
 8000b10:	200000f8 	.word	0x200000f8
 8000b14:	40010c00 	.word	0x40010c00
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	200000dc 	.word	0x200000dc
 8000b20:	200000f0 	.word	0x200000f0
 8000b24:	200000f4 	.word	0x200000f4
 8000b28:	200000ec 	.word	0x200000ec

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 fdee 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f86e 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f000 f97e 	bl	8000e38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b3c:	f000 f8ac 	bl	8000c98 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b40:	f000 f950 	bl	8000de4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b44:	f000 f8f4 	bl	8000d30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <main+0xa8>)
 8000b4a:	f001 fe1f 	bl	800278c <HAL_TIM_Base_Start_IT>
	status = INIT;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <main+0xac>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
	status1 = INIT;
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <main+0xb0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
//	uint32_t PWM = 0;
	global_green = 3;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <main+0xb4>)
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	601a      	str	r2, [r3, #0]
	global_red = 5;
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <main+0xb8>)
 8000b62:	2205      	movs	r2, #5
 8000b64:	601a      	str	r2, [r3, #0]
	global_yellow = 2;
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <main+0xbc>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	601a      	str	r2, [r3, #0]
	SCH_Init();
 8000b6c:	f000 f9f6 	bl	8000f5c <SCH_Init>
	HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000b70:	2100      	movs	r1, #0
 8000b72:	481e      	ldr	r0, [pc, #120]	; (8000bec <main+0xc0>)
 8000b74:	f001 feac 	bl	80028d0 <HAL_TIM_PWM_Start>
	SCH_Add_Task(control_unit, 0, 1);   // controll all the button and state machine
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <main+0xc4>)
 8000b7e:	f000 fa77 	bl	8001070 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput1, 0, 1);    /* USER CODE BEGIN 3 */
 8000b82:	2201      	movs	r2, #1
 8000b84:	2100      	movs	r1, #0
 8000b86:	481b      	ldr	r0, [pc, #108]	; (8000bf4 <main+0xc8>)
 8000b88:	f000 fa72 	bl	8001070 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput2, 0, 1);    /* USER CODE BEGIN 3 */
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <main+0xcc>)
 8000b92:	f000 fa6d 	bl	8001070 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput3, 0, 1);    /* USER CODE BEGIN 3 */
 8000b96:	2201      	movs	r2, #1
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <main+0xd0>)
 8000b9c:	f000 fa68 	bl	8001070 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput4, 0, 1);    /* USER CODE BEGIN 3 */
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4816      	ldr	r0, [pc, #88]	; (8000c00 <main+0xd4>)
 8000ba6:	f000 fa63 	bl	8001070 <SCH_Add_Task>
//	setTimer2(10);
	setTimer4(10);
 8000baa:	200a      	movs	r0, #10
 8000bac:	f000 fd08 	bl	80015c0 <setTimer4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(timer4_flag == 1){
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <main+0xd8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <main+0x96>
		  HAL_UART_Transmit_IT(&huart2,(void*)data,12);
 8000bb8:	220c      	movs	r2, #12
 8000bba:	4913      	ldr	r1, [pc, #76]	; (8000c08 <main+0xdc>)
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <main+0xe0>)
 8000bbe:	f002 fd38 	bl	8003632 <HAL_UART_Transmit_IT>
	  }

	  	SCH_Dispatch_Tasks();
 8000bc2:	f000 faa7 	bl	8001114 <SCH_Dispatch_Tasks>
	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,PWM);
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <main+0xc0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <main+0xe4>)
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34
	  if(timer4_flag == 1){
 8000bd0:	e7ee      	b.n	8000bb0 <main+0x84>
 8000bd2:	bf00      	nop
 8000bd4:	200004b4 	.word	0x200004b4
 8000bd8:	200000e4 	.word	0x200000e4
 8000bdc:	200000e8 	.word	0x200000e8
 8000be0:	200000f0 	.word	0x200000f0
 8000be4:	200000ec 	.word	0x200000ec
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	2000046c 	.word	0x2000046c
 8000bf0:	0800033d 	.word	0x0800033d
 8000bf4:	0800014d 	.word	0x0800014d
 8000bf8:	080001c9 	.word	0x080001c9
 8000bfc:	08000245 	.word	0x08000245
 8000c00:	080002c1 	.word	0x080002c1
 8000c04:	20000134 	.word	0x20000134
 8000c08:	2000010c 	.word	0x2000010c
 8000c0c:	200004fc 	.word	0x200004fc
 8000c10:	20000108 	.word	0x20000108

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	; 0x40
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	2228      	movs	r2, #40	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 f922 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c4a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 f92f 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c60:	f000 f976 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c64:	230f      	movs	r3, #15
 8000c66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fb9a 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c8a:	f000 f961 	bl	8000f50 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3740      	adds	r7, #64	; 0x40
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cbe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000ccc:	224f      	movs	r2, #79	; 0x4f
 8000cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cde:	f001 fd05 	bl	80026ec <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ce8:	f000 f932 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000cfa:	f002 f851 	bl	8002da0 <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d04:	f000 f924 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_TIM2_Init+0x94>)
 8000d16:	f002 fbcf 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f916 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200004b4 	.word	0x200004b4

08000d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <MX_TIM3_Init+0xb0>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d5a:	223f      	movs	r2, #63	; 0x3f
 8000d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d7a:	f001 fd59 	bl	8002830 <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f8e4 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000d98:	f002 fb8e 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000da2:	f000 f8d5 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da6:	2360      	movs	r3, #96	; 0x60
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000dbe:	f001 ff31 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000dc8:	f000 f8c2 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM3_Init+0xac>)
 8000dce:	f000 faad 	bl	800132c <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000046c 	.word	0x2000046c
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f002 fbbc 	bl	8003598 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f893 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200004fc 	.word	0x200004fc
 8000e34:	40004400 	.word	0x40004400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e52:	f043 0320 	orr.w	r3, r3, #32
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0320 	and.w	r3, r3, #32
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <MX_GPIO_Init+0xe8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e9a:	4822      	ldr	r0, [pc, #136]	; (8000f24 <MX_GPIO_Init+0xec>)
 8000e9c:	f000 fff3 	bl	8001e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <MX_GPIO_Init+0xf0>)
 8000ea8:	f000 ffed 	bl	8001e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000eac:	2313      	movs	r3, #19
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481a      	ldr	r0, [pc, #104]	; (8000f28 <MX_GPIO_Init+0xf0>)
 8000ec0:	f000 fe46 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_GPIO_Init+0xec>)
 8000ed8:	f000 fe3a 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_2_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = LED_PED_2_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8000edc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0xec>)
 8000ef6:	f000 fe2b 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = LED_PED_1_Pin|TrafficLight1_0_Pin;
 8000efa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_GPIO_Init+0xf0>)
 8000f14:	f000 fe1c 	bl	8001b50 <HAL_GPIO_Init>

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	40010800 	.word	0x40010800

08000f2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	timer_run();
 8000f34:	f000 fb5e 	bl	80015f4 <timer_run>
	timer_run2();
 8000f38:	f000 fb76 	bl	8001628 <timer_run2>
	timer_run3();
 8000f3c:	f000 fb8e 	bl	800165c <timer_run3>
	timer_run4();
 8000f40:	f000 fba6 	bl	8001690 <timer_run4>
	SCH_Update() ;
 8000f44:	f000 f824 	bl	8000f90 <SCH_Update>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <SCH_Init>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */

#include "scheduler.h"
void SCH_Init ( ) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
unsigned char i ;
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	e006      	b.n	8000f76 <SCH_Init+0x1a>
SCH_Delete_Task ( i ) ;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f91e 	bl	80011ac <SCH_Delete_Task>
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	3301      	adds	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b27      	cmp	r3, #39	; 0x27
 8000f7a:	d9f5      	bls.n	8000f68 <SCH_Init+0xc>
 }
 Error_code_G = 0;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <SCH_Init+0x30>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 }
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000145 	.word	0x20000145

08000f90 <SCH_Update>:

  void SCH_Update ( void ) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  unsigned char Index ;

  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	e05d      	b.n	8001058 <SCH_Update+0xc8>
  if ( SCH_tasks_G[ Index ] . pTask ) {
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4933      	ldr	r1, [pc, #204]	; (800106c <SCH_Update+0xdc>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d050      	beq.n	8001052 <SCH_Update+0xc2>
 if ( SCH_tasks_G [ Index ] . Delay == 0 ) {
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	492e      	ldr	r1, [pc, #184]	; (800106c <SCH_Update+0xdc>)
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d132      	bne.n	800102c <SCH_Update+0x9c>
  // The task i s due to run
  SCH_tasks_G [ Index ] .RunMe += 1;
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	4928      	ldr	r1, [pc, #160]	; (800106c <SCH_Update+0xdc>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2d8      	uxtb	r0, r3
 8000fde:	4923      	ldr	r1, [pc, #140]	; (800106c <SCH_Update+0xdc>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	330c      	adds	r3, #12
 8000fec:	4602      	mov	r2, r0
 8000fee:	701a      	strb	r2, [r3, #0]
  if ( SCH_tasks_G [ Index ] . Period ) {
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	491e      	ldr	r1, [pc, #120]	; (800106c <SCH_Update+0xdc>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3308      	adds	r3, #8
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d025      	beq.n	8001052 <SCH_Update+0xc2>
  // Schedule periodic tasks to run again
  SCH_tasks_G [ Index ] . Delay = SCH_tasks_G [ Index ] . Period ;
 8001006:	79f9      	ldrb	r1, [r7, #7]
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <SCH_Update+0xdc>)
 800100c:	460b      	mov	r3, r1
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4403      	add	r3, r0
 8001016:	3308      	adds	r3, #8
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <SCH_Update+0xdc>)
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4403      	add	r3, r0
 8001026:	3304      	adds	r3, #4
 8001028:	6019      	str	r1, [r3, #0]
 800102a:	e012      	b.n	8001052 <SCH_Update+0xc2>
  }
  } else {
  SCH_tasks_G [ Index ] . Delay -= 1;
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	490f      	ldr	r1, [pc, #60]	; (800106c <SCH_Update+0xdc>)
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	3304      	adds	r3, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	1e59      	subs	r1, r3, #1
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <SCH_Update+0xdc>)
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4403      	add	r3, r0
 800104e:	3304      	adds	r3, #4
 8001050:	6019      	str	r1, [r3, #0]
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b27      	cmp	r3, #39	; 0x27
 800105c:	d99e      	bls.n	8000f9c <SCH_Update+0xc>
  }
  }
  }
  }
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000148 	.word	0x20000148

08001070 <SCH_Add_Task>:

  unsigned char SCH_Add_Task ( void ( * pFunction ) ( ) , unsigned int DELAY, unsigned int PERIOD)
  {
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  unsigned char Index = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8001080:	e002      	b.n	8001088 <SCH_Add_Task+0x18>
  {
  Index ++;
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	3301      	adds	r3, #1
 8001086:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8001088:	7dfa      	ldrb	r2, [r7, #23]
 800108a:	4920      	ldr	r1, [pc, #128]	; (800110c <SCH_Add_Task+0x9c>)
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <SCH_Add_Task+0x32>
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b27      	cmp	r3, #39	; 0x27
 80010a0:	d9ef      	bls.n	8001082 <SCH_Add_Task+0x12>
  }
  if ( Index == SCH_MAX_TASKS)
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	2b28      	cmp	r3, #40	; 0x28
 80010a6:	d104      	bne.n	80010b2 <SCH_Add_Task+0x42>
   {
   // Task l i s t i s f u l l
   Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <SCH_Add_Task+0xa0>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	701a      	strb	r2, [r3, #0]
   return SCH_MAX_TASKS;
 80010ae:	2328      	movs	r3, #40	; 0x28
 80010b0:	e027      	b.n	8001102 <SCH_Add_Task+0x92>
   }
   // I f we â€™re here , there i s a space in the task array
   SCH_tasks_G [ Index ] . pTask = pFunction ;
 80010b2:	7dfa      	ldrb	r2, [r7, #23]
 80010b4:	4915      	ldr	r1, [pc, #84]	; (800110c <SCH_Add_Task+0x9c>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Delay = DELAY;
 80010c4:	7dfa      	ldrb	r2, [r7, #23]
 80010c6:	4911      	ldr	r1, [pc, #68]	; (800110c <SCH_Add_Task+0x9c>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3304      	adds	r3, #4
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Period = PERIOD;
 80010d8:	7dfa      	ldrb	r2, [r7, #23]
 80010da:	490c      	ldr	r1, [pc, #48]	; (800110c <SCH_Add_Task+0x9c>)
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	3308      	adds	r3, #8
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] .RunMe = 0;
 80010ec:	7dfa      	ldrb	r2, [r7, #23]
 80010ee:	4907      	ldr	r1, [pc, #28]	; (800110c <SCH_Add_Task+0x9c>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	330c      	adds	r3, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
   return Index ;
 8001100:	7dfb      	ldrb	r3, [r7, #23]
   }
 8001102:	4618      	mov	r0, r3
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000148 	.word	0x20000148
 8001110:	20000145 	.word	0x20000145

08001114 <SCH_Dispatch_Tasks>:

  void SCH_Dispatch_Tasks ( void )
  {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  unsigned char Index ;
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	e03a      	b.n	8001196 <SCH_Dispatch_Tasks+0x82>
  if ( SCH_tasks_G [ Index ] .RunMe > 0 ) {
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4921      	ldr	r1, [pc, #132]	; (80011a8 <SCH_Dispatch_Tasks+0x94>)
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02c      	beq.n	8001190 <SCH_Dispatch_Tasks+0x7c>
  ( * SCH_tasks_G [ Index ] . pTask ) ( ) ; // Run the task
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	491b      	ldr	r1, [pc, #108]	; (80011a8 <SCH_Dispatch_Tasks+0x94>)
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4798      	blx	r3
  SCH_tasks_G [ Index ] .RunMe -= 1; // Reset / reduce RunMe fl a g
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	4917      	ldr	r1, [pc, #92]	; (80011a8 <SCH_Dispatch_Tasks+0x94>)
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	330c      	adds	r3, #12
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	3b01      	subs	r3, #1
 800115e:	b2d8      	uxtb	r0, r3
 8001160:	4911      	ldr	r1, [pc, #68]	; (80011a8 <SCH_Dispatch_Tasks+0x94>)
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	330c      	adds	r3, #12
 800116e:	4602      	mov	r2, r0
 8001170:	701a      	strb	r2, [r3, #0]

  if ( SCH_tasks_G [ Index ] . Period == 0 )
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <SCH_Dispatch_Tasks+0x94>)
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	3308      	adds	r3, #8
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <SCH_Dispatch_Tasks+0x7c>
  {
  SCH_Delete_Task ( Index ) ;
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f80e 	bl	80011ac <SCH_Delete_Task>
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3301      	adds	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b27      	cmp	r3, #39	; 0x27
 800119a:	d9c1      	bls.n	8001120 <SCH_Dispatch_Tasks+0xc>
  }
  }
  }
  }
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000148 	.word	0x20000148

080011ac <SCH_Delete_Task>:

  unsigned char SCH_Delete_Task (  uint32_t TASK_INDEX) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
   if ( SCH_tasks_G [TASK_INDEX ] . pTask == 0 ) {
 80011b4:	4920      	ldr	r1, [pc, #128]	; (8001238 <SCH_Delete_Task+0x8c>)
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <SCH_Delete_Task+0x2a>
   Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SCH_Delete_Task+0x90>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	701a      	strb	r2, [r3, #0]
   Return_code = RETURN_ERROR;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <SCH_Delete_Task+0x94>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e002      	b.n	80011dc <SCH_Delete_Task+0x30>
   } else {
   Return_code = RETURN_NORMAL;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <SCH_Delete_Task+0x94>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
   }
   SCH_tasks_G [TASK_INDEX ] . pTask = 0x0000 ;
 80011dc:	4916      	ldr	r1, [pc, #88]	; (8001238 <SCH_Delete_Task+0x8c>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Delay = 0;
 80011ee:	4912      	ldr	r1, [pc, #72]	; (8001238 <SCH_Delete_Task+0x8c>)
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	3304      	adds	r3, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Period = 0;
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <SCH_Delete_Task+0x8c>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3308      	adds	r3, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] .RunMe = 0;
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <SCH_Delete_Task+0x8c>)
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	330c      	adds	r3, #12
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
   return Return_code ;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SCH_Delete_Task+0x94>)
 800122c:	781b      	ldrb	r3, [r3, #0]
  }
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000148 	.word	0x20000148
 800123c:	20000145 	.word	0x20000145
 8001240:	20000144 	.word	0x20000144

08001244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_MspInit+0x5c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_MspInit+0x5c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_MspInit+0x60>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_MspInit+0x60>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b8:	d113      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_TIM_Base_MspInit+0x44>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_TIM_Base_MspInit+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201c      	movs	r0, #28
 80012d8:	f000 fb53 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012dc:	201c      	movs	r0, #28
 80012de:	f000 fb6c 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_TIM_PWM_MspInit+0x34>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10b      	bne.n	800131a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_TIM_PWM_MspInit+0x38>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_TIM_PWM_MspInit+0x38>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_TIM_PWM_MspInit+0x38>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40000400 	.word	0x40000400
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_TIM_MspPostInit+0x58>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d117      	bne.n	800137c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_TIM_MspPostInit+0x5c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_TIM_MspPostInit+0x5c>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_TIM_MspPostInit+0x5c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_TIM_MspPostInit+0x60>)
 8001378:	f000 fbea 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40000400 	.word	0x40000400
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <HAL_UART_MspInit+0x98>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d137      	bne.n	8001420 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_UART_MspInit+0x9c>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_UART_MspInit+0x9c>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	61d3      	str	r3, [r2, #28]
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_UART_MspInit+0x9c>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_UART_MspInit+0x9c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_UART_MspInit+0x9c>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_UART_MspInit+0x9c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e0:	2304      	movs	r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <HAL_UART_MspInit+0xa0>)
 80013f4:	f000 fbac 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f8:	2308      	movs	r3, #8
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_UART_MspInit+0xa0>)
 800140c:	f000 fba0 	bl	8001b50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2101      	movs	r1, #1
 8001414:	2026      	movs	r0, #38	; 0x26
 8001416:	f000 fab4 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800141a:	2026      	movs	r0, #38	; 0x26
 800141c:	f000 facd 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004400 	.word	0x40004400
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147a:	f000 f98f 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM2_IRQHandler+0x10>)
 800148a:	f001 fac3 	bl	8002a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200004b4 	.word	0x200004b4

08001498 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <USART2_IRQHandler+0x10>)
 800149e:	f002 f90d 	bl	80036bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200004fc 	.word	0x200004fc

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f002 fc9c 	bl	8003e18 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20005000 	.word	0x20005000
 800150c:	00000400 	.word	0x00000400
 8001510:	20000118 	.word	0x20000118
 8001514:	20000558 	.word	0x20000558

08001518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <setTimer1>:
int timer4_flag = 0;
int timer4_counter = 0;

int timer_cycle = 10;

void setTimer1(int duration){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <setTimer1+0x28>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
	timer1_counter = duration / timer_cycle;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <setTimer1+0x2c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	fb92 f3f3 	sdiv	r3, r2, r3
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <setTimer1+0x30>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000011c 	.word	0x2000011c
 8001550:	20000048 	.word	0x20000048
 8001554:	20000120 	.word	0x20000120

08001558 <setTimer2>:
void setTimer2(int duration){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <setTimer2+0x28>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
	timer2_counter = duration / timer_cycle;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <setTimer2+0x2c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001570:	4a05      	ldr	r2, [pc, #20]	; (8001588 <setTimer2+0x30>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000124 	.word	0x20000124
 8001584:	20000048 	.word	0x20000048
 8001588:	20000128 	.word	0x20000128

0800158c <setTimer3>:
void setTimer3(int duration){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	timer3_flag = 0;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <setTimer3+0x28>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
	timer3_counter = duration / timer_cycle;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <setTimer3+0x2c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <setTimer3+0x30>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2000012c 	.word	0x2000012c
 80015b8:	20000048 	.word	0x20000048
 80015bc:	20000130 	.word	0x20000130

080015c0 <setTimer4>:
void setTimer4(int duration){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	timer4_flag = 0;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <setTimer4+0x28>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
	timer4_counter = duration / timer_cycle;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <setTimer4+0x2c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <setTimer4+0x30>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000134 	.word	0x20000134
 80015ec:	20000048 	.word	0x20000048
 80015f0:	20000138 	.word	0x20000138

080015f4 <timer_run>:

void timer_run(){
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	if(timer1_counter >= 0){
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <timer_run+0x2c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0b      	blt.n	8001618 <timer_run+0x24>
		timer1_counter--;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <timer_run+0x2c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3b01      	subs	r3, #1
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <timer_run+0x2c>)
 8001608:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <timer_run+0x2c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <timer_run+0x24>
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <timer_run+0x30>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
	}
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000120 	.word	0x20000120
 8001624:	2000011c 	.word	0x2000011c

08001628 <timer_run2>:
void timer_run2(){
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	if(timer2_counter >= 0){
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <timer_run2+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0b      	blt.n	800164c <timer_run2+0x24>
		timer2_counter--;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <timer_run2+0x2c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <timer_run2+0x2c>)
 800163c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <timer_run2+0x2c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <timer_run2+0x24>
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <timer_run2+0x30>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
	}
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000128 	.word	0x20000128
 8001658:	20000124 	.word	0x20000124

0800165c <timer_run3>:
void timer_run3(){
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	if(timer3_counter >= 0){
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <timer_run3+0x2c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0b      	blt.n	8001680 <timer_run3+0x24>
		timer3_counter--;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <timer_run3+0x2c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <timer_run3+0x2c>)
 8001670:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <timer_run3+0x2c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <timer_run3+0x24>
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <timer_run3+0x30>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
	}
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000130 	.word	0x20000130
 800168c:	2000012c 	.word	0x2000012c

08001690 <timer_run4>:
void timer_run4(){
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
	if(timer4_counter >= 0){
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <timer_run4+0x2c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0b      	blt.n	80016b4 <timer_run4+0x24>
		timer4_counter--;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <timer_run4+0x2c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <timer_run4+0x2c>)
 80016a4:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0) timer4_flag = 1;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <timer_run4+0x2c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <timer_run4+0x24>
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <timer_run4+0x30>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
	}
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000138 	.word	0x20000138
 80016c0:	20000134 	.word	0x20000134

080016c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ea:	f7ff ff15 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f002 fb99 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f2:	f7ff fa1b 	bl	8000b2c <main>
  bx lr
 80016f6:	4770      	bx	lr
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001700:	0800477c 	.word	0x0800477c
  ldr r2, =_sbss
 8001704:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001708:	20000554 	.word	0x20000554

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_Init+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_Init+0x28>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f923 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fd8a 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f93b 	bl	80019d6 <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f903 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000044 	.word	0x20000044
 8001794:	20000050 	.word	0x20000050
 8001798:	2000004c 	.word	0x2000004c

0800179c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_IncTick+0x20>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000050 	.word	0x20000050
 80017bc:	20000540 	.word	0x20000540

080017c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000540 	.word	0x20000540

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4906      	ldr	r1, [pc, #24]	; (800186c <__NVIC_EnableIRQ+0x34>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff90 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff2d 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff42 	bl	800181c <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff90 	bl	80018c4 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5f 	bl	8001870 <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff35 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d008      	beq.n	8001a16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e020      	b.n	8001a58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 020e 	bic.w	r2, r2, #14
 8001a24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d005      	beq.n	8001a86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e051      	b.n	8001b2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 020e 	bic.w	r2, r2, #14
 8001a94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_DMA_Abort_IT+0xd0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d029      	beq.n	8001b04 <HAL_DMA_Abort_IT+0xa0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_DMA_Abort_IT+0xd4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d022      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x9c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_DMA_Abort_IT+0xd8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d01a      	beq.n	8001afa <HAL_DMA_Abort_IT+0x96>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <HAL_DMA_Abort_IT+0xdc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d012      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x90>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_DMA_Abort_IT+0xe0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00a      	beq.n	8001aee <HAL_DMA_Abort_IT+0x8a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <HAL_DMA_Abort_IT+0xe4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d102      	bne.n	8001ae8 <HAL_DMA_Abort_IT+0x84>
 8001ae2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ae6:	e00e      	b.n	8001b06 <HAL_DMA_Abort_IT+0xa2>
 8001ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aec:	e00b      	b.n	8001b06 <HAL_DMA_Abort_IT+0xa2>
 8001aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af2:	e008      	b.n	8001b06 <HAL_DMA_Abort_IT+0xa2>
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	e005      	b.n	8001b06 <HAL_DMA_Abort_IT+0xa2>
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	e002      	b.n	8001b06 <HAL_DMA_Abort_IT+0xa2>
 8001b00:	2310      	movs	r3, #16
 8001b02:	e000      	b.n	8001b06 <HAL_DMA_Abort_IT+0xa2>
 8001b04:	2301      	movs	r3, #1
 8001b06:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_DMA_Abort_IT+0xe8>)
 8001b08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
    } 
  }
  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40020008 	.word	0x40020008
 8001b38:	4002001c 	.word	0x4002001c
 8001b3c:	40020030 	.word	0x40020030
 8001b40:	40020044 	.word	0x40020044
 8001b44:	40020058 	.word	0x40020058
 8001b48:	4002006c 	.word	0x4002006c
 8001b4c:	40020000 	.word	0x40020000

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e169      	b.n	8001e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8158 	bne.w	8001e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a9a      	ldr	r2, [pc, #616]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d05e      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a98      	ldr	r2, [pc, #608]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d875      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b92:	4a98      	ldr	r2, [pc, #608]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d058      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b98:	4a96      	ldr	r2, [pc, #600]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d86f      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b9e:	4a96      	ldr	r2, [pc, #600]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d052      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001ba4:	4a94      	ldr	r2, [pc, #592]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d869      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001baa:	4a94      	ldr	r2, [pc, #592]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d04c      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bb0:	4a92      	ldr	r2, [pc, #584]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d863      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bb6:	4a92      	ldr	r2, [pc, #584]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d046      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d85d      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d82a      	bhi.n	8001c1c <HAL_GPIO_Init+0xcc>
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d859      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bca:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <HAL_GPIO_Init+0x80>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001c37 	.word	0x08001c37
 8001bdc:	08001c79 	.word	0x08001c79
 8001be0:	08001c7f 	.word	0x08001c7f
 8001be4:	08001c7f 	.word	0x08001c7f
 8001be8:	08001c7f 	.word	0x08001c7f
 8001bec:	08001c7f 	.word	0x08001c7f
 8001bf0:	08001c7f 	.word	0x08001c7f
 8001bf4:	08001c7f 	.word	0x08001c7f
 8001bf8:	08001c7f 	.word	0x08001c7f
 8001bfc:	08001c7f 	.word	0x08001c7f
 8001c00:	08001c7f 	.word	0x08001c7f
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c7f 	.word	0x08001c7f
 8001c0c:	08001c7f 	.word	0x08001c7f
 8001c10:	08001c7f 	.word	0x08001c7f
 8001c14:	08001c2d 	.word	0x08001c2d
 8001c18:	08001c41 	.word	0x08001c41
 8001c1c:	4a79      	ldr	r2, [pc, #484]	; (8001e04 <HAL_GPIO_Init+0x2b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c22:	e02c      	b.n	8001c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e029      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	3304      	adds	r3, #4
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e024      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e01f      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	330c      	adds	r3, #12
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e01a      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c52:	2304      	movs	r3, #4
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e013      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	611a      	str	r2, [r3, #16]
          break;
 8001c6a:	e009      	b.n	8001c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	615a      	str	r2, [r3, #20]
          break;
 8001c76:	e003      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          break;
 8001c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2bff      	cmp	r3, #255	; 0xff
 8001c84:	d801      	bhi.n	8001c8a <HAL_GPIO_Init+0x13a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_Init+0x13e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d802      	bhi.n	8001c9c <HAL_GPIO_Init+0x14c>
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x152>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	3b08      	subs	r3, #8
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	210f      	movs	r1, #15
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80b1 	beq.w	8001e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce8:	4a48      	ldr	r2, [pc, #288]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1ec>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3f      	ldr	r2, [pc, #252]	; (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1e8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3e      	ldr	r2, [pc, #248]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1e4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3d      	ldr	r2, [pc, #244]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1e0>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d30:	2304      	movs	r3, #4
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	f002 0203 	and.w	r2, r2, #3
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	4093      	lsls	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d4e:	492f      	ldr	r1, [pc, #188]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	492c      	ldr	r1, [pc, #176]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4928      	ldr	r1, [pc, #160]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4922      	ldr	r1, [pc, #136]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	491e      	ldr	r1, [pc, #120]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4918      	ldr	r1, [pc, #96]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4914      	ldr	r1, [pc, #80]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d021      	beq.n	8001e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	490e      	ldr	r1, [pc, #56]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e021      	b.n	8001e32 <HAL_GPIO_Init+0x2e2>
 8001dee:	bf00      	nop
 8001df0:	10320000 	.word	0x10320000
 8001df4:	10310000 	.word	0x10310000
 8001df8:	10220000 	.word	0x10220000
 8001dfc:	10210000 	.word	0x10210000
 8001e00:	10120000 	.word	0x10120000
 8001e04:	10110000 	.word	0x10110000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40010800 	.word	0x40010800
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40011400 	.word	0x40011400
 8001e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_GPIO_Init+0x304>)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4909      	ldr	r1, [pc, #36]	; (8001e54 <HAL_GPIO_Init+0x304>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae8e 	bne.w	8001b64 <HAL_GPIO_Init+0x14>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	372c      	adds	r7, #44	; 0x2c
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	807b      	strh	r3, [r7, #2]
 8001e92:	4613      	mov	r3, r2
 8001e94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e96:	787b      	ldrb	r3, [r7, #1]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9c:	887a      	ldrh	r2, [r7, #2]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	611a      	str	r2, [r3, #16]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e26c      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e246      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x76>
 8001f20:	4b80      	ldr	r3, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7f      	ldr	r2, [pc, #508]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b78      	ldr	r3, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a77      	ldr	r2, [pc, #476]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xbc>
 8001f5a:	4b72      	ldr	r3, [pc, #456]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a67      	ldr	r2, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fc14 	bl	80017c0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fc10 	bl	80017c0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1fa      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe4>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fc00 	bl	80017c0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fbfc 	bl	80017c0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1e6      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x10c>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1ba      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4939      	ldr	r1, [pc, #228]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x270>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fbb5 	bl	80017c0 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7ff fbb1 	bl	80017c0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e19b      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4927      	ldr	r1, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x270>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fb94 	bl	80017c0 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fb90 	bl	80017c0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e17a      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03a      	beq.n	800213c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_RCC_OscConfig+0x274>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff fb74 	bl	80017c0 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff fb70 	bl	80017c0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e15a      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 fad8 	bl	80026b0 <RCC_Delay>
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_OscConfig+0x274>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff fb5a 	bl	80017c0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	e00f      	b.n	8002130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fb56 	bl	80017c0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d908      	bls.n	8002130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e140      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	42420000 	.word	0x42420000
 800212c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b9e      	ldr	r3, [pc, #632]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e9      	bne.n	8002110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a6 	beq.w	8002296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b97      	ldr	r3, [pc, #604]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a93      	ldr	r2, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b8e      	ldr	r3, [pc, #568]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a8a      	ldr	r2, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7ff fb17 	bl	80017c0 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7ff fb13 	bl	80017c0 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	; 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0fd      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x312>
 80021bc:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x334>
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b73      	ldr	r3, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a72      	ldr	r2, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x356>
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a6c      	ldr	r2, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff fac7 	bl	80017c0 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fac3 	bl	80017c0 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0ab      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x37e>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fab1 	bl	80017c0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff faad 	bl	80017c0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e095      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a47      	ldr	r2, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8081 	beq.w	80023a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d061      	beq.n	8002370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d146      	bne.n	8002342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_OscConfig+0x4fc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fa81 	bl	80017c0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fa7d 	bl	80017c0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e067      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d108      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	492d      	ldr	r1, [pc, #180]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a19      	ldr	r1, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	430b      	orrs	r3, r1
 800230e:	4927      	ldr	r1, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x4fc>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fa51 	bl	80017c0 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff fa4d 	bl	80017c0 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e037      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x46a>
 8002340:	e02f      	b.n	80023a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_RCC_OscConfig+0x4fc>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fa3a 	bl	80017c0 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff fa36 	bl	80017c0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e020      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x498>
 800236e:	e018      	b.n	80023a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e013      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	429a      	cmp	r2, r3
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	42420060 	.word	0x42420060

080023b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d0      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b67      	ldr	r3, [pc, #412]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4965      	ldr	r1, [pc, #404]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d040      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d115      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e073      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4936      	ldr	r1, [pc, #216]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a8:	f7ff f98a 	bl	80017c0 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7ff f986 	bl	80017c0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e053      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d210      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4922      	ldr	r1, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1cc>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1d0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f8e8 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	08004728 	.word	0x08004728
 8002584:	20000044 	.word	0x20000044
 8002588:	2000004c 	.word	0x2000004c

0800258c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b490      	push	{r4, r7}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002594:	1d3c      	adds	r4, r7, #4
 8002596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800259c:	f240 2301 	movw	r3, #513	; 0x201
 80025a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x40>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x46>
 80025ca:	e02d      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ce:	623b      	str	r3, [r7, #32]
      break;
 80025d0:	e02d      	b.n	800262e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	0c9b      	lsrs	r3, r3, #18
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025de:	4413      	add	r3, r2
 80025e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c5b      	lsrs	r3, r3, #17
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025fe:	4413      	add	r3, r2
 8002600:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002604:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260a:	fb02 f203 	mul.w	r2, r2, r3
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	e004      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_RCC_GetSysClockFreq+0xbc>)
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	623b      	str	r3, [r7, #32]
      break;
 8002626:	e002      	b.n	800262e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262a:	623b      	str	r3, [r7, #32]
      break;
 800262c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262e:	6a3b      	ldr	r3, [r7, #32]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc90      	pop	{r4, r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	08004718 	.word	0x08004718
 8002640:	40021000 	.word	0x40021000
 8002644:	007a1200 	.word	0x007a1200
 8002648:	003d0900 	.word	0x003d0900

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_RCC_GetHCLKFreq+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	20000044 	.word	0x20000044

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff2 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	08004738 	.word	0x08004738

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffde 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08004738 	.word	0x08004738

080026b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <RCC_Delay+0x34>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <RCC_Delay+0x38>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a5b      	lsrs	r3, r3, #9
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026cc:	bf00      	nop
  }
  while (Delay --);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	60fa      	str	r2, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <RCC_Delay+0x1c>
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	20000044 	.word	0x20000044
 80026e8:	10624dd3 	.word	0x10624dd3

080026ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fdc8 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fc20 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d001      	beq.n	80027a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e03a      	b.n	800281a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_TIM_Base_Start_IT+0x98>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ce:	d009      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_TIM_Base_Start_IT+0x9c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_TIM_Base_Start_IT+0xa0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d111      	bne.n	8002808 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d010      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	e007      	b.n	8002818 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800

08002830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fd4a 	bl	80012f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fb7e 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_TIM_PWM_Start+0x24>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e022      	b.n	800293a <HAL_TIM_PWM_Start+0x6a>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d109      	bne.n	800290e <HAL_TIM_PWM_Start+0x3e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	e015      	b.n	800293a <HAL_TIM_PWM_Start+0x6a>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d109      	bne.n	8002928 <HAL_TIM_PWM_Start+0x58>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e008      	b.n	800293a <HAL_TIM_PWM_Start+0x6a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e05e      	b.n	8002a00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0x82>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	e013      	b.n	800297a <HAL_TIM_PWM_Start+0xaa>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0x92>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	e00b      	b.n	800297a <HAL_TIM_PWM_Start+0xaa>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d104      	bne.n	8002972 <HAL_TIM_PWM_Start+0xa2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002970:	e003      	b.n	800297a <HAL_TIM_PWM_Start+0xaa>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd74 	bl	8003470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_TIM_PWM_Start+0x138>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_TIM_PWM_Start+0x138>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_PWM_Start+0xfa>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_PWM_Start+0xfa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_TIM_PWM_Start+0x13c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_PWM_Start+0xfa>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_TIM_PWM_Start+0x140>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d111      	bne.n	80029ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d010      	beq.n	80029fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ec:	e007      	b.n	80029fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800

08002a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0202 	mvn.w	r2, #2
 8002a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa6f 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa62 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fa71 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0204 	mvn.w	r2, #4
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa45 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa38 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa47 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0208 	mvn.w	r2, #8
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa1b 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fa0e 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fa1d 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2208      	movs	r2, #8
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9f1 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f9e4 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f9f3 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0201 	mvn.w	r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f9ca 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fce1 	bl	8003586 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9b7 	bl	8002f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0220 	mvn.w	r2, #32
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fcac 	bl	8003574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0ac      	b.n	8002d98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	f200 809f 	bhi.w	8002d8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002d8d 	.word	0x08002d8d
 8002c5c:	08002d8d 	.word	0x08002d8d
 8002c60:	08002d8d 	.word	0x08002d8d
 8002c64:	08002cc9 	.word	0x08002cc9
 8002c68:	08002d8d 	.word	0x08002d8d
 8002c6c:	08002d8d 	.word	0x08002d8d
 8002c70:	08002d8d 	.word	0x08002d8d
 8002c74:	08002d0b 	.word	0x08002d0b
 8002c78:	08002d8d 	.word	0x08002d8d
 8002c7c:	08002d8d 	.word	0x08002d8d
 8002c80:	08002d8d 	.word	0x08002d8d
 8002c84:	08002d4b 	.word	0x08002d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f9d0 	bl	8003034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6999      	ldr	r1, [r3, #24]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	619a      	str	r2, [r3, #24]
      break;
 8002cc6:	e062      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa16 	bl	8003100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6999      	ldr	r1, [r3, #24]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	021a      	lsls	r2, r3, #8
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	619a      	str	r2, [r3, #24]
      break;
 8002d08:	e041      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fa5f 	bl	80031d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0208 	orr.w	r2, r2, #8
 8002d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0204 	bic.w	r2, r2, #4
 8002d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69d9      	ldr	r1, [r3, #28]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	61da      	str	r2, [r3, #28]
      break;
 8002d48:	e021      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 faa9 	bl	80032a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	021a      	lsls	r2, r3, #8
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	61da      	str	r2, [r3, #28]
      break;
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_ConfigClockSource+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0b3      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x180>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xd0>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	f000 8085 	beq.w	8002f0c <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xa2>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b60      	cmp	r3, #96	; 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x116>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e18:	2b50      	cmp	r3, #80	; 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xf6>
 8002e1c:	2b50      	cmp	r3, #80	; 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x136>
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e2c:	2b30      	cmp	r3, #48	; 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f000 faee 	bl	8003432 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04e      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f000 fad7 	bl	8003432 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 fa4e 	bl	8003344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	; 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 faa5 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 fa6c 	bl	80033a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	; 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa95 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 fa2e 	bl	8003344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fa85 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 fa7c 	bl	80033fe <TIM_ITRx_SetConfig>
        break;
 8002f06:	e002      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x30>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a26      	ldr	r2, [pc, #152]	; (800302c <TIM_Base_SetConfig+0xbc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x30>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a25      	ldr	r2, [pc, #148]	; (8003030 <TIM_Base_SetConfig+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <TIM_Base_SetConfig+0xbc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0x62>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <TIM_Base_SetConfig+0xc0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a07      	ldr	r2, [pc, #28]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d103      	bne.n	8003018 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	615a      	str	r2, [r3, #20]
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800

08003034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <TIM_OC1_SetConfig+0xc8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0308 	bic.w	r3, r3, #8
 8003096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <TIM_OC1_SetConfig+0xc8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	621a      	str	r2, [r3, #32]
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40012c00 	.word	0x40012c00

08003100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0210 	bic.w	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0320 	bic.w	r3, r3, #32
 800314a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <TIM_OC2_SetConfig+0xd0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d10d      	bne.n	800317c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <TIM_OC2_SetConfig+0xd0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d113      	bne.n	80031ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800321c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <TIM_OC3_SetConfig+0xd0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10d      	bne.n	800324e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <TIM_OC3_SetConfig+0xd0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d113      	bne.n	800327e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00

080032a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	031b      	lsls	r3, r3, #12
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <TIM_OC4_SetConfig+0x98>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d109      	bne.n	800331c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800330e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00

08003344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 030a 	bic.w	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f023 0210 	bic.w	r2, r3, #16
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	031b      	lsls	r3, r3, #12
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	f043 0307 	orr.w	r3, r3, #7
 8003420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003432:	b480      	push	{r7}
 8003434:	b087      	sub	sp, #28
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	431a      	orrs	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2201      	movs	r2, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e046      	b.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d009      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a10      	ldr	r2, [pc, #64]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10c      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800

08003574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e03f      	b.n	800362a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fee6 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	; 0x24
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fb8d 	bl	8003cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	d130      	bne.n	80036ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_UART_Transmit_IT+0x26>
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e029      	b.n	80036b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_UART_Transmit_IT+0x38>
 8003666:	2302      	movs	r3, #2
 8003668:	e022      	b.n	80036b0 <HAL_UART_Transmit_IT+0x7e>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2221      	movs	r2, #33	; 0x21
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_UART_IRQHandler+0x52>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa4f 	bl	8003baa <UART_Receive_IT>
      return;
 800370c:	e17b      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80b1 	beq.w	8003878 <HAL_UART_IRQHandler+0x1bc>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_UART_IRQHandler+0x70>
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a6 	beq.w	8003878 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_UART_IRQHandler+0x90>
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_UART_IRQHandler+0xb0>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0202 	orr.w	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_UART_IRQHandler+0xd0>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00f      	beq.n	80037b6 <HAL_UART_IRQHandler+0xfa>
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_UART_IRQHandler+0xee>
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0208 	orr.w	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 811e 	beq.w	80039fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_UART_IRQHandler+0x11e>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9e8 	bl	8003baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_UART_IRQHandler+0x146>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d031      	beq.n	8003866 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f92a 	bl	8003a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d023      	beq.n	800385e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003824:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d013      	beq.n	8003856 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4a76      	ldr	r2, [pc, #472]	; (8003a0c <HAL_UART_IRQHandler+0x350>)
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe f912 	bl	8001a64 <HAL_DMA_Abort_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	e00e      	b.n	8003874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8ec 	bl	8003a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	e00a      	b.n	8003874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8e8 	bl	8003a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	e006      	b.n	8003874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8e4 	bl	8003a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003872:	e0c3      	b.n	80039fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	bf00      	nop
    return;
 8003876:	e0c1      	b.n	80039fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 80a1 	bne.w	80039c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 809b 	beq.w	80039c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8095 	beq.w	80039c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04e      	beq.n	800395c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80038c8:	8a3b      	ldrh	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8098 	beq.w	8003a00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038d4:	8a3a      	ldrh	r2, [r7, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f080 8092 	bcs.w	8003a00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8a3a      	ldrh	r2, [r7, #16]
 80038e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d02b      	beq.n	8003944 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe f855 	bl	80019ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394c:	b29b      	uxth	r3, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	b29b      	uxth	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f876 	bl	8003a46 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800395a:	e051      	b.n	8003a00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d047      	beq.n	8003a04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003974:	8a7b      	ldrh	r3, [r7, #18]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003988:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0210 	bic.w	r2, r2, #16
 80039b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039b8:	8a7b      	ldrh	r3, [r7, #18]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f842 	bl	8003a46 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039c2:	e01f      	b.n	8003a04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_UART_IRQHandler+0x324>
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f87f 	bl	8003adc <UART_Transmit_IT>
    return;
 80039de:	e012      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_UART_IRQHandler+0x34a>
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8c0 	bl	8003b7a <UART_EndTransmit_IT>
    return;
 80039fa:	e004      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
    return;
 80039fc:	bf00      	nop
 80039fe:	e002      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003a04:	bf00      	nop
  }
}
 8003a06:	3728      	adds	r7, #40	; 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	08003ab5 	.word	0x08003ab5

08003a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0210 	bic.w	r2, r2, #16
 8003a9a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff ffb0 	bl	8003a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b21      	cmp	r3, #33	; 0x21
 8003aee:	d13e      	bne.n	8003b6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d114      	bne.n	8003b24 <UART_Transmit_IT+0x48>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d110      	bne.n	8003b24 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]
 8003b22:	e008      	b.n	8003b36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	1c59      	adds	r1, r3, #1
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6211      	str	r1, [r2, #32]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4619      	mov	r1, r3
 8003b44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff38 	bl	8003a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b22      	cmp	r3, #34	; 0x22
 8003bbc:	f040 8099 	bne.w	8003cf2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d117      	bne.n	8003bfa <UART_Receive_IT+0x50>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d113      	bne.n	8003bfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf8:	e026      	b.n	8003c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d007      	beq.n	8003c1e <UART_Receive_IT+0x74>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <UART_Receive_IT+0x82>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e008      	b.n	8003c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4619      	mov	r1, r3
 8003c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d148      	bne.n	8003cee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0220 	bic.w	r2, r2, #32
 8003c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d123      	bne.n	8003ce4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0210 	bic.w	r2, r2, #16
 8003cb0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d10a      	bne.n	8003cd6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff feb2 	bl	8003a46 <HAL_UARTEx_RxEventCallback>
 8003ce2:	e002      	b.n	8003cea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fe9c 	bl	8003a22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e002      	b.n	8003cf4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d36:	f023 030c 	bic.w	r3, r3, #12
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <UART_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d64:	f7fe fc90 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	e002      	b.n	8003d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fc78 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8003d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009a      	lsls	r2, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <UART_SetConfig+0x118>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	0119      	lsls	r1, r3, #4
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009a      	lsls	r2, r3, #2
 8003d9c:	441a      	add	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <UART_SetConfig+0x118>)
 8003daa:	fba3 0302 	umull	r0, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2064      	movs	r0, #100	; 0x64
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <UART_SetConfig+0x118>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc8:	4419      	add	r1, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <UART_SetConfig+0x118>)
 8003de2:	fba3 0302 	umull	r0, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2064      	movs	r0, #100	; 0x64
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <UART_SetConfig+0x118>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	440a      	add	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40013800 	.word	0x40013800
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000054 	.word	0x20000054

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	2600      	movs	r6, #0
 8003e28:	4d0c      	ldr	r5, [pc, #48]	; (8003e5c <__libc_init_array+0x38>)
 8003e2a:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	42a6      	cmp	r6, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	f000 fc5c 	bl	80046f0 <_init>
 8003e38:	2600      	movs	r6, #0
 8003e3a:	4d0a      	ldr	r5, [pc, #40]	; (8003e64 <__libc_init_array+0x40>)
 8003e3c:	4c0a      	ldr	r4, [pc, #40]	; (8003e68 <__libc_init_array+0x44>)
 8003e3e:	1b64      	subs	r4, r4, r5
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4c:	4798      	blx	r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e56:	4798      	blx	r3
 8003e58:	3601      	adds	r6, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	08004774 	.word	0x08004774
 8003e60:	08004774 	.word	0x08004774
 8003e64:	08004774 	.word	0x08004774
 8003e68:	08004778 	.word	0x08004778

08003e6c <memset>:
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4402      	add	r2, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <siprintf>:
 8003e7c:	b40e      	push	{r1, r2, r3}
 8003e7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e82:	b500      	push	{lr}
 8003e84:	b09c      	sub	sp, #112	; 0x70
 8003e86:	ab1d      	add	r3, sp, #116	; 0x74
 8003e88:	9002      	str	r0, [sp, #8]
 8003e8a:	9006      	str	r0, [sp, #24]
 8003e8c:	9107      	str	r1, [sp, #28]
 8003e8e:	9104      	str	r1, [sp, #16]
 8003e90:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <siprintf+0x38>)
 8003e92:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <siprintf+0x3c>)
 8003e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	a902      	add	r1, sp, #8
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	f000 f868 	bl	8003f74 <_svfiprintf_r>
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	9b02      	ldr	r3, [sp, #8]
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	b01c      	add	sp, #112	; 0x70
 8003eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb0:	b003      	add	sp, #12
 8003eb2:	4770      	bx	lr
 8003eb4:	20000054 	.word	0x20000054
 8003eb8:	ffff0208 	.word	0xffff0208

08003ebc <__ssputs_r>:
 8003ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	688e      	ldr	r6, [r1, #8]
 8003ec2:	4682      	mov	sl, r0
 8003ec4:	429e      	cmp	r6, r3
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4690      	mov	r8, r2
 8003eca:	461f      	mov	r7, r3
 8003ecc:	d838      	bhi.n	8003f40 <__ssputs_r+0x84>
 8003ece:	898a      	ldrh	r2, [r1, #12]
 8003ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ed4:	d032      	beq.n	8003f3c <__ssputs_r+0x80>
 8003ed6:	6825      	ldr	r5, [r4, #0]
 8003ed8:	6909      	ldr	r1, [r1, #16]
 8003eda:	3301      	adds	r3, #1
 8003edc:	eba5 0901 	sub.w	r9, r5, r1
 8003ee0:	6965      	ldr	r5, [r4, #20]
 8003ee2:	444b      	add	r3, r9
 8003ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eec:	106d      	asrs	r5, r5, #1
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	bf38      	it	cc
 8003ef2:	461d      	movcc	r5, r3
 8003ef4:	0553      	lsls	r3, r2, #21
 8003ef6:	d531      	bpl.n	8003f5c <__ssputs_r+0xa0>
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f000 fb53 	bl	80045a4 <_malloc_r>
 8003efe:	4606      	mov	r6, r0
 8003f00:	b950      	cbnz	r0, 8003f18 <__ssputs_r+0x5c>
 8003f02:	230c      	movs	r3, #12
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	f8ca 3000 	str.w	r3, [sl]
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	464a      	mov	r2, r9
 8003f1a:	6921      	ldr	r1, [r4, #16]
 8003f1c:	f000 face 	bl	80044bc <memcpy>
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	6126      	str	r6, [r4, #16]
 8003f2e:	444e      	add	r6, r9
 8003f30:	6026      	str	r6, [r4, #0]
 8003f32:	463e      	mov	r6, r7
 8003f34:	6165      	str	r5, [r4, #20]
 8003f36:	eba5 0509 	sub.w	r5, r5, r9
 8003f3a:	60a5      	str	r5, [r4, #8]
 8003f3c:	42be      	cmp	r6, r7
 8003f3e:	d900      	bls.n	8003f42 <__ssputs_r+0x86>
 8003f40:	463e      	mov	r6, r7
 8003f42:	4632      	mov	r2, r6
 8003f44:	4641      	mov	r1, r8
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	f000 fac6 	bl	80044d8 <memmove>
 8003f4c:	68a3      	ldr	r3, [r4, #8]
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	1b9b      	subs	r3, r3, r6
 8003f52:	4432      	add	r2, r6
 8003f54:	2000      	movs	r0, #0
 8003f56:	60a3      	str	r3, [r4, #8]
 8003f58:	6022      	str	r2, [r4, #0]
 8003f5a:	e7db      	b.n	8003f14 <__ssputs_r+0x58>
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	f000 fb7b 	bl	8004658 <_realloc_r>
 8003f62:	4606      	mov	r6, r0
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1e1      	bne.n	8003f2c <__ssputs_r+0x70>
 8003f68:	4650      	mov	r0, sl
 8003f6a:	6921      	ldr	r1, [r4, #16]
 8003f6c:	f000 face 	bl	800450c <_free_r>
 8003f70:	e7c7      	b.n	8003f02 <__ssputs_r+0x46>
	...

08003f74 <_svfiprintf_r>:
 8003f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f78:	4698      	mov	r8, r3
 8003f7a:	898b      	ldrh	r3, [r1, #12]
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	460d      	mov	r5, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	b09d      	sub	sp, #116	; 0x74
 8003f86:	d50e      	bpl.n	8003fa6 <_svfiprintf_r+0x32>
 8003f88:	690b      	ldr	r3, [r1, #16]
 8003f8a:	b963      	cbnz	r3, 8003fa6 <_svfiprintf_r+0x32>
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	f000 fb09 	bl	80045a4 <_malloc_r>
 8003f92:	6028      	str	r0, [r5, #0]
 8003f94:	6128      	str	r0, [r5, #16]
 8003f96:	b920      	cbnz	r0, 8003fa2 <_svfiprintf_r+0x2e>
 8003f98:	230c      	movs	r3, #12
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e0d1      	b.n	8004146 <_svfiprintf_r+0x1d2>
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	616b      	str	r3, [r5, #20]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003faa:	2320      	movs	r3, #32
 8003fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fb0:	2330      	movs	r3, #48	; 0x30
 8003fb2:	f04f 0901 	mov.w	r9, #1
 8003fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004160 <_svfiprintf_r+0x1ec>
 8003fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	469a      	mov	sl, r3
 8003fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fca:	b10a      	cbz	r2, 8003fd0 <_svfiprintf_r+0x5c>
 8003fcc:	2a25      	cmp	r2, #37	; 0x25
 8003fce:	d1f9      	bne.n	8003fc4 <_svfiprintf_r+0x50>
 8003fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fd4:	d00b      	beq.n	8003fee <_svfiprintf_r+0x7a>
 8003fd6:	465b      	mov	r3, fp
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4638      	mov	r0, r7
 8003fde:	f7ff ff6d 	bl	8003ebc <__ssputs_r>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f000 80aa 	beq.w	800413c <_svfiprintf_r+0x1c8>
 8003fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fea:	445a      	add	r2, fp
 8003fec:	9209      	str	r2, [sp, #36]	; 0x24
 8003fee:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a2 	beq.w	800413c <_svfiprintf_r+0x1c8>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004002:	f10a 0a01 	add.w	sl, sl, #1
 8004006:	9304      	str	r3, [sp, #16]
 8004008:	9307      	str	r3, [sp, #28]
 800400a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800400e:	931a      	str	r3, [sp, #104]	; 0x68
 8004010:	4654      	mov	r4, sl
 8004012:	2205      	movs	r2, #5
 8004014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004018:	4851      	ldr	r0, [pc, #324]	; (8004160 <_svfiprintf_r+0x1ec>)
 800401a:	f000 fa41 	bl	80044a0 <memchr>
 800401e:	9a04      	ldr	r2, [sp, #16]
 8004020:	b9d8      	cbnz	r0, 800405a <_svfiprintf_r+0xe6>
 8004022:	06d0      	lsls	r0, r2, #27
 8004024:	bf44      	itt	mi
 8004026:	2320      	movmi	r3, #32
 8004028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800402c:	0711      	lsls	r1, r2, #28
 800402e:	bf44      	itt	mi
 8004030:	232b      	movmi	r3, #43	; 0x2b
 8004032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004036:	f89a 3000 	ldrb.w	r3, [sl]
 800403a:	2b2a      	cmp	r3, #42	; 0x2a
 800403c:	d015      	beq.n	800406a <_svfiprintf_r+0xf6>
 800403e:	4654      	mov	r4, sl
 8004040:	2000      	movs	r0, #0
 8004042:	f04f 0c0a 	mov.w	ip, #10
 8004046:	9a07      	ldr	r2, [sp, #28]
 8004048:	4621      	mov	r1, r4
 800404a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800404e:	3b30      	subs	r3, #48	; 0x30
 8004050:	2b09      	cmp	r3, #9
 8004052:	d94e      	bls.n	80040f2 <_svfiprintf_r+0x17e>
 8004054:	b1b0      	cbz	r0, 8004084 <_svfiprintf_r+0x110>
 8004056:	9207      	str	r2, [sp, #28]
 8004058:	e014      	b.n	8004084 <_svfiprintf_r+0x110>
 800405a:	eba0 0308 	sub.w	r3, r0, r8
 800405e:	fa09 f303 	lsl.w	r3, r9, r3
 8004062:	4313      	orrs	r3, r2
 8004064:	46a2      	mov	sl, r4
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	e7d2      	b.n	8004010 <_svfiprintf_r+0x9c>
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	1d19      	adds	r1, r3, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	9103      	str	r1, [sp, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfbb      	ittet	lt
 8004076:	425b      	neglt	r3, r3
 8004078:	f042 0202 	orrlt.w	r2, r2, #2
 800407c:	9307      	strge	r3, [sp, #28]
 800407e:	9307      	strlt	r3, [sp, #28]
 8004080:	bfb8      	it	lt
 8004082:	9204      	strlt	r2, [sp, #16]
 8004084:	7823      	ldrb	r3, [r4, #0]
 8004086:	2b2e      	cmp	r3, #46	; 0x2e
 8004088:	d10c      	bne.n	80040a4 <_svfiprintf_r+0x130>
 800408a:	7863      	ldrb	r3, [r4, #1]
 800408c:	2b2a      	cmp	r3, #42	; 0x2a
 800408e:	d135      	bne.n	80040fc <_svfiprintf_r+0x188>
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	3402      	adds	r4, #2
 8004094:	1d1a      	adds	r2, r3, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	9203      	str	r2, [sp, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	bfb8      	it	lt
 800409e:	f04f 33ff 	movlt.w	r3, #4294967295
 80040a2:	9305      	str	r3, [sp, #20]
 80040a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004170 <_svfiprintf_r+0x1fc>
 80040a8:	2203      	movs	r2, #3
 80040aa:	4650      	mov	r0, sl
 80040ac:	7821      	ldrb	r1, [r4, #0]
 80040ae:	f000 f9f7 	bl	80044a0 <memchr>
 80040b2:	b140      	cbz	r0, 80040c6 <_svfiprintf_r+0x152>
 80040b4:	2340      	movs	r3, #64	; 0x40
 80040b6:	eba0 000a 	sub.w	r0, r0, sl
 80040ba:	fa03 f000 	lsl.w	r0, r3, r0
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	3401      	adds	r4, #1
 80040c2:	4303      	orrs	r3, r0
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ca:	2206      	movs	r2, #6
 80040cc:	4825      	ldr	r0, [pc, #148]	; (8004164 <_svfiprintf_r+0x1f0>)
 80040ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040d2:	f000 f9e5 	bl	80044a0 <memchr>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d038      	beq.n	800414c <_svfiprintf_r+0x1d8>
 80040da:	4b23      	ldr	r3, [pc, #140]	; (8004168 <_svfiprintf_r+0x1f4>)
 80040dc:	bb1b      	cbnz	r3, 8004126 <_svfiprintf_r+0x1b2>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	3308      	adds	r3, #8
 80040e8:	9303      	str	r3, [sp, #12]
 80040ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ec:	4433      	add	r3, r6
 80040ee:	9309      	str	r3, [sp, #36]	; 0x24
 80040f0:	e767      	b.n	8003fc2 <_svfiprintf_r+0x4e>
 80040f2:	460c      	mov	r4, r1
 80040f4:	2001      	movs	r0, #1
 80040f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80040fa:	e7a5      	b.n	8004048 <_svfiprintf_r+0xd4>
 80040fc:	2300      	movs	r3, #0
 80040fe:	f04f 0c0a 	mov.w	ip, #10
 8004102:	4619      	mov	r1, r3
 8004104:	3401      	adds	r4, #1
 8004106:	9305      	str	r3, [sp, #20]
 8004108:	4620      	mov	r0, r4
 800410a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800410e:	3a30      	subs	r2, #48	; 0x30
 8004110:	2a09      	cmp	r2, #9
 8004112:	d903      	bls.n	800411c <_svfiprintf_r+0x1a8>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0c5      	beq.n	80040a4 <_svfiprintf_r+0x130>
 8004118:	9105      	str	r1, [sp, #20]
 800411a:	e7c3      	b.n	80040a4 <_svfiprintf_r+0x130>
 800411c:	4604      	mov	r4, r0
 800411e:	2301      	movs	r3, #1
 8004120:	fb0c 2101 	mla	r1, ip, r1, r2
 8004124:	e7f0      	b.n	8004108 <_svfiprintf_r+0x194>
 8004126:	ab03      	add	r3, sp, #12
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	462a      	mov	r2, r5
 800412c:	4638      	mov	r0, r7
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <_svfiprintf_r+0x1f8>)
 8004130:	a904      	add	r1, sp, #16
 8004132:	f3af 8000 	nop.w
 8004136:	1c42      	adds	r2, r0, #1
 8004138:	4606      	mov	r6, r0
 800413a:	d1d6      	bne.n	80040ea <_svfiprintf_r+0x176>
 800413c:	89ab      	ldrh	r3, [r5, #12]
 800413e:	065b      	lsls	r3, r3, #25
 8004140:	f53f af2c 	bmi.w	8003f9c <_svfiprintf_r+0x28>
 8004144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004146:	b01d      	add	sp, #116	; 0x74
 8004148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414c:	ab03      	add	r3, sp, #12
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	462a      	mov	r2, r5
 8004152:	4638      	mov	r0, r7
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <_svfiprintf_r+0x1f8>)
 8004156:	a904      	add	r1, sp, #16
 8004158:	f000 f87c 	bl	8004254 <_printf_i>
 800415c:	e7eb      	b.n	8004136 <_svfiprintf_r+0x1c2>
 800415e:	bf00      	nop
 8004160:	08004740 	.word	0x08004740
 8004164:	0800474a 	.word	0x0800474a
 8004168:	00000000 	.word	0x00000000
 800416c:	08003ebd 	.word	0x08003ebd
 8004170:	08004746 	.word	0x08004746

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4616      	mov	r6, r2
 800417a:	4699      	mov	r9, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	4607      	mov	r7, r0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfb8      	it	lt
 8004186:	4613      	movlt	r3, r2
 8004188:	6033      	str	r3, [r6, #0]
 800418a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800418e:	460c      	mov	r4, r1
 8004190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004194:	b10a      	cbz	r2, 800419a <_printf_common+0x26>
 8004196:	3301      	adds	r3, #1
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0699      	lsls	r1, r3, #26
 800419e:	bf42      	ittt	mi
 80041a0:	6833      	ldrmi	r3, [r6, #0]
 80041a2:	3302      	addmi	r3, #2
 80041a4:	6033      	strmi	r3, [r6, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	f015 0506 	ands.w	r5, r5, #6
 80041ac:	d106      	bne.n	80041bc <_printf_common+0x48>
 80041ae:	f104 0a19 	add.w	sl, r4, #25
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	6832      	ldr	r2, [r6, #0]
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dc28      	bgt.n	800420e <_printf_common+0x9a>
 80041bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041c0:	1e13      	subs	r3, r2, #0
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	bf18      	it	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	0692      	lsls	r2, r2, #26
 80041ca:	d42d      	bmi.n	8004228 <_printf_common+0xb4>
 80041cc:	4649      	mov	r1, r9
 80041ce:	4638      	mov	r0, r7
 80041d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d020      	beq.n	800421c <_printf_common+0xa8>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	68e5      	ldr	r5, [r4, #12]
 80041de:	f003 0306 	and.w	r3, r3, #6
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	bf18      	it	ne
 80041e6:	2500      	movne	r5, #0
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	f04f 0600 	mov.w	r6, #0
 80041ee:	68a3      	ldr	r3, [r4, #8]
 80041f0:	bf08      	it	eq
 80041f2:	1aad      	subeq	r5, r5, r2
 80041f4:	6922      	ldr	r2, [r4, #16]
 80041f6:	bf08      	it	eq
 80041f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bfc4      	itt	gt
 8004200:	1a9b      	subgt	r3, r3, r2
 8004202:	18ed      	addgt	r5, r5, r3
 8004204:	341a      	adds	r4, #26
 8004206:	42b5      	cmp	r5, r6
 8004208:	d11a      	bne.n	8004240 <_printf_common+0xcc>
 800420a:	2000      	movs	r0, #0
 800420c:	e008      	b.n	8004220 <_printf_common+0xac>
 800420e:	2301      	movs	r3, #1
 8004210:	4652      	mov	r2, sl
 8004212:	4649      	mov	r1, r9
 8004214:	4638      	mov	r0, r7
 8004216:	47c0      	blx	r8
 8004218:	3001      	adds	r0, #1
 800421a:	d103      	bne.n	8004224 <_printf_common+0xb0>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004224:	3501      	adds	r5, #1
 8004226:	e7c4      	b.n	80041b2 <_printf_common+0x3e>
 8004228:	2030      	movs	r0, #48	; 0x30
 800422a:	18e1      	adds	r1, r4, r3
 800422c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004236:	4422      	add	r2, r4
 8004238:	3302      	adds	r3, #2
 800423a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800423e:	e7c5      	b.n	80041cc <_printf_common+0x58>
 8004240:	2301      	movs	r3, #1
 8004242:	4622      	mov	r2, r4
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d0e6      	beq.n	800421c <_printf_common+0xa8>
 800424e:	3601      	adds	r6, #1
 8004250:	e7d9      	b.n	8004206 <_printf_common+0x92>
	...

08004254 <_printf_i>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	460c      	mov	r4, r1
 800425a:	7e27      	ldrb	r7, [r4, #24]
 800425c:	4691      	mov	r9, r2
 800425e:	2f78      	cmp	r7, #120	; 0x78
 8004260:	4680      	mov	r8, r0
 8004262:	469a      	mov	sl, r3
 8004264:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426a:	d807      	bhi.n	800427c <_printf_i+0x28>
 800426c:	2f62      	cmp	r7, #98	; 0x62
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x32>
 8004270:	2f00      	cmp	r7, #0
 8004272:	f000 80d9 	beq.w	8004428 <_printf_i+0x1d4>
 8004276:	2f58      	cmp	r7, #88	; 0x58
 8004278:	f000 80a4 	beq.w	80043c4 <_printf_i+0x170>
 800427c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004284:	e03a      	b.n	80042fc <_printf_i+0xa8>
 8004286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800428a:	2b15      	cmp	r3, #21
 800428c:	d8f6      	bhi.n	800427c <_printf_i+0x28>
 800428e:	a001      	add	r0, pc, #4	; (adr r0, 8004294 <_printf_i+0x40>)
 8004290:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004294:	080042ed 	.word	0x080042ed
 8004298:	08004301 	.word	0x08004301
 800429c:	0800427d 	.word	0x0800427d
 80042a0:	0800427d 	.word	0x0800427d
 80042a4:	0800427d 	.word	0x0800427d
 80042a8:	0800427d 	.word	0x0800427d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800427d 	.word	0x0800427d
 80042b4:	0800427d 	.word	0x0800427d
 80042b8:	0800427d 	.word	0x0800427d
 80042bc:	0800427d 	.word	0x0800427d
 80042c0:	0800440f 	.word	0x0800440f
 80042c4:	08004331 	.word	0x08004331
 80042c8:	080043f1 	.word	0x080043f1
 80042cc:	0800427d 	.word	0x0800427d
 80042d0:	0800427d 	.word	0x0800427d
 80042d4:	08004431 	.word	0x08004431
 80042d8:	0800427d 	.word	0x0800427d
 80042dc:	08004331 	.word	0x08004331
 80042e0:	0800427d 	.word	0x0800427d
 80042e4:	0800427d 	.word	0x0800427d
 80042e8:	080043f9 	.word	0x080043f9
 80042ec:	680b      	ldr	r3, [r1, #0]
 80042ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042f2:	1d1a      	adds	r2, r3, #4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	600a      	str	r2, [r1, #0]
 80042f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0a4      	b.n	800444a <_printf_i+0x1f6>
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	6808      	ldr	r0, [r1, #0]
 8004304:	062e      	lsls	r6, r5, #24
 8004306:	f100 0304 	add.w	r3, r0, #4
 800430a:	d50a      	bpl.n	8004322 <_printf_i+0xce>
 800430c:	6805      	ldr	r5, [r0, #0]
 800430e:	600b      	str	r3, [r1, #0]
 8004310:	2d00      	cmp	r5, #0
 8004312:	da03      	bge.n	800431c <_printf_i+0xc8>
 8004314:	232d      	movs	r3, #45	; 0x2d
 8004316:	426d      	negs	r5, r5
 8004318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431c:	230a      	movs	r3, #10
 800431e:	485e      	ldr	r0, [pc, #376]	; (8004498 <_printf_i+0x244>)
 8004320:	e019      	b.n	8004356 <_printf_i+0x102>
 8004322:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004326:	6805      	ldr	r5, [r0, #0]
 8004328:	600b      	str	r3, [r1, #0]
 800432a:	bf18      	it	ne
 800432c:	b22d      	sxthne	r5, r5
 800432e:	e7ef      	b.n	8004310 <_printf_i+0xbc>
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	6825      	ldr	r5, [r4, #0]
 8004334:	1d18      	adds	r0, r3, #4
 8004336:	6008      	str	r0, [r1, #0]
 8004338:	0628      	lsls	r0, r5, #24
 800433a:	d501      	bpl.n	8004340 <_printf_i+0xec>
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	e002      	b.n	8004346 <_printf_i+0xf2>
 8004340:	0669      	lsls	r1, r5, #25
 8004342:	d5fb      	bpl.n	800433c <_printf_i+0xe8>
 8004344:	881d      	ldrh	r5, [r3, #0]
 8004346:	2f6f      	cmp	r7, #111	; 0x6f
 8004348:	bf0c      	ite	eq
 800434a:	2308      	moveq	r3, #8
 800434c:	230a      	movne	r3, #10
 800434e:	4852      	ldr	r0, [pc, #328]	; (8004498 <_printf_i+0x244>)
 8004350:	2100      	movs	r1, #0
 8004352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004356:	6866      	ldr	r6, [r4, #4]
 8004358:	2e00      	cmp	r6, #0
 800435a:	bfa8      	it	ge
 800435c:	6821      	ldrge	r1, [r4, #0]
 800435e:	60a6      	str	r6, [r4, #8]
 8004360:	bfa4      	itt	ge
 8004362:	f021 0104 	bicge.w	r1, r1, #4
 8004366:	6021      	strge	r1, [r4, #0]
 8004368:	b90d      	cbnz	r5, 800436e <_printf_i+0x11a>
 800436a:	2e00      	cmp	r6, #0
 800436c:	d04d      	beq.n	800440a <_printf_i+0x1b6>
 800436e:	4616      	mov	r6, r2
 8004370:	fbb5 f1f3 	udiv	r1, r5, r3
 8004374:	fb03 5711 	mls	r7, r3, r1, r5
 8004378:	5dc7      	ldrb	r7, [r0, r7]
 800437a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800437e:	462f      	mov	r7, r5
 8004380:	42bb      	cmp	r3, r7
 8004382:	460d      	mov	r5, r1
 8004384:	d9f4      	bls.n	8004370 <_printf_i+0x11c>
 8004386:	2b08      	cmp	r3, #8
 8004388:	d10b      	bne.n	80043a2 <_printf_i+0x14e>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	07df      	lsls	r7, r3, #31
 800438e:	d508      	bpl.n	80043a2 <_printf_i+0x14e>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	6861      	ldr	r1, [r4, #4]
 8004394:	4299      	cmp	r1, r3
 8004396:	bfde      	ittt	le
 8004398:	2330      	movle	r3, #48	; 0x30
 800439a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800439e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043a2:	1b92      	subs	r2, r2, r6
 80043a4:	6122      	str	r2, [r4, #16]
 80043a6:	464b      	mov	r3, r9
 80043a8:	4621      	mov	r1, r4
 80043aa:	4640      	mov	r0, r8
 80043ac:	f8cd a000 	str.w	sl, [sp]
 80043b0:	aa03      	add	r2, sp, #12
 80043b2:	f7ff fedf 	bl	8004174 <_printf_common>
 80043b6:	3001      	adds	r0, #1
 80043b8:	d14c      	bne.n	8004454 <_printf_i+0x200>
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	b004      	add	sp, #16
 80043c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c4:	4834      	ldr	r0, [pc, #208]	; (8004498 <_printf_i+0x244>)
 80043c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043ca:	680e      	ldr	r6, [r1, #0]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80043d2:	061f      	lsls	r7, r3, #24
 80043d4:	600e      	str	r6, [r1, #0]
 80043d6:	d514      	bpl.n	8004402 <_printf_i+0x1ae>
 80043d8:	07d9      	lsls	r1, r3, #31
 80043da:	bf44      	itt	mi
 80043dc:	f043 0320 	orrmi.w	r3, r3, #32
 80043e0:	6023      	strmi	r3, [r4, #0]
 80043e2:	b91d      	cbnz	r5, 80043ec <_printf_i+0x198>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	f023 0320 	bic.w	r3, r3, #32
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	2310      	movs	r3, #16
 80043ee:	e7af      	b.n	8004350 <_printf_i+0xfc>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	2378      	movs	r3, #120	; 0x78
 80043fa:	4828      	ldr	r0, [pc, #160]	; (800449c <_printf_i+0x248>)
 80043fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004400:	e7e3      	b.n	80043ca <_printf_i+0x176>
 8004402:	065e      	lsls	r6, r3, #25
 8004404:	bf48      	it	mi
 8004406:	b2ad      	uxthmi	r5, r5
 8004408:	e7e6      	b.n	80043d8 <_printf_i+0x184>
 800440a:	4616      	mov	r6, r2
 800440c:	e7bb      	b.n	8004386 <_printf_i+0x132>
 800440e:	680b      	ldr	r3, [r1, #0]
 8004410:	6826      	ldr	r6, [r4, #0]
 8004412:	1d1d      	adds	r5, r3, #4
 8004414:	6960      	ldr	r0, [r4, #20]
 8004416:	600d      	str	r5, [r1, #0]
 8004418:	0635      	lsls	r5, r6, #24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	d501      	bpl.n	8004422 <_printf_i+0x1ce>
 800441e:	6018      	str	r0, [r3, #0]
 8004420:	e002      	b.n	8004428 <_printf_i+0x1d4>
 8004422:	0671      	lsls	r1, r6, #25
 8004424:	d5fb      	bpl.n	800441e <_printf_i+0x1ca>
 8004426:	8018      	strh	r0, [r3, #0]
 8004428:	2300      	movs	r3, #0
 800442a:	4616      	mov	r6, r2
 800442c:	6123      	str	r3, [r4, #16]
 800442e:	e7ba      	b.n	80043a6 <_printf_i+0x152>
 8004430:	680b      	ldr	r3, [r1, #0]
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	600a      	str	r2, [r1, #0]
 8004436:	681e      	ldr	r6, [r3, #0]
 8004438:	2100      	movs	r1, #0
 800443a:	4630      	mov	r0, r6
 800443c:	6862      	ldr	r2, [r4, #4]
 800443e:	f000 f82f 	bl	80044a0 <memchr>
 8004442:	b108      	cbz	r0, 8004448 <_printf_i+0x1f4>
 8004444:	1b80      	subs	r0, r0, r6
 8004446:	6060      	str	r0, [r4, #4]
 8004448:	6863      	ldr	r3, [r4, #4]
 800444a:	6123      	str	r3, [r4, #16]
 800444c:	2300      	movs	r3, #0
 800444e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004452:	e7a8      	b.n	80043a6 <_printf_i+0x152>
 8004454:	4632      	mov	r2, r6
 8004456:	4649      	mov	r1, r9
 8004458:	4640      	mov	r0, r8
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	47d0      	blx	sl
 800445e:	3001      	adds	r0, #1
 8004460:	d0ab      	beq.n	80043ba <_printf_i+0x166>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	079b      	lsls	r3, r3, #30
 8004466:	d413      	bmi.n	8004490 <_printf_i+0x23c>
 8004468:	68e0      	ldr	r0, [r4, #12]
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	4298      	cmp	r0, r3
 800446e:	bfb8      	it	lt
 8004470:	4618      	movlt	r0, r3
 8004472:	e7a4      	b.n	80043be <_printf_i+0x16a>
 8004474:	2301      	movs	r3, #1
 8004476:	4632      	mov	r2, r6
 8004478:	4649      	mov	r1, r9
 800447a:	4640      	mov	r0, r8
 800447c:	47d0      	blx	sl
 800447e:	3001      	adds	r0, #1
 8004480:	d09b      	beq.n	80043ba <_printf_i+0x166>
 8004482:	3501      	adds	r5, #1
 8004484:	68e3      	ldr	r3, [r4, #12]
 8004486:	9903      	ldr	r1, [sp, #12]
 8004488:	1a5b      	subs	r3, r3, r1
 800448a:	42ab      	cmp	r3, r5
 800448c:	dcf2      	bgt.n	8004474 <_printf_i+0x220>
 800448e:	e7eb      	b.n	8004468 <_printf_i+0x214>
 8004490:	2500      	movs	r5, #0
 8004492:	f104 0619 	add.w	r6, r4, #25
 8004496:	e7f5      	b.n	8004484 <_printf_i+0x230>
 8004498:	08004751 	.word	0x08004751
 800449c:	08004762 	.word	0x08004762

080044a0 <memchr>:
 80044a0:	4603      	mov	r3, r0
 80044a2:	b510      	push	{r4, lr}
 80044a4:	b2c9      	uxtb	r1, r1
 80044a6:	4402      	add	r2, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	d101      	bne.n	80044b2 <memchr+0x12>
 80044ae:	2000      	movs	r0, #0
 80044b0:	e003      	b.n	80044ba <memchr+0x1a>
 80044b2:	7804      	ldrb	r4, [r0, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	428c      	cmp	r4, r1
 80044b8:	d1f6      	bne.n	80044a8 <memchr+0x8>
 80044ba:	bd10      	pop	{r4, pc}

080044bc <memcpy>:
 80044bc:	440a      	add	r2, r1
 80044be:	4291      	cmp	r1, r2
 80044c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044c4:	d100      	bne.n	80044c8 <memcpy+0xc>
 80044c6:	4770      	bx	lr
 80044c8:	b510      	push	{r4, lr}
 80044ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ce:	4291      	cmp	r1, r2
 80044d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044d4:	d1f9      	bne.n	80044ca <memcpy+0xe>
 80044d6:	bd10      	pop	{r4, pc}

080044d8 <memmove>:
 80044d8:	4288      	cmp	r0, r1
 80044da:	b510      	push	{r4, lr}
 80044dc:	eb01 0402 	add.w	r4, r1, r2
 80044e0:	d902      	bls.n	80044e8 <memmove+0x10>
 80044e2:	4284      	cmp	r4, r0
 80044e4:	4623      	mov	r3, r4
 80044e6:	d807      	bhi.n	80044f8 <memmove+0x20>
 80044e8:	1e43      	subs	r3, r0, #1
 80044ea:	42a1      	cmp	r1, r4
 80044ec:	d008      	beq.n	8004500 <memmove+0x28>
 80044ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044f6:	e7f8      	b.n	80044ea <memmove+0x12>
 80044f8:	4601      	mov	r1, r0
 80044fa:	4402      	add	r2, r0
 80044fc:	428a      	cmp	r2, r1
 80044fe:	d100      	bne.n	8004502 <memmove+0x2a>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800450a:	e7f7      	b.n	80044fc <memmove+0x24>

0800450c <_free_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4605      	mov	r5, r0
 8004510:	2900      	cmp	r1, #0
 8004512:	d043      	beq.n	800459c <_free_r+0x90>
 8004514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004518:	1f0c      	subs	r4, r1, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	18e4      	addlt	r4, r4, r3
 8004520:	f000 f8d0 	bl	80046c4 <__malloc_lock>
 8004524:	4a1e      	ldr	r2, [pc, #120]	; (80045a0 <_free_r+0x94>)
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	4610      	mov	r0, r2
 800452a:	b933      	cbnz	r3, 800453a <_free_r+0x2e>
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	6014      	str	r4, [r2, #0]
 8004530:	4628      	mov	r0, r5
 8004532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004536:	f000 b8cb 	b.w	80046d0 <__malloc_unlock>
 800453a:	42a3      	cmp	r3, r4
 800453c:	d90a      	bls.n	8004554 <_free_r+0x48>
 800453e:	6821      	ldr	r1, [r4, #0]
 8004540:	1862      	adds	r2, r4, r1
 8004542:	4293      	cmp	r3, r2
 8004544:	bf01      	itttt	eq
 8004546:	681a      	ldreq	r2, [r3, #0]
 8004548:	685b      	ldreq	r3, [r3, #4]
 800454a:	1852      	addeq	r2, r2, r1
 800454c:	6022      	streq	r2, [r4, #0]
 800454e:	6063      	str	r3, [r4, #4]
 8004550:	6004      	str	r4, [r0, #0]
 8004552:	e7ed      	b.n	8004530 <_free_r+0x24>
 8004554:	461a      	mov	r2, r3
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	b10b      	cbz	r3, 800455e <_free_r+0x52>
 800455a:	42a3      	cmp	r3, r4
 800455c:	d9fa      	bls.n	8004554 <_free_r+0x48>
 800455e:	6811      	ldr	r1, [r2, #0]
 8004560:	1850      	adds	r0, r2, r1
 8004562:	42a0      	cmp	r0, r4
 8004564:	d10b      	bne.n	800457e <_free_r+0x72>
 8004566:	6820      	ldr	r0, [r4, #0]
 8004568:	4401      	add	r1, r0
 800456a:	1850      	adds	r0, r2, r1
 800456c:	4283      	cmp	r3, r0
 800456e:	6011      	str	r1, [r2, #0]
 8004570:	d1de      	bne.n	8004530 <_free_r+0x24>
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4401      	add	r1, r0
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	6053      	str	r3, [r2, #4]
 800457c:	e7d8      	b.n	8004530 <_free_r+0x24>
 800457e:	d902      	bls.n	8004586 <_free_r+0x7a>
 8004580:	230c      	movs	r3, #12
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	e7d4      	b.n	8004530 <_free_r+0x24>
 8004586:	6820      	ldr	r0, [r4, #0]
 8004588:	1821      	adds	r1, r4, r0
 800458a:	428b      	cmp	r3, r1
 800458c:	bf01      	itttt	eq
 800458e:	6819      	ldreq	r1, [r3, #0]
 8004590:	685b      	ldreq	r3, [r3, #4]
 8004592:	1809      	addeq	r1, r1, r0
 8004594:	6021      	streq	r1, [r4, #0]
 8004596:	6063      	str	r3, [r4, #4]
 8004598:	6054      	str	r4, [r2, #4]
 800459a:	e7c9      	b.n	8004530 <_free_r+0x24>
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	bf00      	nop
 80045a0:	2000013c 	.word	0x2000013c

080045a4 <_malloc_r>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	1ccd      	adds	r5, r1, #3
 80045a8:	f025 0503 	bic.w	r5, r5, #3
 80045ac:	3508      	adds	r5, #8
 80045ae:	2d0c      	cmp	r5, #12
 80045b0:	bf38      	it	cc
 80045b2:	250c      	movcc	r5, #12
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	4606      	mov	r6, r0
 80045b8:	db01      	blt.n	80045be <_malloc_r+0x1a>
 80045ba:	42a9      	cmp	r1, r5
 80045bc:	d903      	bls.n	80045c6 <_malloc_r+0x22>
 80045be:	230c      	movs	r3, #12
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	2000      	movs	r0, #0
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c6:	f000 f87d 	bl	80046c4 <__malloc_lock>
 80045ca:	4921      	ldr	r1, [pc, #132]	; (8004650 <_malloc_r+0xac>)
 80045cc:	680a      	ldr	r2, [r1, #0]
 80045ce:	4614      	mov	r4, r2
 80045d0:	b99c      	cbnz	r4, 80045fa <_malloc_r+0x56>
 80045d2:	4f20      	ldr	r7, [pc, #128]	; (8004654 <_malloc_r+0xb0>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b923      	cbnz	r3, 80045e2 <_malloc_r+0x3e>
 80045d8:	4621      	mov	r1, r4
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 f862 	bl	80046a4 <_sbrk_r>
 80045e0:	6038      	str	r0, [r7, #0]
 80045e2:	4629      	mov	r1, r5
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f85d 	bl	80046a4 <_sbrk_r>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	d123      	bne.n	8004636 <_malloc_r+0x92>
 80045ee:	230c      	movs	r3, #12
 80045f0:	4630      	mov	r0, r6
 80045f2:	6033      	str	r3, [r6, #0]
 80045f4:	f000 f86c 	bl	80046d0 <__malloc_unlock>
 80045f8:	e7e3      	b.n	80045c2 <_malloc_r+0x1e>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	1b5b      	subs	r3, r3, r5
 80045fe:	d417      	bmi.n	8004630 <_malloc_r+0x8c>
 8004600:	2b0b      	cmp	r3, #11
 8004602:	d903      	bls.n	800460c <_malloc_r+0x68>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	441c      	add	r4, r3
 8004608:	6025      	str	r5, [r4, #0]
 800460a:	e004      	b.n	8004616 <_malloc_r+0x72>
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	42a2      	cmp	r2, r4
 8004610:	bf0c      	ite	eq
 8004612:	600b      	streq	r3, [r1, #0]
 8004614:	6053      	strne	r3, [r2, #4]
 8004616:	4630      	mov	r0, r6
 8004618:	f000 f85a 	bl	80046d0 <__malloc_unlock>
 800461c:	f104 000b 	add.w	r0, r4, #11
 8004620:	1d23      	adds	r3, r4, #4
 8004622:	f020 0007 	bic.w	r0, r0, #7
 8004626:	1ac2      	subs	r2, r0, r3
 8004628:	d0cc      	beq.n	80045c4 <_malloc_r+0x20>
 800462a:	1a1b      	subs	r3, r3, r0
 800462c:	50a3      	str	r3, [r4, r2]
 800462e:	e7c9      	b.n	80045c4 <_malloc_r+0x20>
 8004630:	4622      	mov	r2, r4
 8004632:	6864      	ldr	r4, [r4, #4]
 8004634:	e7cc      	b.n	80045d0 <_malloc_r+0x2c>
 8004636:	1cc4      	adds	r4, r0, #3
 8004638:	f024 0403 	bic.w	r4, r4, #3
 800463c:	42a0      	cmp	r0, r4
 800463e:	d0e3      	beq.n	8004608 <_malloc_r+0x64>
 8004640:	1a21      	subs	r1, r4, r0
 8004642:	4630      	mov	r0, r6
 8004644:	f000 f82e 	bl	80046a4 <_sbrk_r>
 8004648:	3001      	adds	r0, #1
 800464a:	d1dd      	bne.n	8004608 <_malloc_r+0x64>
 800464c:	e7cf      	b.n	80045ee <_malloc_r+0x4a>
 800464e:	bf00      	nop
 8004650:	2000013c 	.word	0x2000013c
 8004654:	20000140 	.word	0x20000140

08004658 <_realloc_r>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	4607      	mov	r7, r0
 800465c:	4614      	mov	r4, r2
 800465e:	460e      	mov	r6, r1
 8004660:	b921      	cbnz	r1, 800466c <_realloc_r+0x14>
 8004662:	4611      	mov	r1, r2
 8004664:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004668:	f7ff bf9c 	b.w	80045a4 <_malloc_r>
 800466c:	b922      	cbnz	r2, 8004678 <_realloc_r+0x20>
 800466e:	f7ff ff4d 	bl	800450c <_free_r>
 8004672:	4625      	mov	r5, r4
 8004674:	4628      	mov	r0, r5
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004678:	f000 f830 	bl	80046dc <_malloc_usable_size_r>
 800467c:	42a0      	cmp	r0, r4
 800467e:	d20f      	bcs.n	80046a0 <_realloc_r+0x48>
 8004680:	4621      	mov	r1, r4
 8004682:	4638      	mov	r0, r7
 8004684:	f7ff ff8e 	bl	80045a4 <_malloc_r>
 8004688:	4605      	mov	r5, r0
 800468a:	2800      	cmp	r0, #0
 800468c:	d0f2      	beq.n	8004674 <_realloc_r+0x1c>
 800468e:	4631      	mov	r1, r6
 8004690:	4622      	mov	r2, r4
 8004692:	f7ff ff13 	bl	80044bc <memcpy>
 8004696:	4631      	mov	r1, r6
 8004698:	4638      	mov	r0, r7
 800469a:	f7ff ff37 	bl	800450c <_free_r>
 800469e:	e7e9      	b.n	8004674 <_realloc_r+0x1c>
 80046a0:	4635      	mov	r5, r6
 80046a2:	e7e7      	b.n	8004674 <_realloc_r+0x1c>

080046a4 <_sbrk_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	2300      	movs	r3, #0
 80046a8:	4d05      	ldr	r5, [pc, #20]	; (80046c0 <_sbrk_r+0x1c>)
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	f7fc fefc 	bl	80014ac <_sbrk>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_sbrk_r+0x1a>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_sbrk_r+0x1a>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	20000544 	.word	0x20000544

080046c4 <__malloc_lock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__malloc_lock+0x8>)
 80046c6:	f000 b811 	b.w	80046ec <__retarget_lock_acquire_recursive>
 80046ca:	bf00      	nop
 80046cc:	2000054c 	.word	0x2000054c

080046d0 <__malloc_unlock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <__malloc_unlock+0x8>)
 80046d2:	f000 b80c 	b.w	80046ee <__retarget_lock_release_recursive>
 80046d6:	bf00      	nop
 80046d8:	2000054c 	.word	0x2000054c

080046dc <_malloc_usable_size_r>:
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f18      	subs	r0, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfbc      	itt	lt
 80046e6:	580b      	ldrlt	r3, [r1, r0]
 80046e8:	18c0      	addlt	r0, r0, r3
 80046ea:	4770      	bx	lr

080046ec <__retarget_lock_acquire_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_release_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <_init>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr

080046fc <_fini>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr
