
BAI_TAP_LON2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb0  08003bb0  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb0  08003bb0  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb0  08003bb0  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000054  08003c0c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08003c0c  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd06  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002088  00000000  00000000  0002bd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0002eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017679  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e380  00000000  00000000  00046dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b0e  00000000  00000000  00055149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbc57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000dbcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b70 	.word	0x08003b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003b70 	.word	0x08003b70

0800014c <getKeyInput1>:
int button_flag2 = 0;
int button_flag3 = 0;
int button_flag4 = 0;


void getKeyInput1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	key01 = key11;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <getKeyInput1+0x64>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <getKeyInput1+0x68>)
 8000156:	6013      	str	r3, [r2, #0]
	key11 = key21;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <getKeyInput1+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a14      	ldr	r2, [pc, #80]	; (80001b0 <getKeyInput1+0x64>)
 800015e:	6013      	str	r3, [r2, #0]
	key21 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000160:	2102      	movs	r1, #2
 8000162:	4816      	ldr	r0, [pc, #88]	; (80001bc <getKeyInput1+0x70>)
 8000164:	f001 fd3c 	bl	8001be0 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <getKeyInput1+0x6c>)
 800016e:	601a      	str	r2, [r3, #0]
	if((key01 == key11) && (key11 == key21)){
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <getKeyInput1+0x68>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <getKeyInput1+0x64>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	429a      	cmp	r2, r3
 800017a:	d116      	bne.n	80001aa <getKeyInput1+0x5e>
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <getKeyInput1+0x64>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <getKeyInput1+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	429a      	cmp	r2, r3
 8000186:	d110      	bne.n	80001aa <getKeyInput1+0x5e>
		if(key31 != key21){
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <getKeyInput1+0x74>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <getKeyInput1+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d00a      	beq.n	80001aa <getKeyInput1+0x5e>
			key31 = key21;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <getKeyInput1+0x6c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <getKeyInput1+0x74>)
 800019a:	6013      	str	r3, [r2, #0]
			if(key21== PRESSED_STATE){
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <getKeyInput1+0x6c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d102      	bne.n	80001aa <getKeyInput1+0x5e>
				button_flag1 = 1;
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <getKeyInput1+0x78>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000004 	.word	0x20000004
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000008 	.word	0x20000008
 80001bc:	40010800 	.word	0x40010800
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	20000070 	.word	0x20000070

080001c8 <getKeyInput2>:

void getKeyInput2(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	key02 = key12;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <getKeyInput2+0x64>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <getKeyInput2+0x68>)
 80001d2:	6013      	str	r3, [r2, #0]
	key12 = key22;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <getKeyInput2+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a14      	ldr	r2, [pc, #80]	; (800022c <getKeyInput2+0x64>)
 80001da:	6013      	str	r3, [r2, #0]
	key22 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001dc:	2110      	movs	r1, #16
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <getKeyInput2+0x70>)
 80001e0:	f001 fcfe 	bl	8001be0 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <getKeyInput2+0x6c>)
 80001ea:	601a      	str	r2, [r3, #0]
	if((key02 == key12) && (key12 == key22)){
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <getKeyInput2+0x68>)
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <getKeyInput2+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d116      	bne.n	8000226 <getKeyInput2+0x5e>
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <getKeyInput2+0x64>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <getKeyInput2+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d110      	bne.n	8000226 <getKeyInput2+0x5e>
		if(key32 != key22){
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <getKeyInput2+0x74>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <getKeyInput2+0x6c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d00a      	beq.n	8000226 <getKeyInput2+0x5e>
			key32 = key22;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <getKeyInput2+0x6c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <getKeyInput2+0x74>)
 8000216:	6013      	str	r3, [r2, #0]
			if(key22 == PRESSED_STATE){
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <getKeyInput2+0x6c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <getKeyInput2+0x5e>
				button_flag2= 1;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <getKeyInput2+0x78>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000024 	.word	0x20000024
 8000230:	20000020 	.word	0x20000020
 8000234:	20000028 	.word	0x20000028
 8000238:	40010800 	.word	0x40010800
 800023c:	2000002c 	.word	0x2000002c
 8000240:	20000074 	.word	0x20000074

08000244 <getKeyInput3>:

void getKeyInput3(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	key03 = key13;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <getKeyInput3+0x64>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <getKeyInput3+0x68>)
 800024e:	6013      	str	r3, [r2, #0]
	key13 = key23;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <getKeyInput3+0x6c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <getKeyInput3+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
	key23 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000258:	2101      	movs	r1, #1
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <getKeyInput3+0x70>)
 800025c:	f001 fcc0 	bl	8001be0 <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <getKeyInput3+0x6c>)
 8000266:	601a      	str	r2, [r3, #0]
	if((key03 == key13) && (key13 == key23)){
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <getKeyInput3+0x68>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <getKeyInput3+0x64>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d116      	bne.n	80002a2 <getKeyInput3+0x5e>
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <getKeyInput3+0x64>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <getKeyInput3+0x6c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d110      	bne.n	80002a2 <getKeyInput3+0x5e>
		if(key33 != key23){
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <getKeyInput3+0x74>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <getKeyInput3+0x6c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d00a      	beq.n	80002a2 <getKeyInput3+0x5e>
			key33 = key23;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <getKeyInput3+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <getKeyInput3+0x74>)
 8000292:	6013      	str	r3, [r2, #0]
			if(key23 == PRESSED_STATE){
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <getKeyInput3+0x6c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <getKeyInput3+0x5e>
				button_flag3= 1;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <getKeyInput3+0x78>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000014 	.word	0x20000014
 80002ac:	20000010 	.word	0x20000010
 80002b0:	20000018 	.word	0x20000018
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	2000001c 	.word	0x2000001c
 80002bc:	20000078 	.word	0x20000078

080002c0 <getKeyInput4>:

void getKeyInput4(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	key04 = key14;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <getKeyInput4+0x64>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a17      	ldr	r2, [pc, #92]	; (8000328 <getKeyInput4+0x68>)
 80002ca:	6013      	str	r3, [r2, #0]
	key14 = key24;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <getKeyInput4+0x6c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <getKeyInput4+0x64>)
 80002d2:	6013      	str	r3, [r2, #0]
	key24 = HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin);
 80002d4:	2101      	movs	r1, #1
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <getKeyInput4+0x70>)
 80002d8:	f001 fc82 	bl	8001be0 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <getKeyInput4+0x6c>)
 80002e2:	601a      	str	r2, [r3, #0]
	if((key04 == key14) && (key14 == key24)){
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput4+0x68>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <getKeyInput4+0x64>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d116      	bne.n	800031e <getKeyInput4+0x5e>
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <getKeyInput4+0x64>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <getKeyInput4+0x6c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d110      	bne.n	800031e <getKeyInput4+0x5e>
		if(key34 != key24){
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <getKeyInput4+0x74>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <getKeyInput4+0x6c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	429a      	cmp	r2, r3
 8000306:	d00a      	beq.n	800031e <getKeyInput4+0x5e>
			key34 = key24;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <getKeyInput4+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <getKeyInput4+0x74>)
 800030e:	6013      	str	r3, [r2, #0]
			if(key24 == PRESSED_STATE){
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <getKeyInput4+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <getKeyInput4+0x5e>
				button_flag4= 1;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <getKeyInput4+0x78>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000034 	.word	0x20000034
 8000328:	20000030 	.word	0x20000030
 800032c:	20000038 	.word	0x20000038
 8000330:	40010800 	.word	0x40010800
 8000334:	2000003c 	.word	0x2000003c
 8000338:	2000007c 	.word	0x2000007c

0800033c <control_unit>:



#include "control.h"

void control_unit(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if(button_flag1 == 1)
 8000340:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <control_unit+0xb0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d10a      	bne.n	800035e <control_unit+0x22>
	{
		ped = 0;
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <control_unit+0xb4>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		mode = mode +1;
 800034e:	4b29      	ldr	r3, [pc, #164]	; (80003f4 <control_unit+0xb8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	4a27      	ldr	r2, [pc, #156]	; (80003f4 <control_unit+0xb8>)
 8000356:	6013      	str	r3, [r2, #0]
		button_flag1 = 0;
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <control_unit+0xb0>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
	}
	if(mode == 1)
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <control_unit+0xb8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d111      	bne.n	800038a <control_unit+0x4e>
	{
		fsm_automatic_run(global_red, global_green, global_yellow);
 8000366:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <control_unit+0xbc>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a24      	ldr	r2, [pc, #144]	; (80003fc <control_unit+0xc0>)
 800036c:	6811      	ldr	r1, [r2, #0]
 800036e:	4a24      	ldr	r2, [pc, #144]	; (8000400 <control_unit+0xc4>)
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f84c 	bl	8000410 <fsm_automatic_run>
		fsm_automatic_run2(global_red, global_green, global_yellow);
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <control_unit+0xbc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1f      	ldr	r2, [pc, #124]	; (80003fc <control_unit+0xc0>)
 800037e:	6811      	ldr	r1, [r2, #0]
 8000380:	4a1f      	ldr	r2, [pc, #124]	; (8000400 <control_unit+0xc4>)
 8000382:	6812      	ldr	r2, [r2, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f96f 	bl	8000668 <fsm_automatic_run2>
	}
	if(mode == 2)
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <control_unit+0xb8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d101      	bne.n	8000396 <control_unit+0x5a>
	{
	    fsm_automatic_run3();
 8000392:	f000 f9f5 	bl	8000780 <fsm_automatic_run3>
	}

	if(mode == 3)
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <control_unit+0xb8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b03      	cmp	r3, #3
 800039c:	d101      	bne.n	80003a2 <control_unit+0x66>
	{
		fsm_automatic_run4();
 800039e:	f000 fa59 	bl	8000854 <fsm_automatic_run4>
	}

	if(mode == 4)
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <control_unit+0xb8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d108      	bne.n	80003bc <control_unit+0x80>
	{
		mode = 1;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <control_unit+0xb8>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
		status = INIT;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <control_unit+0xc8>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
		status1 = INIT;
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <control_unit+0xcc>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
	}
	if(button_flag4 == 1)
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <control_unit+0xd0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d110      	bne.n	80003e6 <control_unit+0xaa>
	{
		ped = 1;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <control_unit+0xb4>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
		setTimer2(global_green+global_red+global_yellow);
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <control_unit+0xc0>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <control_unit+0xbc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	441a      	add	r2, r3
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <control_unit+0xc4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 ffb4 	bl	8001348 <setTimer2>
		button_flag4 = 0;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <control_unit+0xd0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
	}

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000070 	.word	0x20000070
 80003f0:	2000009c 	.word	0x2000009c
 80003f4:	20000040 	.word	0x20000040
 80003f8:	20000088 	.word	0x20000088
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	20000090 	.word	0x20000090
 8000404:	20000080 	.word	0x20000080
 8000408:	20000084 	.word	0x20000084
 800040c:	2000007c 	.word	0x2000007c

08000410 <fsm_automatic_run>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */
#include "fsm_automatic.h"
#include "main.h"
void fsm_automatic_run(int x, int y, int z){
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	switch(status){
 800041c:	4b8a      	ldr	r3, [pc, #552]	; (8000648 <fsm_automatic_run+0x238>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3b01      	subs	r3, #1
 8000422:	2b03      	cmp	r3, #3
 8000424:	f200 8104 	bhi.w	8000630 <fsm_automatic_run+0x220>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <fsm_automatic_run+0x20>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000441 	.word	0x08000441
 8000434:	0800057d 	.word	0x0800057d
 8000438:	0800046f 	.word	0x0800046f
 800043c:	080004f7 	.word	0x080004f7
		case INIT:
		    status = AUTO_GREEN;
 8000440:	4b81      	ldr	r3, [pc, #516]	; (8000648 <fsm_automatic_run+0x238>)
 8000442:	2203      	movs	r2, #3
 8000444:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044c:	487f      	ldr	r0, [pc, #508]	; (800064c <fsm_automatic_run+0x23c>)
 800044e:	f001 fbde 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	2108      	movs	r1, #8
 8000456:	487e      	ldr	r0, [pc, #504]	; (8000650 <fsm_automatic_run+0x240>)
 8000458:	f001 fbd9 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer1(y*1000);
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	4618      	mov	r0, r3
 8000468:	f000 ff54 	bl	8001314 <setTimer1>
			break;
 800046c:	e0e7      	b.n	800063e <fsm_automatic_run+0x22e>
		case AUTO_GREEN:
			if(ped == 1){
 800046e:	4b79      	ldr	r3, [pc, #484]	; (8000654 <fsm_automatic_run+0x244>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d120      	bne.n	80004b8 <fsm_automatic_run+0xa8>
				if(timer2_flag == 1){
 8000476:	4b78      	ldr	r3, [pc, #480]	; (8000658 <fsm_automatic_run+0x248>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <fsm_automatic_run+0x74>
					ped = 0;
 800047e:	4b75      	ldr	r3, [pc, #468]	; (8000654 <fsm_automatic_run+0x244>)
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048a:	4870      	ldr	r0, [pc, #448]	; (800064c <fsm_automatic_run+0x23c>)
 800048c:	f001 fbbf 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	486e      	ldr	r0, [pc, #440]	; (8000650 <fsm_automatic_run+0x240>)
 8000498:	f001 fbb9 	bl	8001c0e <HAL_GPIO_WritePin>
				PWM = PWM+10;
 800049c:	4b6f      	ldr	r3, [pc, #444]	; (800065c <fsm_automatic_run+0x24c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	330a      	adds	r3, #10
 80004a2:	4a6e      	ldr	r2, [pc, #440]	; (800065c <fsm_automatic_run+0x24c>)
 80004a4:	6013      	str	r3, [r2, #0]
				if(PWM == 950){
 80004a6:	4b6d      	ldr	r3, [pc, #436]	; (800065c <fsm_automatic_run+0x24c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f240 32b6 	movw	r2, #950	; 0x3b6
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d102      	bne.n	80004b8 <fsm_automatic_run+0xa8>
					PWM = 0;
 80004b2:	4b6a      	ldr	r3, [pc, #424]	; (800065c <fsm_automatic_run+0x24c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer1_flag == 1){
 80004b8:	4b69      	ldr	r3, [pc, #420]	; (8000660 <fsm_automatic_run+0x250>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	f040 80b9 	bne.w	8000634 <fsm_automatic_run+0x224>
				PWM = 0;
 80004c2:	4b66      	ldr	r3, [pc, #408]	; (800065c <fsm_automatic_run+0x24c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW;
 80004c8:	4b5f      	ldr	r3, [pc, #380]	; (8000648 <fsm_automatic_run+0x238>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d4:	485d      	ldr	r0, [pc, #372]	; (800064c <fsm_automatic_run+0x23c>)
 80004d6:	f001 fb9a 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	2108      	movs	r1, #8
 80004de:	485c      	ldr	r0, [pc, #368]	; (8000650 <fsm_automatic_run+0x240>)
 80004e0:	f001 fb95 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer1(z*1000);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ea:	fb02 f303 	mul.w	r3, r2, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 ff10 	bl	8001314 <setTimer1>
			}

			break;
 80004f4:	e09e      	b.n	8000634 <fsm_automatic_run+0x224>
		case AUTO_YELLOW:
			if(ped == 1){
 80004f6:	4b57      	ldr	r3, [pc, #348]	; (8000654 <fsm_automatic_run+0x244>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d120      	bne.n	8000540 <fsm_automatic_run+0x130>
				if(timer2_flag == 1){
 80004fe:	4b56      	ldr	r3, [pc, #344]	; (8000658 <fsm_automatic_run+0x248>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d102      	bne.n	800050c <fsm_automatic_run+0xfc>
					ped = 0;
 8000506:	4b53      	ldr	r3, [pc, #332]	; (8000654 <fsm_automatic_run+0x244>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	484e      	ldr	r0, [pc, #312]	; (800064c <fsm_automatic_run+0x23c>)
 8000514:	f001 fb7b 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051e:	484c      	ldr	r0, [pc, #304]	; (8000650 <fsm_automatic_run+0x240>)
 8000520:	f001 fb75 	bl	8001c0e <HAL_GPIO_WritePin>
				PWM = PWM+10;
 8000524:	4b4d      	ldr	r3, [pc, #308]	; (800065c <fsm_automatic_run+0x24c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	330a      	adds	r3, #10
 800052a:	4a4c      	ldr	r2, [pc, #304]	; (800065c <fsm_automatic_run+0x24c>)
 800052c:	6013      	str	r3, [r2, #0]
				if(PWM == 950){
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <fsm_automatic_run+0x24c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000536:	4293      	cmp	r3, r2
 8000538:	d102      	bne.n	8000540 <fsm_automatic_run+0x130>
					PWM = 0;
 800053a:	4b48      	ldr	r3, [pc, #288]	; (800065c <fsm_automatic_run+0x24c>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer1_flag == 1){
 8000540:	4b47      	ldr	r3, [pc, #284]	; (8000660 <fsm_automatic_run+0x250>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d177      	bne.n	8000638 <fsm_automatic_run+0x228>
				PWM = 0 ;
 8000548:	4b44      	ldr	r3, [pc, #272]	; (800065c <fsm_automatic_run+0x24c>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
				status = AUTO_RED;
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <fsm_automatic_run+0x238>)
 8000550:	2202      	movs	r2, #2
 8000552:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	483c      	ldr	r0, [pc, #240]	; (800064c <fsm_automatic_run+0x23c>)
 800055c:	f001 fb57 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2108      	movs	r1, #8
 8000564:	483a      	ldr	r0, [pc, #232]	; (8000650 <fsm_automatic_run+0x240>)
 8000566:	f001 fb52 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer1(x*1000);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000570:	fb02 f303 	mul.w	r3, r2, r3
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fecd 	bl	8001314 <setTimer1>
			}

			break;
 800057a:	e05d      	b.n	8000638 <fsm_automatic_run+0x228>
		case AUTO_RED:
			if(ped == 1){
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <fsm_automatic_run+0x244>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d120      	bne.n	80005c6 <fsm_automatic_run+0x1b6>
				if(timer2_flag == 1){
 8000584:	4b34      	ldr	r3, [pc, #208]	; (8000658 <fsm_automatic_run+0x248>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d102      	bne.n	8000592 <fsm_automatic_run+0x182>
					ped = 0;
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <fsm_automatic_run+0x244>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <fsm_automatic_run+0x23c>)
 800059a:	f001 fb38 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	482a      	ldr	r0, [pc, #168]	; (8000650 <fsm_automatic_run+0x240>)
 80005a6:	f001 fb32 	bl	8001c0e <HAL_GPIO_WritePin>
				PWM = PWM+10;
 80005aa:	4b2c      	ldr	r3, [pc, #176]	; (800065c <fsm_automatic_run+0x24c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	330a      	adds	r3, #10
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <fsm_automatic_run+0x24c>)
 80005b2:	6013      	str	r3, [r2, #0]
				if(PWM == 950){
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <fsm_automatic_run+0x24c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80005bc:	4293      	cmp	r3, r2
 80005be:	d102      	bne.n	80005c6 <fsm_automatic_run+0x1b6>
					PWM = 0;
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <fsm_automatic_run+0x24c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer1_flag == 1){
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <fsm_automatic_run+0x250>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d118      	bne.n	8000600 <fsm_automatic_run+0x1f0>
				PWM = 0;
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <fsm_automatic_run+0x24c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <fsm_automatic_run+0x238>)
 80005d6:	2203      	movs	r2, #3
 80005d8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	481a      	ldr	r0, [pc, #104]	; (800064c <fsm_automatic_run+0x23c>)
 80005e2:	f001 fb14 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2108      	movs	r1, #8
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <fsm_automatic_run+0x240>)
 80005ec:	f001 fb0f 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer1(y*1000);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fe8a 	bl	8001314 <setTimer1>
			}
			if(ped == 1){
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <fsm_automatic_run+0x244>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d119      	bne.n	800063c <fsm_automatic_run+0x22c>
				if(timer3_flag == 1){
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <fsm_automatic_run+0x254>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <fsm_automatic_run+0x206>
					ped = 0;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <fsm_automatic_run+0x244>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <fsm_automatic_run+0x23c>)
 800061e:	f001 faf6 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <fsm_automatic_run+0x240>)
 800062a:	f001 faf0 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			break;
 800062e:	e005      	b.n	800063c <fsm_automatic_run+0x22c>
		default:
			break;
 8000630:	bf00      	nop
 8000632:	e004      	b.n	800063e <fsm_automatic_run+0x22e>
			break;
 8000634:	bf00      	nop
 8000636:	e002      	b.n	800063e <fsm_automatic_run+0x22e>
			break;
 8000638:	bf00      	nop
 800063a:	e000      	b.n	800063e <fsm_automatic_run+0x22e>
			break;
 800063c:	bf00      	nop
		}
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000080 	.word	0x20000080
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	2000009c 	.word	0x2000009c
 8000658:	200000ac 	.word	0x200000ac
 800065c:	200000a0 	.word	0x200000a0
 8000660:	200000a4 	.word	0x200000a4
 8000664:	200000b4 	.word	0x200000b4

08000668 <fsm_automatic_run2>:
void fsm_automatic_run2(int x, int y, int z){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
	switch(status1){
 8000674:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <fsm_automatic_run2+0x10c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	2b03      	cmp	r3, #3
 800067c:	d86e      	bhi.n	800075c <fsm_automatic_run2+0xf4>
 800067e:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <fsm_automatic_run2+0x1c>)
 8000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000684:	08000695 	.word	0x08000695
 8000688:	08000729 	.word	0x08000729
 800068c:	080006c1 	.word	0x080006c1
 8000690:	080006f5 	.word	0x080006f5
		case INIT:
		    status1 = AUTO_GREEN;
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <fsm_automatic_run2+0x10c>)
 8000696:	2203      	movs	r2, #3
 8000698:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2120      	movs	r1, #32
 800069e:	4836      	ldr	r0, [pc, #216]	; (8000778 <fsm_automatic_run2+0x110>)
 80006a0:	f001 fab5 	bl	8001c0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	4833      	ldr	r0, [pc, #204]	; (8000778 <fsm_automatic_run2+0x110>)
 80006aa:	f001 fab0 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fe5f 	bl	800137c <setTimer3>
			break;
 80006be:	e054      	b.n	800076a <fsm_automatic_run2+0x102>
		case AUTO_GREEN:
			if(timer3_flag == 1){
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <fsm_automatic_run2+0x114>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d14b      	bne.n	8000760 <fsm_automatic_run2+0xf8>
				status1 = AUTO_YELLOW;
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <fsm_automatic_run2+0x10c>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	4829      	ldr	r0, [pc, #164]	; (8000778 <fsm_automatic_run2+0x110>)
 80006d4:	f001 fa9b 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	4826      	ldr	r0, [pc, #152]	; (8000778 <fsm_automatic_run2+0x110>)
 80006de:	f001 fa96 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer3(y*1000);
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe45 	bl	800137c <setTimer3>
			}
			break;
 80006f2:	e035      	b.n	8000760 <fsm_automatic_run2+0xf8>
		case AUTO_YELLOW:
			if(timer3_flag == 1){
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <fsm_automatic_run2+0x114>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d133      	bne.n	8000764 <fsm_automatic_run2+0xfc>
				status1 = AUTO_RED;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <fsm_automatic_run2+0x10c>)
 80006fe:	2202      	movs	r2, #2
 8000700:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	2120      	movs	r1, #32
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <fsm_automatic_run2+0x110>)
 8000708:	f001 fa81 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2110      	movs	r1, #16
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <fsm_automatic_run2+0x110>)
 8000712:	f001 fa7c 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer3(z*1000);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fe2b 	bl	800137c <setTimer3>
			}
			break;
 8000726:	e01d      	b.n	8000764 <fsm_automatic_run2+0xfc>
		case AUTO_RED:
			if(timer3_flag == 1){
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <fsm_automatic_run2+0x114>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d11b      	bne.n	8000768 <fsm_automatic_run2+0x100>
				status1 = AUTO_GREEN;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <fsm_automatic_run2+0x10c>)
 8000732:	2203      	movs	r2, #3
 8000734:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <fsm_automatic_run2+0x110>)
 800073c:	f001 fa67 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <fsm_automatic_run2+0x110>)
 8000746:	f001 fa62 	bl	8001c0e <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fe11 	bl	800137c <setTimer3>
			}


			break;
 800075a:	e005      	b.n	8000768 <fsm_automatic_run2+0x100>
		default:
			break;
 800075c:	bf00      	nop
 800075e:	e004      	b.n	800076a <fsm_automatic_run2+0x102>
			break;
 8000760:	bf00      	nop
 8000762:	e002      	b.n	800076a <fsm_automatic_run2+0x102>
			break;
 8000764:	bf00      	nop
 8000766:	e000      	b.n	800076a <fsm_automatic_run2+0x102>
			break;
 8000768:	bf00      	nop
		}
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000084 	.word	0x20000084
 8000778:	40010c00 	.word	0x40010c00
 800077c:	200000b4 	.word	0x200000b4

08000780 <fsm_automatic_run3>:
void fsm_automatic_run3()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <fsm_automatic_run3+0xc4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d107      	bne.n	800079c <fsm_automatic_run3+0x1c>
			{
				count = count + 1;
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <fsm_automatic_run3+0xc8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <fsm_automatic_run3+0xc8>)
 8000794:	6013      	str	r3, [r2, #0]
				button_flag2 = 0;
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <fsm_automatic_run3+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
			}
			if(count  == 0)
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <fsm_automatic_run3+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d114      	bne.n	80007ce <fsm_automatic_run3+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4828      	ldr	r0, [pc, #160]	; (800084c <fsm_automatic_run3+0xcc>)
 80007aa:	f001 fa30 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4826      	ldr	r0, [pc, #152]	; (800084c <fsm_automatic_run3+0xcc>)
 80007b4:	f001 fa2b 	bl	8001c0e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	4824      	ldr	r0, [pc, #144]	; (8000850 <fsm_automatic_run3+0xd0>)
 80007c0:	f001 fa25 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2108      	movs	r1, #8
 80007c8:	4820      	ldr	r0, [pc, #128]	; (800084c <fsm_automatic_run3+0xcc>)
 80007ca:	f001 fa20 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			if(count == 1)
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <fsm_automatic_run3+0xc8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d114      	bne.n	8000800 <fsm_automatic_run3+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2120      	movs	r1, #32
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <fsm_automatic_run3+0xcc>)
 80007dc:	f001 fa17 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	4819      	ldr	r0, [pc, #100]	; (800084c <fsm_automatic_run3+0xcc>)
 80007e6:	f001 fa12 	bl	8001c0e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f0:	4817      	ldr	r0, [pc, #92]	; (8000850 <fsm_automatic_run3+0xd0>)
 80007f2:	f001 fa0c 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2108      	movs	r1, #8
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <fsm_automatic_run3+0xcc>)
 80007fc:	f001 fa07 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			if(count == 2)
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <fsm_automatic_run3+0xc8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d114      	bne.n	8000832 <fsm_automatic_run3+0xb2>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	2120      	movs	r1, #32
 800080c:	480f      	ldr	r0, [pc, #60]	; (800084c <fsm_automatic_run3+0xcc>)
 800080e:	f001 f9fe 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <fsm_automatic_run3+0xcc>)
 8000818:	f001 f9f9 	bl	8001c0e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <fsm_automatic_run3+0xd0>)
 8000824:	f001 f9f3 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <fsm_automatic_run3+0xcc>)
 800082e:	f001 f9ee 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			if(count == 3)
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <fsm_automatic_run3+0xc8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d102      	bne.n	8000840 <fsm_automatic_run3+0xc0>
			{
				count = 0;
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <fsm_automatic_run3+0xc8>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
			}
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000074 	.word	0x20000074
 8000848:	20000098 	.word	0x20000098
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40010800 	.word	0x40010800

08000854 <fsm_automatic_run4>:
void fsm_automatic_run4()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 8000858:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <fsm_automatic_run4+0x150>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d107      	bne.n	8000870 <fsm_automatic_run4+0x1c>
			{
				button_flag2 = 0;
 8000860:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <fsm_automatic_run4+0x150>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
				light_mode = light_mode +1;
 8000866:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <fsm_automatic_run4+0x154>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a4e      	ldr	r2, [pc, #312]	; (80009a8 <fsm_automatic_run4+0x154>)
 800086e:	6013      	str	r3, [r2, #0]
			}
			if(light_mode  == 0)
 8000870:	4b4d      	ldr	r3, [pc, #308]	; (80009a8 <fsm_automatic_run4+0x154>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d114      	bne.n	80008a2 <fsm_automatic_run4+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2120      	movs	r1, #32
 800087c:	484b      	ldr	r0, [pc, #300]	; (80009ac <fsm_automatic_run4+0x158>)
 800087e:	f001 f9c6 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000882:	2201      	movs	r2, #1
 8000884:	2110      	movs	r1, #16
 8000886:	4849      	ldr	r0, [pc, #292]	; (80009ac <fsm_automatic_run4+0x158>)
 8000888:	f001 f9c1 	bl	8001c0e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000892:	4847      	ldr	r0, [pc, #284]	; (80009b0 <fsm_automatic_run4+0x15c>)
 8000894:	f001 f9bb 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	2108      	movs	r1, #8
 800089c:	4843      	ldr	r0, [pc, #268]	; (80009ac <fsm_automatic_run4+0x158>)
 800089e:	f001 f9b6 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			if(light_mode == 1)
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <fsm_automatic_run4+0x154>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d114      	bne.n	80008d4 <fsm_automatic_run4+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2120      	movs	r1, #32
 80008ae:	483f      	ldr	r0, [pc, #252]	; (80009ac <fsm_automatic_run4+0x158>)
 80008b0:	f001 f9ad 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	483c      	ldr	r0, [pc, #240]	; (80009ac <fsm_automatic_run4+0x158>)
 80008ba:	f001 f9a8 	bl	8001c0e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c4:	483a      	ldr	r0, [pc, #232]	; (80009b0 <fsm_automatic_run4+0x15c>)
 80008c6:	f001 f9a2 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2108      	movs	r1, #8
 80008ce:	4837      	ldr	r0, [pc, #220]	; (80009ac <fsm_automatic_run4+0x158>)
 80008d0:	f001 f99d 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			if(light_mode == 2)
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <fsm_automatic_run4+0x154>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d114      	bne.n	8000906 <fsm_automatic_run4+0xb2>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	4832      	ldr	r0, [pc, #200]	; (80009ac <fsm_automatic_run4+0x158>)
 80008e2:	f001 f994 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4830      	ldr	r0, [pc, #192]	; (80009ac <fsm_automatic_run4+0x158>)
 80008ec:	f001 f98f 	bl	8001c0e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	482e      	ldr	r0, [pc, #184]	; (80009b0 <fsm_automatic_run4+0x15c>)
 80008f8:	f001 f989 	bl	8001c0e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2108      	movs	r1, #8
 8000900:	482a      	ldr	r0, [pc, #168]	; (80009ac <fsm_automatic_run4+0x158>)
 8000902:	f001 f984 	bl	8001c0e <HAL_GPIO_WritePin>
			}
			if(light_mode == 3)
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <fsm_automatic_run4+0x154>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d102      	bne.n	8000914 <fsm_automatic_run4+0xc0>
			{
				light_mode = 0;
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <fsm_automatic_run4+0x154>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 0)
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <fsm_automatic_run4+0x160>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d112      	bne.n	8000942 <fsm_automatic_run4+0xee>
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <fsm_automatic_run4+0x154>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10e      	bne.n	8000942 <fsm_automatic_run4+0xee>
			{
				global_green = global_green + 1;
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <fsm_automatic_run4+0x164>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <fsm_automatic_run4+0x164>)
 800092c:	6013      	str	r3, [r2, #0]
				if(global_green == 10){
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <fsm_automatic_run4+0x164>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d102      	bne.n	800093c <fsm_automatic_run4+0xe8>
					global_green = 0;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <fsm_automatic_run4+0x164>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <fsm_automatic_run4+0x160>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 1)
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <fsm_automatic_run4+0x160>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d112      	bne.n	8000970 <fsm_automatic_run4+0x11c>
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <fsm_automatic_run4+0x154>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10e      	bne.n	8000970 <fsm_automatic_run4+0x11c>
			{
				global_yellow = global_yellow + 1;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <fsm_automatic_run4+0x168>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <fsm_automatic_run4+0x168>)
 800095a:	6013      	str	r3, [r2, #0]
				if(global_yellow == 10){
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <fsm_automatic_run4+0x168>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b0a      	cmp	r3, #10
 8000962:	d102      	bne.n	800096a <fsm_automatic_run4+0x116>
					global_yellow = 0;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <fsm_automatic_run4+0x168>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <fsm_automatic_run4+0x160>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 2)
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <fsm_automatic_run4+0x160>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d112      	bne.n	800099e <fsm_automatic_run4+0x14a>
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <fsm_automatic_run4+0x154>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d10e      	bne.n	800099e <fsm_automatic_run4+0x14a>
			{
				global_red = global_red + 1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <fsm_automatic_run4+0x16c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <fsm_automatic_run4+0x16c>)
 8000988:	6013      	str	r3, [r2, #0]
				if(global_red == 10){
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <fsm_automatic_run4+0x16c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d102      	bne.n	8000998 <fsm_automatic_run4+0x144>
					global_red = 0;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <fsm_automatic_run4+0x16c>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <fsm_automatic_run4+0x160>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
			}
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000074 	.word	0x20000074
 80009a8:	20000094 	.word	0x20000094
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010800 	.word	0x40010800
 80009b4:	20000078 	.word	0x20000078
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	20000090 	.word	0x20000090
 80009c0:	20000088 	.word	0x20000088

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c8:	f000 fd66 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009cc:	f000 f85e 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d0:	f000 f96e 	bl	8000cb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009d4:	f000 f89c 	bl	8000b10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 f940 	bl	8000c5c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80009dc:	f000 f8e4 	bl	8000ba8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 80009e0:	481d      	ldr	r0, [pc, #116]	; (8000a58 <main+0x94>)
 80009e2:	f001 fd97 	bl	8002514 <HAL_TIM_Base_Start_IT>
	status = INIT;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <main+0x98>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
	status1 = INIT;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <main+0x9c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
//	uint32_t PWM = 0;
	global_green = 3;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <main+0xa0>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	601a      	str	r2, [r3, #0]
	global_red = 5;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <main+0xa4>)
 80009fa:	2205      	movs	r2, #5
 80009fc:	601a      	str	r2, [r3, #0]
	global_yellow = 2;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <main+0xa8>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	601a      	str	r2, [r3, #0]
	SCH_Init();
 8000a04:	f000 f9d8 	bl	8000db8 <SCH_Init>
	HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <main+0xac>)
 8000a0c:	f001 fe24 	bl	8002658 <HAL_TIM_PWM_Start>
	SCH_Add_Task(control_unit, 0, 1);   // controll all the button and state machine
 8000a10:	2201      	movs	r2, #1
 8000a12:	2100      	movs	r1, #0
 8000a14:	4817      	ldr	r0, [pc, #92]	; (8000a74 <main+0xb0>)
 8000a16:	f000 fa59 	bl	8000ecc <SCH_Add_Task>
	SCH_Add_Task(getKeyInput1, 0, 1);    /* USER CODE BEGIN 3 */
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4816      	ldr	r0, [pc, #88]	; (8000a78 <main+0xb4>)
 8000a20:	f000 fa54 	bl	8000ecc <SCH_Add_Task>
	SCH_Add_Task(getKeyInput2, 0, 1);    /* USER CODE BEGIN 3 */
 8000a24:	2201      	movs	r2, #1
 8000a26:	2100      	movs	r1, #0
 8000a28:	4814      	ldr	r0, [pc, #80]	; (8000a7c <main+0xb8>)
 8000a2a:	f000 fa4f 	bl	8000ecc <SCH_Add_Task>
	SCH_Add_Task(getKeyInput3, 0, 1);    /* USER CODE BEGIN 3 */
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2100      	movs	r1, #0
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <main+0xbc>)
 8000a34:	f000 fa4a 	bl	8000ecc <SCH_Add_Task>
	SCH_Add_Task(getKeyInput4, 0, 1);    /* USER CODE BEGIN 3 */
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <main+0xc0>)
 8000a3e:	f000 fa45 	bl	8000ecc <SCH_Add_Task>
	setTimer2(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f000 fc80 	bl	8001348 <setTimer2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	SCH_Dispatch_Tasks();
 8000a48:	f000 fa92 	bl	8000f70 <SCH_Dispatch_Tasks>
	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,PWM);
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <main+0xac>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <main+0xc4>)
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
	  	SCH_Dispatch_Tasks();
 8000a56:	e7f7      	b.n	8000a48 <main+0x84>
 8000a58:	2000042c 	.word	0x2000042c
 8000a5c:	20000080 	.word	0x20000080
 8000a60:	20000084 	.word	0x20000084
 8000a64:	2000008c 	.word	0x2000008c
 8000a68:	20000088 	.word	0x20000088
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	200003e4 	.word	0x200003e4
 8000a74:	0800033d 	.word	0x0800033d
 8000a78:	0800014d 	.word	0x0800014d
 8000a7c:	080001c9 	.word	0x080001c9
 8000a80:	08000245 	.word	0x08000245
 8000a84:	080002c1 	.word	0x080002c1
 8000a88:	200000a0 	.word	0x200000a0

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b090      	sub	sp, #64	; 0x40
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	2228      	movs	r2, #40	; 0x28
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 f860 	bl	8003b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ac2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 f8b7 	bl	8001c40 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ad8:	f000 f968 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fb22 	bl	8002140 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b02:	f000 f953 	bl	8000dac <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3740      	adds	r7, #64	; 0x40
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b44:	224f      	movs	r2, #79	; 0x4f
 8000b46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b56:	f001 fc8d 	bl	8002474 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b60:	f000 f924 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b72:	f001 ffd9 	bl	8002b28 <HAL_TIM_ConfigClockSource>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b7c:	f000 f916 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_TIM2_Init+0x94>)
 8000b8e:	f002 fb57 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f908 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000042c 	.word	0x2000042c

08000ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <MX_TIM3_Init+0xb0>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000bd2:	223f      	movs	r2, #63	; 0x3f
 8000bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf0:	4818      	ldr	r0, [pc, #96]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000bf2:	f001 fce1 	bl	80025b8 <HAL_TIM_PWM_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f8d6 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000c10:	f002 fb16 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c1a:	f000 f8c7 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1e:	2360      	movs	r3, #96	; 0x60
 8000c20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	4619      	mov	r1, r3
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000c36:	f001 feb9 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c40:	f000 f8b4 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <MX_TIM3_Init+0xac>)
 8000c46:	f000 fa9f 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200003e4 	.word	0x200003e4
 8000c58:	40000400 	.word	0x40000400

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_USART2_UART_Init+0x4c>)
 8000c94:	f002 fb44 	bl	8003320 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c9e:	f000 f885 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000474 	.word	0x20000474
 8000cac:	40004400 	.word	0x40004400

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000cfa:	4822      	ldr	r0, [pc, #136]	; (8000d84 <MX_GPIO_Init+0xd4>)
 8000cfc:	f000 ff87 	bl	8001c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d06:	4820      	ldr	r0, [pc, #128]	; (8000d88 <MX_GPIO_Init+0xd8>)
 8000d08:	f000 ff81 	bl	8001c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d0c:	2313      	movs	r3, #19
 8000d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <MX_GPIO_Init+0xd8>)
 8000d20:	f000 fdda 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8000d24:	2301      	movs	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_GPIO_Init+0xd4>)
 8000d38:	f000 fdce 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_2_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = LED_PED_2_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8000d3c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <MX_GPIO_Init+0xd4>)
 8000d56:	f000 fdbf 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = LED_PED_1_Pin|TrafficLight1_0_Pin;
 8000d5a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_GPIO_Init+0xd8>)
 8000d74:	f000 fdb0 	bl	80018d8 <HAL_GPIO_Init>

}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40010800 	.word	0x40010800

08000d8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	timer_run();
 8000d94:	f000 fb0c 	bl	80013b0 <timer_run>
	timer_run2();
 8000d98:	f000 fb24 	bl	80013e4 <timer_run2>
	timer_run3();
 8000d9c:	f000 fb3c 	bl	8001418 <timer_run3>
	SCH_Update() ;
 8000da0:	f000 f824 	bl	8000dec <SCH_Update>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <SCH_Init>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */

#include "scheduler.h"
void SCH_Init ( ) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
unsigned char i ;
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	e006      	b.n	8000dd2 <SCH_Init+0x1a>
SCH_Delete_Task ( i ) ;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f91e 	bl	8001008 <SCH_Delete_Task>
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b27      	cmp	r3, #39	; 0x27
 8000dd6:	d9f5      	bls.n	8000dc4 <SCH_Init+0xc>
 }
 Error_code_G = 0;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <SCH_Init+0x30>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
 }
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000bd 	.word	0x200000bd

08000dec <SCH_Update>:

  void SCH_Update ( void ) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  unsigned char Index ;

  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e05d      	b.n	8000eb4 <SCH_Update+0xc8>
  if ( SCH_tasks_G[ Index ] . pTask ) {
 8000df8:	79fa      	ldrb	r2, [r7, #7]
 8000dfa:	4933      	ldr	r1, [pc, #204]	; (8000ec8 <SCH_Update+0xdc>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d050      	beq.n	8000eae <SCH_Update+0xc2>
 if ( SCH_tasks_G [ Index ] . Delay == 0 ) {
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	492e      	ldr	r1, [pc, #184]	; (8000ec8 <SCH_Update+0xdc>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d132      	bne.n	8000e88 <SCH_Update+0x9c>
  // The task i s due to run
  SCH_tasks_G [ Index ] .RunMe += 1;
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	4928      	ldr	r1, [pc, #160]	; (8000ec8 <SCH_Update+0xdc>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	330c      	adds	r3, #12
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	3301      	adds	r3, #1
 8000e38:	b2d8      	uxtb	r0, r3
 8000e3a:	4923      	ldr	r1, [pc, #140]	; (8000ec8 <SCH_Update+0xdc>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	330c      	adds	r3, #12
 8000e48:	4602      	mov	r2, r0
 8000e4a:	701a      	strb	r2, [r3, #0]
  if ( SCH_tasks_G [ Index ] . Period ) {
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	491e      	ldr	r1, [pc, #120]	; (8000ec8 <SCH_Update+0xdc>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d025      	beq.n	8000eae <SCH_Update+0xc2>
  // Schedule periodic tasks to run again
  SCH_tasks_G [ Index ] . Delay = SCH_tasks_G [ Index ] . Period ;
 8000e62:	79f9      	ldrb	r1, [r7, #7]
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <SCH_Update+0xdc>)
 8000e68:	460b      	mov	r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4403      	add	r3, r0
 8000e72:	3308      	adds	r3, #8
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <SCH_Update+0xdc>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4403      	add	r3, r0
 8000e82:	3304      	adds	r3, #4
 8000e84:	6019      	str	r1, [r3, #0]
 8000e86:	e012      	b.n	8000eae <SCH_Update+0xc2>
  }
  } else {
  SCH_tasks_G [ Index ] . Delay -= 1;
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	490f      	ldr	r1, [pc, #60]	; (8000ec8 <SCH_Update+0xdc>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	79fa      	ldrb	r2, [r7, #7]
 8000e9c:	1e59      	subs	r1, r3, #1
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <SCH_Update+0xdc>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4403      	add	r3, r0
 8000eaa:	3304      	adds	r3, #4
 8000eac:	6019      	str	r1, [r3, #0]
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b27      	cmp	r3, #39	; 0x27
 8000eb8:	d99e      	bls.n	8000df8 <SCH_Update+0xc>
  }
  }
  }
  }
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000c0 	.word	0x200000c0

08000ecc <SCH_Add_Task>:

  unsigned char SCH_Add_Task ( void ( * pFunction ) ( ) , unsigned int DELAY, unsigned int PERIOD)
  {
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  unsigned char Index = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8000edc:	e002      	b.n	8000ee4 <SCH_Add_Task+0x18>
  {
  Index ++;
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8000ee4:	7dfa      	ldrb	r2, [r7, #23]
 8000ee6:	4920      	ldr	r1, [pc, #128]	; (8000f68 <SCH_Add_Task+0x9c>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <SCH_Add_Task+0x32>
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b27      	cmp	r3, #39	; 0x27
 8000efc:	d9ef      	bls.n	8000ede <SCH_Add_Task+0x12>
  }
  if ( Index == SCH_MAX_TASKS)
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	2b28      	cmp	r3, #40	; 0x28
 8000f02:	d104      	bne.n	8000f0e <SCH_Add_Task+0x42>
   {
   // Task l i s t i s f u l l
   Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <SCH_Add_Task+0xa0>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	701a      	strb	r2, [r3, #0]
   return SCH_MAX_TASKS;
 8000f0a:	2328      	movs	r3, #40	; 0x28
 8000f0c:	e027      	b.n	8000f5e <SCH_Add_Task+0x92>
   }
   // I f we â€™re here , there i s a space in the task array
   SCH_tasks_G [ Index ] . pTask = pFunction ;
 8000f0e:	7dfa      	ldrb	r2, [r7, #23]
 8000f10:	4915      	ldr	r1, [pc, #84]	; (8000f68 <SCH_Add_Task+0x9c>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Delay = DELAY;
 8000f20:	7dfa      	ldrb	r2, [r7, #23]
 8000f22:	4911      	ldr	r1, [pc, #68]	; (8000f68 <SCH_Add_Task+0x9c>)
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3304      	adds	r3, #4
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Period = PERIOD;
 8000f34:	7dfa      	ldrb	r2, [r7, #23]
 8000f36:	490c      	ldr	r1, [pc, #48]	; (8000f68 <SCH_Add_Task+0x9c>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	3308      	adds	r3, #8
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] .RunMe = 0;
 8000f48:	7dfa      	ldrb	r2, [r7, #23]
 8000f4a:	4907      	ldr	r1, [pc, #28]	; (8000f68 <SCH_Add_Task+0x9c>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	330c      	adds	r3, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
   return Index ;
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
   }
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	200000c0 	.word	0x200000c0
 8000f6c:	200000bd 	.word	0x200000bd

08000f70 <SCH_Dispatch_Tasks>:

  void SCH_Dispatch_Tasks ( void )
  {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  unsigned char Index ;
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	e03a      	b.n	8000ff2 <SCH_Dispatch_Tasks+0x82>
  if ( SCH_tasks_G [ Index ] .RunMe > 0 ) {
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	4921      	ldr	r1, [pc, #132]	; (8001004 <SCH_Dispatch_Tasks+0x94>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	330c      	adds	r3, #12
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d02c      	beq.n	8000fec <SCH_Dispatch_Tasks+0x7c>
  ( * SCH_tasks_G [ Index ] . pTask ) ( ) ; // Run the task
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	491b      	ldr	r1, [pc, #108]	; (8001004 <SCH_Dispatch_Tasks+0x94>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4798      	blx	r3
  SCH_tasks_G [ Index ] .RunMe -= 1; // Reset / reduce RunMe fl a g
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	4917      	ldr	r1, [pc, #92]	; (8001004 <SCH_Dispatch_Tasks+0x94>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b2d8      	uxtb	r0, r3
 8000fbc:	4911      	ldr	r1, [pc, #68]	; (8001004 <SCH_Dispatch_Tasks+0x94>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	330c      	adds	r3, #12
 8000fca:	4602      	mov	r2, r0
 8000fcc:	701a      	strb	r2, [r3, #0]

  if ( SCH_tasks_G [ Index ] . Period == 0 )
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <SCH_Dispatch_Tasks+0x94>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3308      	adds	r3, #8
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <SCH_Dispatch_Tasks+0x7c>
  {
  SCH_Delete_Task ( Index ) ;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f80e 	bl	8001008 <SCH_Delete_Task>
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b27      	cmp	r3, #39	; 0x27
 8000ff6:	d9c1      	bls.n	8000f7c <SCH_Dispatch_Tasks+0xc>
  }
  }
  }
  }
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000c0 	.word	0x200000c0

08001008 <SCH_Delete_Task>:

  unsigned char SCH_Delete_Task (  uint32_t TASK_INDEX) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
   if ( SCH_tasks_G [TASK_INDEX ] . pTask == 0 ) {
 8001010:	4920      	ldr	r1, [pc, #128]	; (8001094 <SCH_Delete_Task+0x8c>)
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <SCH_Delete_Task+0x2a>
   Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <SCH_Delete_Task+0x90>)
 8001026:	2203      	movs	r2, #3
 8001028:	701a      	strb	r2, [r3, #0]
   Return_code = RETURN_ERROR;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <SCH_Delete_Task+0x94>)
 800102c:	2202      	movs	r2, #2
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e002      	b.n	8001038 <SCH_Delete_Task+0x30>
   } else {
   Return_code = RETURN_NORMAL;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <SCH_Delete_Task+0x94>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
   }
   SCH_tasks_G [TASK_INDEX ] . pTask = 0x0000 ;
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <SCH_Delete_Task+0x8c>)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Delay = 0;
 800104a:	4912      	ldr	r1, [pc, #72]	; (8001094 <SCH_Delete_Task+0x8c>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3304      	adds	r3, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Period = 0;
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <SCH_Delete_Task+0x8c>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3308      	adds	r3, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] .RunMe = 0;
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <SCH_Delete_Task+0x8c>)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	330c      	adds	r3, #12
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
   return Return_code ;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <SCH_Delete_Task+0x94>)
 8001088:	781b      	ldrb	r3, [r3, #0]
  }
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	200000c0 	.word	0x200000c0
 8001098:	200000bd 	.word	0x200000bd
 800109c:	200000bc 	.word	0x200000bc

080010a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_MspInit+0x5c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_MspInit+0x5c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_MspInit+0x5c>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x5c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x5c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x5c>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_MspInit+0x60>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_MspInit+0x60>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d113      	bne.n	800113e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201c      	movs	r0, #28
 8001134:	f000 fae9 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f000 fb02 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_TIM_PWM_MspInit+0x34>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_PWM_MspInit+0x38>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_TIM_PWM_MspInit+0x38>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_TIM_PWM_MspInit+0x38>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40000400 	.word	0x40000400
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_TIM_MspPostInit+0x58>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d117      	bne.n	80011d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0x5c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_TIM_MspPostInit+0x5c>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_TIM_MspPostInit+0x5c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_TIM_MspPostInit+0x60>)
 80011d4:	f000 fb80 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <HAL_UART_MspInit+0x98>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d137      	bne.n	800127c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_UART_MspInit+0x9c>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_UART_MspInit+0x9c>)
 8001212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001216:	61d3      	str	r3, [r2, #28]
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_UART_MspInit+0x9c>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_UART_MspInit+0x9c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_UART_MspInit+0x9c>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0x9c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800123c:	2304      	movs	r3, #4
 800123e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <HAL_UART_MspInit+0xa0>)
 8001250:	f000 fb42 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001254:	2308      	movs	r3, #8
 8001256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_UART_MspInit+0xa0>)
 8001268:	f000 fb36 	bl	80018d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2026      	movs	r0, #38	; 0x26
 8001272:	f000 fa4a 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001276:	2026      	movs	r0, #38	; 0x26
 8001278:	f000 fa63 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40004400 	.word	0x40004400
 8001288:	40021000 	.word	0x40021000
 800128c:	40010800 	.word	0x40010800

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f925 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM2_IRQHandler+0x10>)
 80012e6:	f001 fa59 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000042c 	.word	0x2000042c

080012f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <USART2_IRQHandler+0x10>)
 80012fa:	f002 f85f 	bl	80033bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000474 	.word	0x20000474

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <setTimer1>:
int timer3_flag = 0;
int timer3_counter = 0;

int timer_cycle = 10;

void setTimer1(int duration){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <setTimer1+0x28>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
	timer1_counter = duration / timer_cycle;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <setTimer1+0x2c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	fb92 f3f3 	sdiv	r3, r2, r3
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <setTimer1+0x30>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200000a4 	.word	0x200000a4
 8001340:	20000048 	.word	0x20000048
 8001344:	200000a8 	.word	0x200000a8

08001348 <setTimer2>:
void setTimer2(int duration){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <setTimer2+0x28>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
	timer2_counter = duration / timer_cycle;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <setTimer2+0x2c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <setTimer2+0x30>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200000ac 	.word	0x200000ac
 8001374:	20000048 	.word	0x20000048
 8001378:	200000b0 	.word	0x200000b0

0800137c <setTimer3>:
void setTimer3(int duration){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	timer3_flag = 0;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <setTimer3+0x28>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
	timer3_counter = duration / timer_cycle;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <setTimer3+0x2c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	fb92 f3f3 	sdiv	r3, r2, r3
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <setTimer3+0x30>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200000b4 	.word	0x200000b4
 80013a8:	20000048 	.word	0x20000048
 80013ac:	200000b8 	.word	0x200000b8

080013b0 <timer_run>:

void timer_run(){
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	if(timer1_counter >= 0){
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <timer_run+0x2c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0b      	blt.n	80013d4 <timer_run+0x24>
		timer1_counter--;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <timer_run+0x2c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <timer_run+0x2c>)
 80013c4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <timer_run+0x2c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <timer_run+0x24>
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <timer_run+0x30>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
	}
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	200000a8 	.word	0x200000a8
 80013e0:	200000a4 	.word	0x200000a4

080013e4 <timer_run2>:
void timer_run2(){
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	if(timer2_counter >= 0){
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <timer_run2+0x2c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0b      	blt.n	8001408 <timer_run2+0x24>
		timer2_counter--;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <timer_run2+0x2c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a06      	ldr	r2, [pc, #24]	; (8001410 <timer_run2+0x2c>)
 80013f8:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <timer_run2+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <timer_run2+0x24>
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <timer_run2+0x30>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
	}
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200000b0 	.word	0x200000b0
 8001414:	200000ac 	.word	0x200000ac

08001418 <timer_run3>:
void timer_run3(){
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	if(timer3_counter >= 0){
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <timer_run3+0x2c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0b      	blt.n	800143c <timer_run3+0x24>
		timer3_counter--;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <timer_run3+0x2c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a06      	ldr	r2, [pc, #24]	; (8001444 <timer_run3+0x2c>)
 800142c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <timer_run3+0x2c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <timer_run3+0x24>
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <timer_run3+0x30>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
	}
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	200000b8 	.word	0x200000b8
 8001448:	200000b4 	.word	0x200000b4

0800144c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	; (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	; (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001472:	f7ff ff49 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f002 fb4f 	bl	8003b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147a:	f7ff faa3 	bl	80009c4 <main>
  bx lr
 800147e:	4770      	bx	lr
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001488:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 800148c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001490:	200004bc 	.word	0x200004bc

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f923 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fdf4 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f93b 	bl	800175e <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f903 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000044 	.word	0x20000044
 800151c:	20000050 	.word	0x20000050
 8001520:	2000004c 	.word	0x2000004c

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x1c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x20>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000050 	.word	0x20000050
 8001544:	200004b8 	.word	0x200004b8

08001548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_GetTick+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	200004b8 	.word	0x200004b8

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4906      	ldr	r1, [pc, #24]	; (80015f4 <__NVIC_EnableIRQ+0x34>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff90 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff2d 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff42 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff90 	bl	800164c <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5f 	bl	80015f8 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff35 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001788:	2b02      	cmp	r3, #2
 800178a:	d008      	beq.n	800179e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2204      	movs	r2, #4
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e020      	b.n	80017e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 020e 	bic.w	r2, r2, #14
 80017ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d005      	beq.n	800180e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2204      	movs	r2, #4
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e051      	b.n	80018b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 020e 	bic.w	r2, r2, #14
 800181c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_DMA_Abort_IT+0xd0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d029      	beq.n	800188c <HAL_DMA_Abort_IT+0xa0>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_DMA_Abort_IT+0xd4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d022      	beq.n	8001888 <HAL_DMA_Abort_IT+0x9c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_DMA_Abort_IT+0xd8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d01a      	beq.n	8001882 <HAL_DMA_Abort_IT+0x96>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_DMA_Abort_IT+0xdc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d012      	beq.n	800187c <HAL_DMA_Abort_IT+0x90>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_DMA_Abort_IT+0xe0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00a      	beq.n	8001876 <HAL_DMA_Abort_IT+0x8a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <HAL_DMA_Abort_IT+0xe4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d102      	bne.n	8001870 <HAL_DMA_Abort_IT+0x84>
 800186a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800186e:	e00e      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001874:	e00b      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187a:	e008      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	e005      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	e002      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001888:	2310      	movs	r3, #16
 800188a:	e000      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 800188c:	2301      	movs	r3, #1
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_DMA_Abort_IT+0xe8>)
 8001890:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    } 
  }
  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40020008 	.word	0x40020008
 80018c0:	4002001c 	.word	0x4002001c
 80018c4:	40020030 	.word	0x40020030
 80018c8:	40020044 	.word	0x40020044
 80018cc:	40020058 	.word	0x40020058
 80018d0:	4002006c 	.word	0x4002006c
 80018d4:	40020000 	.word	0x40020000

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b08b      	sub	sp, #44	; 0x2c
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e169      	b.n	8001bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ec:	2201      	movs	r2, #1
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 8158 	bne.w	8001bba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4a9a      	ldr	r2, [pc, #616]	; (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d05e      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001914:	4a98      	ldr	r2, [pc, #608]	; (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d875      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800191a:	4a98      	ldr	r2, [pc, #608]	; (8001b7c <HAL_GPIO_Init+0x2a4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d058      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001920:	4a96      	ldr	r2, [pc, #600]	; (8001b7c <HAL_GPIO_Init+0x2a4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d86f      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001926:	4a96      	ldr	r2, [pc, #600]	; (8001b80 <HAL_GPIO_Init+0x2a8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d052      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 800192c:	4a94      	ldr	r2, [pc, #592]	; (8001b80 <HAL_GPIO_Init+0x2a8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d869      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001932:	4a94      	ldr	r2, [pc, #592]	; (8001b84 <HAL_GPIO_Init+0x2ac>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04c      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001938:	4a92      	ldr	r2, [pc, #584]	; (8001b84 <HAL_GPIO_Init+0x2ac>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d863      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800193e:	4a92      	ldr	r2, [pc, #584]	; (8001b88 <HAL_GPIO_Init+0x2b0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d046      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001944:	4a90      	ldr	r2, [pc, #576]	; (8001b88 <HAL_GPIO_Init+0x2b0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d85d      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d82a      	bhi.n	80019a4 <HAL_GPIO_Init+0xcc>
 800194e:	2b12      	cmp	r3, #18
 8001950:	d859      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <HAL_GPIO_Init+0x80>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019ad 	.word	0x080019ad
 8001960:	080019bf 	.word	0x080019bf
 8001964:	08001a01 	.word	0x08001a01
 8001968:	08001a07 	.word	0x08001a07
 800196c:	08001a07 	.word	0x08001a07
 8001970:	08001a07 	.word	0x08001a07
 8001974:	08001a07 	.word	0x08001a07
 8001978:	08001a07 	.word	0x08001a07
 800197c:	08001a07 	.word	0x08001a07
 8001980:	08001a07 	.word	0x08001a07
 8001984:	08001a07 	.word	0x08001a07
 8001988:	08001a07 	.word	0x08001a07
 800198c:	08001a07 	.word	0x08001a07
 8001990:	08001a07 	.word	0x08001a07
 8001994:	08001a07 	.word	0x08001a07
 8001998:	08001a07 	.word	0x08001a07
 800199c:	080019b5 	.word	0x080019b5
 80019a0:	080019c9 	.word	0x080019c9
 80019a4:	4a79      	ldr	r2, [pc, #484]	; (8001b8c <HAL_GPIO_Init+0x2b4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019aa:	e02c      	b.n	8001a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e029      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	3304      	adds	r3, #4
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e024      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	3308      	adds	r3, #8
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e01f      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	330c      	adds	r3, #12
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e01a      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019da:	2304      	movs	r3, #4
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e013      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	611a      	str	r2, [r3, #16]
          break;
 80019f2:	e009      	b.n	8001a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2308      	movs	r3, #8
 80019f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	615a      	str	r2, [r3, #20]
          break;
 80019fe:	e003      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          break;
 8001a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d801      	bhi.n	8001a12 <HAL_GPIO_Init+0x13a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_Init+0x13e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d802      	bhi.n	8001a24 <HAL_GPIO_Init+0x14c>
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x152>
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	3b08      	subs	r3, #8
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	210f      	movs	r1, #15
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80b1 	beq.w	8001bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a58:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a70:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <HAL_GPIO_Init+0x2bc>)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <HAL_GPIO_Init+0x2c0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d013      	beq.n	8001ac4 <HAL_GPIO_Init+0x1ec>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3f      	ldr	r2, [pc, #252]	; (8001b9c <HAL_GPIO_Init+0x2c4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_GPIO_Init+0x1e8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3e      	ldr	r2, [pc, #248]	; (8001ba0 <HAL_GPIO_Init+0x2c8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d007      	beq.n	8001abc <HAL_GPIO_Init+0x1e4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <HAL_GPIO_Init+0x2cc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_GPIO_Init+0x1e0>
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e006      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001ab8:	2304      	movs	r3, #4
 8001aba:	e004      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	f002 0203 	and.w	r2, r2, #3
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ad6:	492f      	ldr	r1, [pc, #188]	; (8001b94 <HAL_GPIO_Init+0x2bc>)
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	492c      	ldr	r1, [pc, #176]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4928      	ldr	r1, [pc, #160]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4922      	ldr	r1, [pc, #136]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	491e      	ldr	r1, [pc, #120]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	4918      	ldr	r1, [pc, #96]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4914      	ldr	r1, [pc, #80]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d021      	beq.n	8001bac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e021      	b.n	8001bba <HAL_GPIO_Init+0x2e2>
 8001b76:	bf00      	nop
 8001b78:	10320000 	.word	0x10320000
 8001b7c:	10310000 	.word	0x10310000
 8001b80:	10220000 	.word	0x10220000
 8001b84:	10210000 	.word	0x10210000
 8001b88:	10120000 	.word	0x10120000
 8001b8c:	10110000 	.word	0x10110000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	40011400 	.word	0x40011400
 8001ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4909      	ldr	r1, [pc, #36]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f ae8e 	bne.w	80018ec <HAL_GPIO_Init+0x14>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	372c      	adds	r7, #44	; 0x2c
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e001      	b.n	8001c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1e:	787b      	ldrb	r3, [r7, #1]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2a:	e003      	b.n	8001c34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	611a      	str	r2, [r3, #16]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e26c      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d112      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d10b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d06c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x12c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d168      	bne.n	8001d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e246      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x76>
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a7f      	ldr	r2, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7a      	ldr	r2, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b78      	ldr	r3, [pc, #480]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a77      	ldr	r2, [pc, #476]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xbc>
 8001ce2:	4b72      	ldr	r3, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a71      	ldr	r2, [pc, #452]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fc14 	bl	8001548 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fc10 	bl	8001548 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1fa      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe4>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc00 	bl	8001548 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fbfc 	bl	8001548 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1e6      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x10c>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1ba      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4939      	ldr	r1, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fbb5 	bl	8001548 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fbb1 	bl	8001548 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e19b      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4927      	ldr	r1, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb94 	bl	8001548 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb90 	bl	8001548 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e17a      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03a      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fb74 	bl	8001548 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fb70 	bl	8001548 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e15a      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 fad8 	bl	8002438 <RCC_Delay>
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fb5a 	bl	8001548 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fb56 	bl	8001548 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e140      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	42420000 	.word	0x42420000
 8001eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e9      	bne.n	8001e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a6 	beq.w	800201e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b97      	ldr	r3, [pc, #604]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a93      	ldr	r2, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a8a      	ldr	r2, [pc, #552]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fb17 	bl	8001548 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff fb13 	bl	8001548 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0fd      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x312>
 8001f44:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e02d      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x334>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	e01c      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x356>
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a69      	ldr	r2, [pc, #420]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a66      	ldr	r2, [pc, #408]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a63      	ldr	r2, [pc, #396]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fac7 	bl	8001548 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fac3 	bl	8001548 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0ab      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <HAL_RCC_OscConfig+0x37e>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fab1 	bl	8001548 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff faad 	bl	8001548 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e095      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8081 	beq.w	800212a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d061      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d146      	bne.n	80020ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fa81 	bl	8001548 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fa7d 	bl	8001548 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e067      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	492d      	ldr	r1, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a19      	ldr	r1, [r3, #32]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	430b      	orrs	r3, r1
 8002096:	4927      	ldr	r1, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fa51 	bl	8001548 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff fa4d 	bl	8001548 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e037      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x46a>
 80020c8:	e02f      	b.n	800212a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fa3a 	bl	8001548 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff fa36 	bl	8001548 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e020      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x498>
 80020f6:	e018      	b.n	800212a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e013      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420060 	.word	0x42420060

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d0      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e073      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4936      	ldr	r1, [pc, #216]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7ff f98a 	bl	8001548 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff f986 	bl	8001548 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e053      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1cc>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f8e8 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	08003b98 	.word	0x08003b98
 800230c:	20000044 	.word	0x20000044
 8002310:	2000004c 	.word	0x2000004c

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800231c:	1d3c      	adds	r4, r7, #4
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002324:	f240 2301 	movw	r3, #513	; 0x201
 8002328:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x46>
 8002352:	e02d      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	e02d      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002366:	4413      	add	r3, r2
 8002368:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800236c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c5b      	lsrs	r3, r3, #17
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002386:	4413      	add	r3, r2
 8002388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800238c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002392:	fb02 f203 	mul.w	r2, r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	e004      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	623b      	str	r3, [r7, #32]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b2:	623b      	str	r3, [r7, #32]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc90      	pop	{r4, r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	08003b88 	.word	0x08003b88
 80023c8:	40021000 	.word	0x40021000
 80023cc:	007a1200 	.word	0x007a1200
 80023d0:	003d0900 	.word	0x003d0900

080023d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	20000044 	.word	0x20000044

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023ec:	f7ff fff2 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	08003ba8 	.word	0x08003ba8

08002410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002414:	f7ff ffde 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0adb      	lsrs	r3, r3, #11
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	08003ba8 	.word	0x08003ba8

08002438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <RCC_Delay+0x34>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <RCC_Delay+0x38>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a5b      	lsrs	r3, r3, #9
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002454:	bf00      	nop
  }
  while (Delay --);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <RCC_Delay+0x1c>
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000044 	.word	0x20000044
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fe32 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 fc20 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e03a      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_TIM_Base_Start_IT+0x98>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x58>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d009      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x58>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x58>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800

080025b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e041      	b.n	800264e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fdb4 	bl	800114c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 fb7e 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_TIM_PWM_Start+0x24>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e022      	b.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d109      	bne.n	8002696 <HAL_TIM_PWM_Start+0x3e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	e015      	b.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d109      	bne.n	80026b0 <HAL_TIM_PWM_Start+0x58>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e008      	b.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e05e      	b.n	8002788 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d104      	bne.n	80026da <HAL_TIM_PWM_Start+0x82>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d8:	e013      	b.n	8002702 <HAL_TIM_PWM_Start+0xaa>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d104      	bne.n	80026ea <HAL_TIM_PWM_Start+0x92>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	e00b      	b.n	8002702 <HAL_TIM_PWM_Start+0xaa>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_PWM_Start+0xa2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f8:	e003      	b.n	8002702 <HAL_TIM_PWM_Start+0xaa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fd74 	bl	80031f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_TIM_PWM_Start+0x138>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d107      	bne.n	800272a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_TIM_PWM_Start+0x138>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIM_PWM_Start+0xfa>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d009      	beq.n	8002752 <HAL_TIM_PWM_Start+0xfa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_TIM_PWM_Start+0x13c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_PWM_Start+0xfa>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_TIM_PWM_Start+0x140>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d010      	beq.n	8002786 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	e007      	b.n	8002786 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d122      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d11b      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0202 	mvn.w	r2, #2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fa6f 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa62 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fa71 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0204 	mvn.w	r2, #4
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa45 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa38 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fa47 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0208 	mvn.w	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa1b 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa0e 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fa1d 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0210 	mvn.w	r2, #16
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2208      	movs	r2, #8
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f9f1 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f9e4 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f9f3 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fa36 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fce1 	bl	800330e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9b7 	bl	8002ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b20      	cmp	r3, #32
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b20      	cmp	r3, #32
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0220 	mvn.w	r2, #32
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fcac 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0ac      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x174>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	f200 809f 	bhi.w	8002b14 <HAL_TIM_PWM_ConfigChannel+0x168>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a11 	.word	0x08002a11
 80029e0:	08002b15 	.word	0x08002b15
 80029e4:	08002b15 	.word	0x08002b15
 80029e8:	08002b15 	.word	0x08002b15
 80029ec:	08002a51 	.word	0x08002a51
 80029f0:	08002b15 	.word	0x08002b15
 80029f4:	08002b15 	.word	0x08002b15
 80029f8:	08002b15 	.word	0x08002b15
 80029fc:	08002a93 	.word	0x08002a93
 8002a00:	08002b15 	.word	0x08002b15
 8002a04:	08002b15 	.word	0x08002b15
 8002a08:	08002b15 	.word	0x08002b15
 8002a0c:	08002ad3 	.word	0x08002ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f9d0 	bl	8002dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0208 	orr.w	r2, r2, #8
 8002a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0204 	bic.w	r2, r2, #4
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6999      	ldr	r1, [r3, #24]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	619a      	str	r2, [r3, #24]
      break;
 8002a4e:	e062      	b.n	8002b16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fa16 	bl	8002e88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6999      	ldr	r1, [r3, #24]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	021a      	lsls	r2, r3, #8
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	619a      	str	r2, [r3, #24]
      break;
 8002a90:	e041      	b.n	8002b16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa5f 	bl	8002f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0208 	orr.w	r2, r2, #8
 8002aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0204 	bic.w	r2, r2, #4
 8002abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	61da      	str	r2, [r3, #28]
      break;
 8002ad0:	e021      	b.n	8002b16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 faa9 	bl	8003030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69d9      	ldr	r1, [r3, #28]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	021a      	lsls	r2, r3, #8
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	61da      	str	r2, [r3, #28]
      break;
 8002b12:	e000      	b.n	8002b16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIM_ConfigClockSource+0x18>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0b3      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x180>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b78:	d03e      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xd0>
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7e:	f200 8087 	bhi.w	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	f000 8085 	beq.w	8002c94 <HAL_TIM_ConfigClockSource+0x16c>
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8e:	d87f      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002b90:	2b70      	cmp	r3, #112	; 0x70
 8002b92:	d01a      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xa2>
 8002b94:	2b70      	cmp	r3, #112	; 0x70
 8002b96:	d87b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d050      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x116>
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d877      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002ba0:	2b50      	cmp	r3, #80	; 0x50
 8002ba2:	d03c      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0xf6>
 8002ba4:	2b50      	cmp	r3, #80	; 0x50
 8002ba6:	d873      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d058      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x136>
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d86f      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d064      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x156>
 8002bb4:	2b30      	cmp	r3, #48	; 0x30
 8002bb6:	d86b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d060      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x156>
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d867      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05c      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x156>
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d05a      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bc8:	e062      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f000 faee 	bl	80031ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	609a      	str	r2, [r3, #8]
      break;
 8002bf6:	e04e      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f000 fad7 	bl	80031ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1a:	609a      	str	r2, [r3, #8]
      break;
 8002c1c:	e03b      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 fa4e 	bl	80030cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2150      	movs	r1, #80	; 0x50
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 faa5 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e02b      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 fa6c 	bl	8003128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2160      	movs	r1, #96	; 0x60
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fa95 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e01b      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 fa2e 	bl	80030cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa85 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e00b      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f000 fa7c 	bl	8003186 <TIM_ITRx_SetConfig>
        break;
 8002c8e:	e002      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <TIM_Base_SetConfig+0xb8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <TIM_Base_SetConfig+0x30>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x30>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x30>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <TIM_Base_SetConfig+0xc0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <TIM_Base_SetConfig+0xb8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0x62>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0x62>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <TIM_Base_SetConfig+0xc0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <TIM_Base_SetConfig+0xb8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800

08002dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 0302 	bic.w	r3, r3, #2
 8002e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <TIM_OC1_SetConfig+0xc8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10c      	bne.n	8002e32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0308 	bic.w	r3, r3, #8
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <TIM_OC1_SetConfig+0xc8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d111      	bne.n	8002e5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00

08002e88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0210 	bic.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0320 	bic.w	r3, r3, #32
 8002ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_OC2_SetConfig+0xd0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10d      	bne.n	8002f04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <TIM_OC2_SetConfig+0xd0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d113      	bne.n	8002f34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00

08002f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <TIM_OC3_SetConfig+0xd0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10d      	bne.n	8002fd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <TIM_OC3_SetConfig+0xd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d113      	bne.n	8003006 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	621a      	str	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00

08003030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800307a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	031b      	lsls	r3, r3, #12
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <TIM_OC4_SetConfig+0x98>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d109      	bne.n	80030a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00

080030cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f023 0201 	bic.w	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 030a 	bic.w	r3, r3, #10
 8003108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f023 0210 	bic.w	r2, r3, #16
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	031b      	lsls	r3, r3, #12
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	621a      	str	r2, [r3, #32]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f043 0307 	orr.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b087      	sub	sp, #28
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	431a      	orrs	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2201      	movs	r2, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e046      	b.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d009      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10c      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e03f      	b.n	80033b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd ff50 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fb49 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_UART_IRQHandler+0x52>
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa4f 	bl	80038aa <UART_Receive_IT>
      return;
 800340c:	e17b      	b.n	8003706 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80b1 	beq.w	8003578 <HAL_UART_IRQHandler+0x1bc>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_UART_IRQHandler+0x70>
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a6 	beq.w	8003578 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_UART_IRQHandler+0x90>
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_UART_IRQHandler+0xb0>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_UART_IRQHandler+0xd0>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00f      	beq.n	80034b6 <HAL_UART_IRQHandler+0xfa>
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_UART_IRQHandler+0xee>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0208 	orr.w	r2, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 811e 	beq.w	80036fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_UART_IRQHandler+0x11e>
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f9e8 	bl	80038aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <HAL_UART_IRQHandler+0x146>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d031      	beq.n	8003566 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f92a 	bl	800375c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d023      	beq.n	800355e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	2b00      	cmp	r3, #0
 800352c:	d013      	beq.n	8003556 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	4a76      	ldr	r2, [pc, #472]	; (800370c <HAL_UART_IRQHandler+0x350>)
 8003534:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe f956 	bl	80017ec <HAL_DMA_Abort_IT>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003550:	4610      	mov	r0, r2
 8003552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e00e      	b.n	8003574 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8ec 	bl	8003734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e00a      	b.n	8003574 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8e8 	bl	8003734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e006      	b.n	8003574 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8e4 	bl	8003734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003572:	e0c3      	b.n	80036fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	bf00      	nop
    return;
 8003576:	e0c1      	b.n	80036fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 80a1 	bne.w	80036c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 809b 	beq.w	80036c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8095 	beq.w	80036c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04e      	beq.n	800365c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80035c8:	8a3b      	ldrh	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8098 	beq.w	8003700 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d4:	8a3a      	ldrh	r2, [r7, #16]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	f080 8092 	bcs.w	8003700 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8a3a      	ldrh	r2, [r7, #16]
 80035e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d02b      	beq.n	8003644 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0210 	bic.w	r2, r2, #16
 8003638:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe f899 	bl	8001776 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364c:	b29b      	uxth	r3, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	b29b      	uxth	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f876 	bl	8003746 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800365a:	e051      	b.n	8003700 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003664:	b29b      	uxth	r3, r3
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d047      	beq.n	8003704 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003674:	8a7b      	ldrh	r3, [r7, #18]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d044      	beq.n	8003704 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003688:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0210 	bic.w	r2, r2, #16
 80036b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036b8:	8a7b      	ldrh	r3, [r7, #18]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f842 	bl	8003746 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036c2:	e01f      	b.n	8003704 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_UART_IRQHandler+0x324>
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f87f 	bl	80037dc <UART_Transmit_IT>
    return;
 80036de:	e012      	b.n	8003706 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <HAL_UART_IRQHandler+0x34a>
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8c0 	bl	800387a <UART_EndTransmit_IT>
    return;
 80036fa:	e004      	b.n	8003706 <HAL_UART_IRQHandler+0x34a>
    return;
 80036fc:	bf00      	nop
 80036fe:	e002      	b.n	8003706 <HAL_UART_IRQHandler+0x34a>
      return;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_UART_IRQHandler+0x34a>
      return;
 8003704:	bf00      	nop
  }
}
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	080037b5 	.word	0x080037b5

08003710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003772:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0210 	bic.w	r2, r2, #16
 800379a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ffb0 	bl	8003734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b21      	cmp	r3, #33	; 0x21
 80037ee:	d13e      	bne.n	800386e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d114      	bne.n	8003824 <UART_Transmit_IT+0x48>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d110      	bne.n	8003824 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003816:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	e008      	b.n	8003836 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6211      	str	r1, [r2, #32]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29b      	uxth	r3, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4619      	mov	r1, r3
 8003844:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003858:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003868:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003890:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff38 	bl	8003710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b22      	cmp	r3, #34	; 0x22
 80038bc:	f040 8099 	bne.w	80039f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d117      	bne.n	80038fa <UART_Receive_IT+0x50>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d113      	bne.n	80038fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	1c9a      	adds	r2, r3, #2
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
 80038f8:	e026      	b.n	8003948 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d007      	beq.n	800391e <UART_Receive_IT+0x74>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <UART_Receive_IT+0x82>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e008      	b.n	800393e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003938:	b2da      	uxtb	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4619      	mov	r1, r3
 8003956:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003958:	2b00      	cmp	r3, #0
 800395a:	d148      	bne.n	80039ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0220 	bic.w	r2, r2, #32
 800396a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	2b01      	cmp	r3, #1
 800399a:	d123      	bne.n	80039e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d10a      	bne.n	80039d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff feb2 	bl	8003746 <HAL_UARTEx_RxEventCallback>
 80039e2:	e002      	b.n	80039ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fe9c 	bl	8003722 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e002      	b.n	80039f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a36:	f023 030c 	bic.w	r3, r3, #12
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <UART_SetConfig+0x114>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d103      	bne.n	8003a6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a64:	f7fe fcd4 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	e002      	b.n	8003a72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7fe fcbc 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003a70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <UART_SetConfig+0x118>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	0119      	lsls	r1, r3, #4
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <UART_SetConfig+0x118>)
 8003aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2064      	movs	r0, #100	; 0x64
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac8:	4419      	add	r1, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <UART_SetConfig+0x118>)
 8003ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2064      	movs	r0, #100	; 0x64
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <UART_SetConfig+0x118>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	440a      	add	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40013800 	.word	0x40013800
 8003b14:	51eb851f 	.word	0x51eb851f

08003b18 <__libc_init_array>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	4d0c      	ldr	r5, [pc, #48]	; (8003b50 <__libc_init_array+0x38>)
 8003b1e:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <__libc_init_array+0x3c>)
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	42a6      	cmp	r6, r4
 8003b26:	d109      	bne.n	8003b3c <__libc_init_array+0x24>
 8003b28:	f000 f822 	bl	8003b70 <_init>
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	4d0a      	ldr	r5, [pc, #40]	; (8003b58 <__libc_init_array+0x40>)
 8003b30:	4c0a      	ldr	r4, [pc, #40]	; (8003b5c <__libc_init_array+0x44>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	42a6      	cmp	r6, r4
 8003b38:	d105      	bne.n	8003b46 <__libc_init_array+0x2e>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b40:	4798      	blx	r3
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7ee      	b.n	8003b24 <__libc_init_array+0xc>
 8003b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4a:	4798      	blx	r3
 8003b4c:	3601      	adds	r6, #1
 8003b4e:	e7f2      	b.n	8003b36 <__libc_init_array+0x1e>
 8003b50:	08003bb0 	.word	0x08003bb0
 8003b54:	08003bb0 	.word	0x08003bb0
 8003b58:	08003bb0 	.word	0x08003bb0
 8003b5c:	08003bb4 	.word	0x08003bb4

08003b60 <memset>:
 8003b60:	4603      	mov	r3, r0
 8003b62:	4402      	add	r2, r0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d100      	bne.n	8003b6a <memset+0xa>
 8003b68:	4770      	bx	lr
 8003b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6e:	e7f9      	b.n	8003b64 <memset+0x4>

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
