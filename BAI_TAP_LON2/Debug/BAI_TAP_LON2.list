
BAI_TAP_LON2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08004680  08004680  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004680  08004680  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200000b8  08004740  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08004740  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec58  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258c  00000000  00000000  0002ed39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00032018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189a6  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f049  00000000  00000000  0004b5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b073  00000000  00000000  0005a647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e56ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  000e5710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004600 	.word	0x08004600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	08004600 	.word	0x08004600

0800014c <getKeyInput1>:
int button_flag2 = 0;
int button_flag3 = 0;
int button_flag4 = 0;


void getKeyInput1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	key01 = key11;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <getKeyInput1+0x64>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <getKeyInput1+0x68>)
 8000156:	6013      	str	r3, [r2, #0]
	key11 = key21;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <getKeyInput1+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a14      	ldr	r2, [pc, #80]	; (80001b0 <getKeyInput1+0x64>)
 800015e:	6013      	str	r3, [r2, #0]
	key21 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000160:	2102      	movs	r1, #2
 8000162:	4816      	ldr	r0, [pc, #88]	; (80001bc <getKeyInput1+0x70>)
 8000164:	f001 fe00 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <getKeyInput1+0x6c>)
 800016e:	601a      	str	r2, [r3, #0]
	if((key01 == key11) && (key11 == key21)){
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <getKeyInput1+0x68>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <getKeyInput1+0x64>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	429a      	cmp	r2, r3
 800017a:	d116      	bne.n	80001aa <getKeyInput1+0x5e>
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <getKeyInput1+0x64>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <getKeyInput1+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	429a      	cmp	r2, r3
 8000186:	d110      	bne.n	80001aa <getKeyInput1+0x5e>
		if(key31 != key21){
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <getKeyInput1+0x74>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <getKeyInput1+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d00a      	beq.n	80001aa <getKeyInput1+0x5e>
			key31 = key21;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <getKeyInput1+0x6c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <getKeyInput1+0x74>)
 800019a:	6013      	str	r3, [r2, #0]
			if(key21== PRESSED_STATE){
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <getKeyInput1+0x6c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d102      	bne.n	80001aa <getKeyInput1+0x5e>
				button_flag1 = 1;
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <getKeyInput1+0x78>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000004 	.word	0x20000004
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000008 	.word	0x20000008
 80001bc:	40010800 	.word	0x40010800
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	200000d4 	.word	0x200000d4

080001c8 <getKeyInput2>:

void getKeyInput2(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	key02 = key12;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <getKeyInput2+0x64>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <getKeyInput2+0x68>)
 80001d2:	6013      	str	r3, [r2, #0]
	key12 = key22;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <getKeyInput2+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a14      	ldr	r2, [pc, #80]	; (800022c <getKeyInput2+0x64>)
 80001da:	6013      	str	r3, [r2, #0]
	key22 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001dc:	2110      	movs	r1, #16
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <getKeyInput2+0x70>)
 80001e0:	f001 fdc2 	bl	8001d68 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <getKeyInput2+0x6c>)
 80001ea:	601a      	str	r2, [r3, #0]
	if((key02 == key12) && (key12 == key22)){
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <getKeyInput2+0x68>)
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <getKeyInput2+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d116      	bne.n	8000226 <getKeyInput2+0x5e>
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <getKeyInput2+0x64>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <getKeyInput2+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d110      	bne.n	8000226 <getKeyInput2+0x5e>
		if(key32 != key22){
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <getKeyInput2+0x74>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <getKeyInput2+0x6c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d00a      	beq.n	8000226 <getKeyInput2+0x5e>
			key32 = key22;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <getKeyInput2+0x6c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <getKeyInput2+0x74>)
 8000216:	6013      	str	r3, [r2, #0]
			if(key22 == PRESSED_STATE){
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <getKeyInput2+0x6c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <getKeyInput2+0x5e>
				button_flag2= 1;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <getKeyInput2+0x78>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000024 	.word	0x20000024
 8000230:	20000020 	.word	0x20000020
 8000234:	20000028 	.word	0x20000028
 8000238:	40010800 	.word	0x40010800
 800023c:	2000002c 	.word	0x2000002c
 8000240:	200000d8 	.word	0x200000d8

08000244 <getKeyInput3>:

void getKeyInput3(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	key03 = key13;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <getKeyInput3+0x64>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <getKeyInput3+0x68>)
 800024e:	6013      	str	r3, [r2, #0]
	key13 = key23;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <getKeyInput3+0x6c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <getKeyInput3+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
	key23 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000258:	2101      	movs	r1, #1
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <getKeyInput3+0x70>)
 800025c:	f001 fd84 	bl	8001d68 <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <getKeyInput3+0x6c>)
 8000266:	601a      	str	r2, [r3, #0]
	if((key03 == key13) && (key13 == key23)){
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <getKeyInput3+0x68>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <getKeyInput3+0x64>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d116      	bne.n	80002a2 <getKeyInput3+0x5e>
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <getKeyInput3+0x64>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <getKeyInput3+0x6c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d110      	bne.n	80002a2 <getKeyInput3+0x5e>
		if(key33 != key23){
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <getKeyInput3+0x74>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <getKeyInput3+0x6c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d00a      	beq.n	80002a2 <getKeyInput3+0x5e>
			key33 = key23;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <getKeyInput3+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <getKeyInput3+0x74>)
 8000292:	6013      	str	r3, [r2, #0]
			if(key23 == PRESSED_STATE){
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <getKeyInput3+0x6c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <getKeyInput3+0x5e>
				button_flag3= 1;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <getKeyInput3+0x78>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000014 	.word	0x20000014
 80002ac:	20000010 	.word	0x20000010
 80002b0:	20000018 	.word	0x20000018
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	2000001c 	.word	0x2000001c
 80002bc:	200000dc 	.word	0x200000dc

080002c0 <getKeyInput4>:

void getKeyInput4(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	key04 = key14;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <getKeyInput4+0x64>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a17      	ldr	r2, [pc, #92]	; (8000328 <getKeyInput4+0x68>)
 80002ca:	6013      	str	r3, [r2, #0]
	key14 = key24;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <getKeyInput4+0x6c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <getKeyInput4+0x64>)
 80002d2:	6013      	str	r3, [r2, #0]
	key24 = HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin);
 80002d4:	2101      	movs	r1, #1
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <getKeyInput4+0x70>)
 80002d8:	f001 fd46 	bl	8001d68 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <getKeyInput4+0x6c>)
 80002e2:	601a      	str	r2, [r3, #0]
	if((key04 == key14) && (key14 == key24)){
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput4+0x68>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <getKeyInput4+0x64>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d116      	bne.n	800031e <getKeyInput4+0x5e>
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <getKeyInput4+0x64>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <getKeyInput4+0x6c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d110      	bne.n	800031e <getKeyInput4+0x5e>
		if(key34 != key24){
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <getKeyInput4+0x74>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <getKeyInput4+0x6c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	429a      	cmp	r2, r3
 8000306:	d00a      	beq.n	800031e <getKeyInput4+0x5e>
			key34 = key24;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <getKeyInput4+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <getKeyInput4+0x74>)
 800030e:	6013      	str	r3, [r2, #0]
			if(key24 == PRESSED_STATE){
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <getKeyInput4+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <getKeyInput4+0x5e>
				button_flag4= 1;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <getKeyInput4+0x78>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000034 	.word	0x20000034
 8000328:	20000030 	.word	0x20000030
 800032c:	20000038 	.word	0x20000038
 8000330:	40010800 	.word	0x40010800
 8000334:	2000003c 	.word	0x2000003c
 8000338:	200000e0 	.word	0x200000e0

0800033c <control_unit>:



#include "control.h"

void control_unit(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if(button_flag1 == 1)
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <control_unit+0xb8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d10a      	bne.n	800035e <control_unit+0x22>
	{
		ped = 0;
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <control_unit+0xbc>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		mode = mode +1;
 800034e:	4b2b      	ldr	r3, [pc, #172]	; (80003fc <control_unit+0xc0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	4a29      	ldr	r2, [pc, #164]	; (80003fc <control_unit+0xc0>)
 8000356:	6013      	str	r3, [r2, #0]
		button_flag1 = 0;
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <control_unit+0xb8>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
	}
	if(mode == 1)
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <control_unit+0xc0>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d111      	bne.n	800038a <control_unit+0x4e>
	{
		fsm_automatic_run(global_red, global_green, global_yellow);
 8000366:	4b26      	ldr	r3, [pc, #152]	; (8000400 <control_unit+0xc4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a26      	ldr	r2, [pc, #152]	; (8000404 <control_unit+0xc8>)
 800036c:	6811      	ldr	r1, [r2, #0]
 800036e:	4a26      	ldr	r2, [pc, #152]	; (8000408 <control_unit+0xcc>)
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f850 	bl	8000418 <fsm_automatic_run>
		fsm_automatic_run2(global_red, global_green, global_yellow);
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <control_unit+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <control_unit+0xc8>)
 800037e:	6811      	ldr	r1, [r2, #0]
 8000380:	4a21      	ldr	r2, [pc, #132]	; (8000408 <control_unit+0xcc>)
 8000382:	6812      	ldr	r2, [r2, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f9b1 	bl	80006ec <fsm_automatic_run2>
	}
	if(mode == 2)
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <control_unit+0xc0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d101      	bne.n	8000396 <control_unit+0x5a>
	{
	    fsm_automatic_run3();
 8000392:	f000 fa37 	bl	8000804 <fsm_automatic_run3>
	}

	if(mode == 3)
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <control_unit+0xc0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b03      	cmp	r3, #3
 800039c:	d101      	bne.n	80003a2 <control_unit+0x66>
	{
		fsm_automatic_run4();
 800039e:	f000 fa9b 	bl	80008d8 <fsm_automatic_run4>
	}

	if(mode == 4)
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <control_unit+0xc0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d108      	bne.n	80003bc <control_unit+0x80>
	{
		mode = 1;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <control_unit+0xc0>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
		status = INIT;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <control_unit+0xd0>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
		status1 = INIT;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <control_unit+0xd4>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
	}
	if(button_flag4 == 1)
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <control_unit+0xd8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d114      	bne.n	80003ee <control_unit+0xb2>
	{
		ped = 1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <control_unit+0xbc>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
		setTimer2((global_green+global_red+global_yellow)*1000*2);
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <control_unit+0xc8>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <control_unit+0xc4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	441a      	add	r2, r3
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <control_unit+0xcc>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f840 	bl	8001468 <setTimer2>
		button_flag4 = 0;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <control_unit+0xd8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
	}

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000d4 	.word	0x200000d4
 80003f8:	2000010c 	.word	0x2000010c
 80003fc:	20000040 	.word	0x20000040
 8000400:	200000ec 	.word	0x200000ec
 8000404:	200000f0 	.word	0x200000f0
 8000408:	200000f4 	.word	0x200000f4
 800040c:	200000e4 	.word	0x200000e4
 8000410:	200000e8 	.word	0x200000e8
 8000414:	200000e0 	.word	0x200000e0

08000418 <fsm_automatic_run>:
 *      Author: Hong Phat
 */
#include "fsm_automatic.h"
#include "main.h"

void fsm_automatic_run(int x, int y, int z){
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
	switch(status){
 8000424:	4ba0      	ldr	r3, [pc, #640]	; (80006a8 <fsm_automatic_run+0x290>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	2b03      	cmp	r3, #3
 800042c:	f200 8131 	bhi.w	8000692 <fsm_automatic_run+0x27a>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <fsm_automatic_run+0x20>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000449 	.word	0x08000449
 800043c:	080005f5 	.word	0x080005f5
 8000440:	08000497 	.word	0x08000497
 8000444:	08000573 	.word	0x08000573
		case INIT:
		    	status = AUTO_GREEN;
 8000448:	4b97      	ldr	r3, [pc, #604]	; (80006a8 <fsm_automatic_run+0x290>)
 800044a:	2203      	movs	r2, #3
 800044c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000454:	4895      	ldr	r0, [pc, #596]	; (80006ac <fsm_automatic_run+0x294>)
 8000456:	f001 fc9e 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	4894      	ldr	r0, [pc, #592]	; (80006b0 <fsm_automatic_run+0x298>)
 8000460:	f001 fc99 	bl	8001d96 <HAL_GPIO_WritePin>
				counter_red = global_red;
 8000464:	4b93      	ldr	r3, [pc, #588]	; (80006b4 <fsm_automatic_run+0x29c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a93      	ldr	r2, [pc, #588]	; (80006b8 <fsm_automatic_run+0x2a0>)
 800046a:	6013      	str	r3, [r2, #0]
				counter_green = global_green;
 800046c:	4b93      	ldr	r3, [pc, #588]	; (80006bc <fsm_automatic_run+0x2a4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a93      	ldr	r2, [pc, #588]	; (80006c0 <fsm_automatic_run+0x2a8>)
 8000472:	6013      	str	r3, [r2, #0]
				counter_yellow = global_yellow;
 8000474:	4b93      	ldr	r3, [pc, #588]	; (80006c4 <fsm_automatic_run+0x2ac>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a93      	ldr	r2, [pc, #588]	; (80006c8 <fsm_automatic_run+0x2b0>)
 800047a:	6013      	str	r3, [r2, #0]
				setTimer4(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000480:	f001 f826 	bl	80014d0 <setTimer4>
				setTimer1(y*1000);
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800048a:	fb02 f303 	mul.w	r3, r2, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 ffd0 	bl	8001434 <setTimer1>
			break;
 8000494:	e104      	b.n	80006a0 <fsm_automatic_run+0x288>
		case AUTO_GREEN:
			if(timer4_flag == 1){
 8000496:	4b8d      	ldr	r3, [pc, #564]	; (80006cc <fsm_automatic_run+0x2b4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d123      	bne.n	80004e6 <fsm_automatic_run+0xce>
				setTimer4(1000);
 800049e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a2:	f001 f815 	bl	80014d0 <setTimer4>
				counter_green--;
 80004a6:	4b86      	ldr	r3, [pc, #536]	; (80006c0 <fsm_automatic_run+0x2a8>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a84      	ldr	r2, [pc, #528]	; (80006c0 <fsm_automatic_run+0x2a8>)
 80004ae:	6013      	str	r3, [r2, #0]
				sprintf(data,"!7SEG:%d%d#",counter_green/10,counter_green%10);
 80004b0:	4b83      	ldr	r3, [pc, #524]	; (80006c0 <fsm_automatic_run+0x2a8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a86      	ldr	r2, [pc, #536]	; (80006d0 <fsm_automatic_run+0x2b8>)
 80004b6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ba:	1092      	asrs	r2, r2, #2
 80004bc:	17db      	asrs	r3, r3, #31
 80004be:	1ad0      	subs	r0, r2, r3
 80004c0:	4b7f      	ldr	r3, [pc, #508]	; (80006c0 <fsm_automatic_run+0x2a8>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b82      	ldr	r3, [pc, #520]	; (80006d0 <fsm_automatic_run+0x2b8>)
 80004c6:	fb83 1302 	smull	r1, r3, r3, r2
 80004ca:	1099      	asrs	r1, r3, #2
 80004cc:	17d3      	asrs	r3, r2, #31
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	460b      	mov	r3, r1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	440b      	add	r3, r1
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	1ad1      	subs	r1, r2, r3
 80004da:	460b      	mov	r3, r1
 80004dc:	4602      	mov	r2, r0
 80004de:	497d      	ldr	r1, [pc, #500]	; (80006d4 <fsm_automatic_run+0x2bc>)
 80004e0:	487d      	ldr	r0, [pc, #500]	; (80006d8 <fsm_automatic_run+0x2c0>)
 80004e2:	f003 fc53 	bl	8003d8c <siprintf>
			}
			if(ped == 1){
 80004e6:	4b7d      	ldr	r3, [pc, #500]	; (80006dc <fsm_automatic_run+0x2c4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d112      	bne.n	8000514 <fsm_automatic_run+0xfc>
				if(timer2_flag == 1){
 80004ee:	4b7c      	ldr	r3, [pc, #496]	; (80006e0 <fsm_automatic_run+0x2c8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d102      	bne.n	80004fc <fsm_automatic_run+0xe4>
					ped = 0;
 80004f6:	4b79      	ldr	r3, [pc, #484]	; (80006dc <fsm_automatic_run+0x2c4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000502:	486a      	ldr	r0, [pc, #424]	; (80006ac <fsm_automatic_run+0x294>)
 8000504:	f001 fc47 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050e:	4868      	ldr	r0, [pc, #416]	; (80006b0 <fsm_automatic_run+0x298>)
 8000510:	f001 fc41 	bl	8001d96 <HAL_GPIO_WritePin>
//					if(PWM == 950){
//						PWM = 0;
//					}
//				}
			}
			if(timer1_flag == 1){
 8000514:	4b73      	ldr	r3, [pc, #460]	; (80006e4 <fsm_automatic_run+0x2cc>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	f040 80bc 	bne.w	8000696 <fsm_automatic_run+0x27e>
				PWM = 0;
 800051e:	4b72      	ldr	r3, [pc, #456]	; (80006e8 <fsm_automatic_run+0x2d0>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW;
 8000524:	4b60      	ldr	r3, [pc, #384]	; (80006a8 <fsm_automatic_run+0x290>)
 8000526:	2204      	movs	r2, #4
 8000528:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000530:	485e      	ldr	r0, [pc, #376]	; (80006ac <fsm_automatic_run+0x294>)
 8000532:	f001 fc30 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	2108      	movs	r1, #8
 800053a:	485d      	ldr	r0, [pc, #372]	; (80006b0 <fsm_automatic_run+0x298>)
 800053c:	f001 fc2b 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000546:	4859      	ldr	r0, [pc, #356]	; (80006ac <fsm_automatic_run+0x294>)
 8000548:	f001 fc25 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000552:	4857      	ldr	r0, [pc, #348]	; (80006b0 <fsm_automatic_run+0x298>)
 8000554:	f001 fc1f 	bl	8001d96 <HAL_GPIO_WritePin>
				counter_red = global_red;
 8000558:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <fsm_automatic_run+0x29c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a56      	ldr	r2, [pc, #344]	; (80006b8 <fsm_automatic_run+0x2a0>)
 800055e:	6013      	str	r3, [r2, #0]

				setTimer1(z*1000);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff62 	bl	8001434 <setTimer1>
			}

			break;
 8000570:	e091      	b.n	8000696 <fsm_automatic_run+0x27e>
		case AUTO_YELLOW:
			if(ped == 1){
 8000572:	4b5a      	ldr	r3, [pc, #360]	; (80006dc <fsm_automatic_run+0x2c4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d112      	bne.n	80005a0 <fsm_automatic_run+0x188>
				if(timer2_flag == 1){
 800057a:	4b59      	ldr	r3, [pc, #356]	; (80006e0 <fsm_automatic_run+0x2c8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d102      	bne.n	8000588 <fsm_automatic_run+0x170>
					ped = 0;
 8000582:	4b56      	ldr	r3, [pc, #344]	; (80006dc <fsm_automatic_run+0x2c4>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058e:	4847      	ldr	r0, [pc, #284]	; (80006ac <fsm_automatic_run+0x294>)
 8000590:	f001 fc01 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059a:	4845      	ldr	r0, [pc, #276]	; (80006b0 <fsm_automatic_run+0x298>)
 800059c:	f001 fbfb 	bl	8001d96 <HAL_GPIO_WritePin>
//				PWM = PWM+1;
//				if(PWM == 950){
//					PWM = 0;
//				}
			}
			if(timer1_flag == 1){
 80005a0:	4b50      	ldr	r3, [pc, #320]	; (80006e4 <fsm_automatic_run+0x2cc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d178      	bne.n	800069a <fsm_automatic_run+0x282>
				PWM = 0 ;
 80005a8:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <fsm_automatic_run+0x2d0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
				status = AUTO_RED;
 80005ae:	4b3e      	ldr	r3, [pc, #248]	; (80006a8 <fsm_automatic_run+0x290>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	483c      	ldr	r0, [pc, #240]	; (80006ac <fsm_automatic_run+0x294>)
 80005bc:	f001 fbeb 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	483a      	ldr	r0, [pc, #232]	; (80006b0 <fsm_automatic_run+0x298>)
 80005c8:	f001 fbe5 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d2:	4836      	ldr	r0, [pc, #216]	; (80006ac <fsm_automatic_run+0x294>)
 80005d4:	f001 fbdf 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2108      	movs	r1, #8
 80005dc:	4834      	ldr	r0, [pc, #208]	; (80006b0 <fsm_automatic_run+0x298>)
 80005de:	f001 fbda 	bl	8001d96 <HAL_GPIO_WritePin>
				setTimer1(x*1000);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 ff21 	bl	8001434 <setTimer1>
			}

			break;
 80005f2:	e052      	b.n	800069a <fsm_automatic_run+0x282>
		case AUTO_RED:
			if(ped == 1){
 80005f4:	4b39      	ldr	r3, [pc, #228]	; (80006dc <fsm_automatic_run+0x2c4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d120      	bne.n	800063e <fsm_automatic_run+0x226>
				if(timer2_flag == 1){
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <fsm_automatic_run+0x2c8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d102      	bne.n	800060a <fsm_automatic_run+0x1f2>
					ped = 0;
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <fsm_automatic_run+0x2c4>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	4826      	ldr	r0, [pc, #152]	; (80006ac <fsm_automatic_run+0x294>)
 8000612:	f001 fbc0 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061c:	4824      	ldr	r0, [pc, #144]	; (80006b0 <fsm_automatic_run+0x298>)
 800061e:	f001 fbba 	bl	8001d96 <HAL_GPIO_WritePin>
				//if(counter_red <= 2){
					PWM = PWM+4;
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <fsm_automatic_run+0x2d0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3304      	adds	r3, #4
 8000628:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <fsm_automatic_run+0x2d0>)
 800062a:	6013      	str	r3, [r2, #0]
					if(PWM == 950){
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <fsm_automatic_run+0x2d0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000634:	4293      	cmp	r3, r2
 8000636:	d102      	bne.n	800063e <fsm_automatic_run+0x226>
						PWM = 0;
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <fsm_automatic_run+0x2d0>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
					}
				}
			//}
			if(timer1_flag == 1){
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <fsm_automatic_run+0x2cc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d12b      	bne.n	800069e <fsm_automatic_run+0x286>
				PWM = 0;
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <fsm_automatic_run+0x2d0>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <fsm_automatic_run+0x290>)
 800064e:	2203      	movs	r2, #3
 8000650:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000658:	4814      	ldr	r0, [pc, #80]	; (80006ac <fsm_automatic_run+0x294>)
 800065a:	f001 fb9c 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <fsm_automatic_run+0x298>)
 8000666:	f001 fb96 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <fsm_automatic_run+0x294>)
 8000672:	f001 fb90 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <fsm_automatic_run+0x298>)
 800067c:	f001 fb8b 	bl	8001d96 <HAL_GPIO_WritePin>
				setTimer1(y*1000);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fed2 	bl	8001434 <setTimer1>
			}

			break;
 8000690:	e005      	b.n	800069e <fsm_automatic_run+0x286>
		default:
			break;
 8000692:	bf00      	nop
 8000694:	e004      	b.n	80006a0 <fsm_automatic_run+0x288>
			break;
 8000696:	bf00      	nop
 8000698:	e002      	b.n	80006a0 <fsm_automatic_run+0x288>
			break;
 800069a:	bf00      	nop
 800069c:	e000      	b.n	80006a0 <fsm_automatic_run+0x288>
			break;
 800069e:	bf00      	nop
		}
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000e4 	.word	0x200000e4
 80006ac:	40010800 	.word	0x40010800
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	200000ec 	.word	0x200000ec
 80006b8:	200000f8 	.word	0x200000f8
 80006bc:	200000f0 	.word	0x200000f0
 80006c0:	200000fc 	.word	0x200000fc
 80006c4:	200000f4 	.word	0x200000f4
 80006c8:	20000100 	.word	0x20000100
 80006cc:	2000013c 	.word	0x2000013c
 80006d0:	66666667 	.word	0x66666667
 80006d4:	08004618 	.word	0x08004618
 80006d8:	20000114 	.word	0x20000114
 80006dc:	2000010c 	.word	0x2000010c
 80006e0:	2000012c 	.word	0x2000012c
 80006e4:	20000124 	.word	0x20000124
 80006e8:	20000110 	.word	0x20000110

080006ec <fsm_automatic_run2>:
void fsm_automatic_run2(int x, int y, int z){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
	switch(status1){
 80006f8:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <fsm_automatic_run2+0x10c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d86e      	bhi.n	80007e0 <fsm_automatic_run2+0xf4>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <fsm_automatic_run2+0x1c>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000719 	.word	0x08000719
 800070c:	080007ad 	.word	0x080007ad
 8000710:	08000745 	.word	0x08000745
 8000714:	08000779 	.word	0x08000779
		case INIT:
		    status1 = AUTO_GREEN;
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <fsm_automatic_run2+0x10c>)
 800071a:	2203      	movs	r2, #3
 800071c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	2120      	movs	r1, #32
 8000722:	4836      	ldr	r0, [pc, #216]	; (80007fc <fsm_automatic_run2+0x110>)
 8000724:	f001 fb37 	bl	8001d96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2110      	movs	r1, #16
 800072c:	4833      	ldr	r0, [pc, #204]	; (80007fc <fsm_automatic_run2+0x110>)
 800072e:	f001 fb32 	bl	8001d96 <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000738:	fb02 f303 	mul.w	r3, r2, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fead 	bl	800149c <setTimer3>
			break;
 8000742:	e054      	b.n	80007ee <fsm_automatic_run2+0x102>
		case AUTO_GREEN:
			if(timer3_flag == 1){
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <fsm_automatic_run2+0x114>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d14b      	bne.n	80007e4 <fsm_automatic_run2+0xf8>
				status1 = AUTO_YELLOW;
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <fsm_automatic_run2+0x10c>)
 800074e:	2204      	movs	r2, #4
 8000750:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4829      	ldr	r0, [pc, #164]	; (80007fc <fsm_automatic_run2+0x110>)
 8000758:	f001 fb1d 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	4826      	ldr	r0, [pc, #152]	; (80007fc <fsm_automatic_run2+0x110>)
 8000762:	f001 fb18 	bl	8001d96 <HAL_GPIO_WritePin>
				setTimer3(y*1000);
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076c:	fb02 f303 	mul.w	r3, r2, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fe93 	bl	800149c <setTimer3>
			}
			break;
 8000776:	e035      	b.n	80007e4 <fsm_automatic_run2+0xf8>
		case AUTO_YELLOW:
			if(timer3_flag == 1){
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <fsm_automatic_run2+0x114>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d133      	bne.n	80007e8 <fsm_automatic_run2+0xfc>
				status1 = AUTO_RED;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <fsm_automatic_run2+0x10c>)
 8000782:	2202      	movs	r2, #2
 8000784:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <fsm_automatic_run2+0x110>)
 800078c:	f001 fb03 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	4819      	ldr	r0, [pc, #100]	; (80007fc <fsm_automatic_run2+0x110>)
 8000796:	f001 fafe 	bl	8001d96 <HAL_GPIO_WritePin>
				setTimer3(z*1000);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a0:	fb02 f303 	mul.w	r3, r2, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fe79 	bl	800149c <setTimer3>
			}
			break;
 80007aa:	e01d      	b.n	80007e8 <fsm_automatic_run2+0xfc>
		case AUTO_RED:
			if(timer3_flag == 1){
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <fsm_automatic_run2+0x114>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d11b      	bne.n	80007ec <fsm_automatic_run2+0x100>
				status1 = AUTO_GREEN;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <fsm_automatic_run2+0x10c>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2120      	movs	r1, #32
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <fsm_automatic_run2+0x110>)
 80007c0:	f001 fae9 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2110      	movs	r1, #16
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <fsm_automatic_run2+0x110>)
 80007ca:	f001 fae4 	bl	8001d96 <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fe5f 	bl	800149c <setTimer3>
			}


			break;
 80007de:	e005      	b.n	80007ec <fsm_automatic_run2+0x100>
		default:
			break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <fsm_automatic_run2+0x102>
			break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <fsm_automatic_run2+0x102>
			break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <fsm_automatic_run2+0x102>
			break;
 80007ec:	bf00      	nop
		}
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000e8 	.word	0x200000e8
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	20000134 	.word	0x20000134

08000804 <fsm_automatic_run3>:
void fsm_automatic_run3()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <fsm_automatic_run3+0xc4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d107      	bne.n	8000820 <fsm_automatic_run3+0x1c>
			{
				count = count + 1;
 8000810:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <fsm_automatic_run3+0xc8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <fsm_automatic_run3+0xc8>)
 8000818:	6013      	str	r3, [r2, #0]
				button_flag2 = 0;
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <fsm_automatic_run3+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
			}
			if(count  == 0)
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <fsm_automatic_run3+0xc8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d114      	bne.n	8000852 <fsm_automatic_run3+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2120      	movs	r1, #32
 800082c:	4828      	ldr	r0, [pc, #160]	; (80008d0 <fsm_automatic_run3+0xcc>)
 800082e:	f001 fab2 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	2110      	movs	r1, #16
 8000836:	4826      	ldr	r0, [pc, #152]	; (80008d0 <fsm_automatic_run3+0xcc>)
 8000838:	f001 faad 	bl	8001d96 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	4824      	ldr	r0, [pc, #144]	; (80008d4 <fsm_automatic_run3+0xd0>)
 8000844:	f001 faa7 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	2108      	movs	r1, #8
 800084c:	4820      	ldr	r0, [pc, #128]	; (80008d0 <fsm_automatic_run3+0xcc>)
 800084e:	f001 faa2 	bl	8001d96 <HAL_GPIO_WritePin>
			}
			if(count == 1)
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <fsm_automatic_run3+0xc8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d114      	bne.n	8000884 <fsm_automatic_run3+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	2120      	movs	r1, #32
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <fsm_automatic_run3+0xcc>)
 8000860:	f001 fa99 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	2110      	movs	r1, #16
 8000868:	4819      	ldr	r0, [pc, #100]	; (80008d0 <fsm_automatic_run3+0xcc>)
 800086a:	f001 fa94 	bl	8001d96 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	4817      	ldr	r0, [pc, #92]	; (80008d4 <fsm_automatic_run3+0xd0>)
 8000876:	f001 fa8e 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800087a:	2201      	movs	r2, #1
 800087c:	2108      	movs	r1, #8
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <fsm_automatic_run3+0xcc>)
 8000880:	f001 fa89 	bl	8001d96 <HAL_GPIO_WritePin>
			}
			if(count == 2)
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <fsm_automatic_run3+0xc8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d114      	bne.n	80008b6 <fsm_automatic_run3+0xb2>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2120      	movs	r1, #32
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <fsm_automatic_run3+0xcc>)
 8000892:	f001 fa80 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2110      	movs	r1, #16
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <fsm_automatic_run3+0xcc>)
 800089c:	f001 fa7b 	bl	8001d96 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <fsm_automatic_run3+0xd0>)
 80008a8:	f001 fa75 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2108      	movs	r1, #8
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <fsm_automatic_run3+0xcc>)
 80008b2:	f001 fa70 	bl	8001d96 <HAL_GPIO_WritePin>
			}
			if(count == 3)
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <fsm_automatic_run3+0xc8>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d102      	bne.n	80008c4 <fsm_automatic_run3+0xc0>
			{
				count = 0;
 80008be:	4b03      	ldr	r3, [pc, #12]	; (80008cc <fsm_automatic_run3+0xc8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
			}
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000d8 	.word	0x200000d8
 80008cc:	20000108 	.word	0x20000108
 80008d0:	40010c00 	.word	0x40010c00
 80008d4:	40010800 	.word	0x40010800

080008d8 <fsm_automatic_run4>:
void fsm_automatic_run4()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 80008dc:	4b52      	ldr	r3, [pc, #328]	; (8000a28 <fsm_automatic_run4+0x150>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d107      	bne.n	80008f4 <fsm_automatic_run4+0x1c>
			{
				button_flag2 = 0;
 80008e4:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <fsm_automatic_run4+0x150>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
				light_mode = light_mode +1;
 80008ea:	4b50      	ldr	r3, [pc, #320]	; (8000a2c <fsm_automatic_run4+0x154>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	4a4e      	ldr	r2, [pc, #312]	; (8000a2c <fsm_automatic_run4+0x154>)
 80008f2:	6013      	str	r3, [r2, #0]
			}
			if(light_mode  == 0)
 80008f4:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <fsm_automatic_run4+0x154>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d114      	bne.n	8000926 <fsm_automatic_run4+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2120      	movs	r1, #32
 8000900:	484b      	ldr	r0, [pc, #300]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000902:	f001 fa48 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	2110      	movs	r1, #16
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <fsm_automatic_run4+0x158>)
 800090c:	f001 fa43 	bl	8001d96 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000916:	4847      	ldr	r0, [pc, #284]	; (8000a34 <fsm_automatic_run4+0x15c>)
 8000918:	f001 fa3d 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	4843      	ldr	r0, [pc, #268]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000922:	f001 fa38 	bl	8001d96 <HAL_GPIO_WritePin>
			}
			if(light_mode == 1)
 8000926:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <fsm_automatic_run4+0x154>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d114      	bne.n	8000958 <fsm_automatic_run4+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	2120      	movs	r1, #32
 8000932:	483f      	ldr	r0, [pc, #252]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000934:	f001 fa2f 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <fsm_automatic_run4+0x158>)
 800093e:	f001 fa2a 	bl	8001d96 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000948:	483a      	ldr	r0, [pc, #232]	; (8000a34 <fsm_automatic_run4+0x15c>)
 800094a:	f001 fa24 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	4837      	ldr	r0, [pc, #220]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000954:	f001 fa1f 	bl	8001d96 <HAL_GPIO_WritePin>
			}
			if(light_mode == 2)
 8000958:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <fsm_automatic_run4+0x154>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d114      	bne.n	800098a <fsm_automatic_run4+0xb2>
			{
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_0_Pin, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	2120      	movs	r1, #32
 8000964:	4832      	ldr	r0, [pc, #200]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000966:	f001 fa16 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight2_1_Pin, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4830      	ldr	r0, [pc, #192]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000970:	f001 fa11 	bl	8001d96 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, TrafficLight1_0_Pin, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097a:	482e      	ldr	r0, [pc, #184]	; (8000a34 <fsm_automatic_run4+0x15c>)
 800097c:	f001 fa0b 	bl	8001d96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TrafficLight1_1_Pin, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2108      	movs	r1, #8
 8000984:	482a      	ldr	r0, [pc, #168]	; (8000a30 <fsm_automatic_run4+0x158>)
 8000986:	f001 fa06 	bl	8001d96 <HAL_GPIO_WritePin>
			}
			if(light_mode == 3)
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <fsm_automatic_run4+0x154>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d102      	bne.n	8000998 <fsm_automatic_run4+0xc0>
			{
				light_mode = 0;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <fsm_automatic_run4+0x154>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 0)
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <fsm_automatic_run4+0x160>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d112      	bne.n	80009c6 <fsm_automatic_run4+0xee>
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <fsm_automatic_run4+0x154>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10e      	bne.n	80009c6 <fsm_automatic_run4+0xee>
			{
				global_green = global_green + 1;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <fsm_automatic_run4+0x164>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <fsm_automatic_run4+0x164>)
 80009b0:	6013      	str	r3, [r2, #0]
				if(global_green == 10){
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <fsm_automatic_run4+0x164>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b0a      	cmp	r3, #10
 80009b8:	d102      	bne.n	80009c0 <fsm_automatic_run4+0xe8>
					global_green = 0;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <fsm_automatic_run4+0x164>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <fsm_automatic_run4+0x160>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 1)
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <fsm_automatic_run4+0x160>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d112      	bne.n	80009f4 <fsm_automatic_run4+0x11c>
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <fsm_automatic_run4+0x154>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10e      	bne.n	80009f4 <fsm_automatic_run4+0x11c>
			{
				global_yellow = global_yellow + 1;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <fsm_automatic_run4+0x168>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <fsm_automatic_run4+0x168>)
 80009de:	6013      	str	r3, [r2, #0]
				if(global_yellow == 10){
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <fsm_automatic_run4+0x168>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b0a      	cmp	r3, #10
 80009e6:	d102      	bne.n	80009ee <fsm_automatic_run4+0x116>
					global_yellow = 0;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <fsm_automatic_run4+0x168>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <fsm_automatic_run4+0x160>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 2)
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <fsm_automatic_run4+0x160>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d112      	bne.n	8000a22 <fsm_automatic_run4+0x14a>
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <fsm_automatic_run4+0x154>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d10e      	bne.n	8000a22 <fsm_automatic_run4+0x14a>
			{
				global_red = global_red + 1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <fsm_automatic_run4+0x16c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <fsm_automatic_run4+0x16c>)
 8000a0c:	6013      	str	r3, [r2, #0]
				if(global_red == 10){
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <fsm_automatic_run4+0x16c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b0a      	cmp	r3, #10
 8000a14:	d102      	bne.n	8000a1c <fsm_automatic_run4+0x144>
					global_red = 0;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <fsm_automatic_run4+0x16c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <fsm_automatic_run4+0x160>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
			}
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000d8 	.word	0x200000d8
 8000a2c:	20000104 	.word	0x20000104
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40010800 	.word	0x40010800
 8000a38:	200000dc 	.word	0x200000dc
 8000a3c:	200000f0 	.word	0x200000f0
 8000a40:	200000f4 	.word	0x200000f4
 8000a44:	200000ec 	.word	0x200000ec

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fde8 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f868 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f978 	bl	8000d48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a58:	f000 f8a6 	bl	8000ba8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a5c:	f000 f94a 	bl	8000cf4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a60:	f000 f8ee 	bl	8000c40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 8000a64:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <main+0xa0>)
 8000a66:	f001 fe19 	bl	800269c <HAL_TIM_Base_Start_IT>
	status = INIT;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <main+0xa4>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
	status1 = INIT;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <main+0xa8>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
//	uint32_t PWM = 0;
	global_green = 3;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <main+0xac>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	601a      	str	r2, [r3, #0]
	global_red = 5;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <main+0xb0>)
 8000a7e:	2205      	movs	r2, #5
 8000a80:	601a      	str	r2, [r3, #0]
	global_yellow = 2;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <main+0xb4>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
	SCH_Init();
 8000a88:	f000 f9f0 	bl	8000e6c <SCH_Init>
	HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	481c      	ldr	r0, [pc, #112]	; (8000b00 <main+0xb8>)
 8000a90:	f001 fea6 	bl	80027e0 <HAL_TIM_PWM_Start>
	SCH_Add_Task(control_unit, 0, 1);   // controll all the button and state machine
 8000a94:	2201      	movs	r2, #1
 8000a96:	2100      	movs	r1, #0
 8000a98:	481a      	ldr	r0, [pc, #104]	; (8000b04 <main+0xbc>)
 8000a9a:	f000 fa71 	bl	8000f80 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput1, 0, 1);    /* USER CODE BEGIN 3 */
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4819      	ldr	r0, [pc, #100]	; (8000b08 <main+0xc0>)
 8000aa4:	f000 fa6c 	bl	8000f80 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput2, 0, 1);    /* USER CODE BEGIN 3 */
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4817      	ldr	r0, [pc, #92]	; (8000b0c <main+0xc4>)
 8000aae:	f000 fa67 	bl	8000f80 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput3, 0, 1);    /* USER CODE BEGIN 3 */
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4816      	ldr	r0, [pc, #88]	; (8000b10 <main+0xc8>)
 8000ab8:	f000 fa62 	bl	8000f80 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput4, 0, 1);    /* USER CODE BEGIN 3 */
 8000abc:	2201      	movs	r2, #1
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <main+0xcc>)
 8000ac2:	f000 fa5d 	bl	8000f80 <SCH_Add_Task>
//	setTimer2(10);
	setTimer4(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f000 fd02 	bl	80014d0 <setTimer4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_IT(&huart2,(void*)data,9);
 8000acc:	2209      	movs	r2, #9
 8000ace:	4912      	ldr	r1, [pc, #72]	; (8000b18 <main+0xd0>)
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <main+0xd4>)
 8000ad2:	f002 fd36 	bl	8003542 <HAL_UART_Transmit_IT>

	  	SCH_Dispatch_Tasks();
 8000ad6:	f000 faa5 	bl	8001024 <SCH_Dispatch_Tasks>
	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,PWM);
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <main+0xb8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <main+0xd8>)
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_UART_Transmit_IT(&huart2,(void*)data,9);
 8000ae4:	e7f2      	b.n	8000acc <main+0x84>
 8000ae6:	bf00      	nop
 8000ae8:	200004bc 	.word	0x200004bc
 8000aec:	200000e4 	.word	0x200000e4
 8000af0:	200000e8 	.word	0x200000e8
 8000af4:	200000f0 	.word	0x200000f0
 8000af8:	200000ec 	.word	0x200000ec
 8000afc:	200000f4 	.word	0x200000f4
 8000b00:	20000474 	.word	0x20000474
 8000b04:	0800033d 	.word	0x0800033d
 8000b08:	0800014d 	.word	0x0800014d
 8000b0c:	080001c9 	.word	0x080001c9
 8000b10:	08000245 	.word	0x08000245
 8000b14:	080002c1 	.word	0x080002c1
 8000b18:	20000114 	.word	0x20000114
 8000b1c:	20000504 	.word	0x20000504
 8000b20:	20000110 	.word	0x20000110

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	; 0x40
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 f922 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 f92f 	bl	8001dc8 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b70:	f000 f976 	bl	8000e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fb9a 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b9a:	f000 f961 	bl	8000e60 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3740      	adds	r7, #64	; 0x40
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bdc:	224f      	movs	r2, #79	; 0x4f
 8000bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bee:	f001 fd05 	bl	80025fc <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf8:	f000 f932 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000c0a:	f002 f851 	bl	8002cb0 <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c14:	f000 f924 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000c26:	f002 fbcf 	bl	80033c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 f916 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200004bc 	.word	0x200004bc

08000c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <MX_TIM3_Init+0xb0>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c6a:	223f      	movs	r2, #63	; 0x3f
 8000c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c88:	4818      	ldr	r0, [pc, #96]	; (8000cec <MX_TIM3_Init+0xac>)
 8000c8a:	f001 fd59 	bl	8002740 <HAL_TIM_PWM_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c94:	f000 f8e4 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4811      	ldr	r0, [pc, #68]	; (8000cec <MX_TIM3_Init+0xac>)
 8000ca8:	f002 fb8e 	bl	80033c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cb2:	f000 f8d5 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb6:	2360      	movs	r3, #96	; 0x60
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_TIM3_Init+0xac>)
 8000cce:	f001 ff31 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cd8:	f000 f8c2 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_TIM3_Init+0xac>)
 8000cde:	f000 faad 	bl	800123c <HAL_TIM_MspPostInit>

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000474 	.word	0x20000474
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART2_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f002 fbbc 	bl	80034a8 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f893 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000504 	.word	0x20000504
 8000d44:	40004400 	.word	0x40004400

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_PED_2_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000daa:	4822      	ldr	r0, [pc, #136]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000dac:	f000 fff3 	bl	8001d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PED_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000db6:	4820      	ldr	r0, [pc, #128]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000db8:	f000 ffed 	bl	8001d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000dbc:	2313      	movs	r3, #19
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000dd0:	f000 fe46 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4813      	ldr	r0, [pc, #76]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000de8:	f000 fe3a 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_2_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = LED_PED_2_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8000dec:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000e06:	f000 fe2b 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PED_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = LED_PED_1_Pin|TrafficLight1_0_Pin;
 8000e0a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000e24:	f000 fe1c 	bl	8001a60 <HAL_GPIO_Init>

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40010800 	.word	0x40010800

08000e3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	timer_run();
 8000e44:	f000 fb5e 	bl	8001504 <timer_run>
	timer_run2();
 8000e48:	f000 fb76 	bl	8001538 <timer_run2>
	timer_run3();
 8000e4c:	f000 fb8e 	bl	800156c <timer_run3>
	timer_run4();
 8000e50:	f000 fba6 	bl	80015a0 <timer_run4>
	SCH_Update() ;
 8000e54:	f000 f824 	bl	8000ea0 <SCH_Update>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <SCH_Init>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */

#include "scheduler.h"
void SCH_Init ( ) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
unsigned char i ;
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	e006      	b.n	8000e86 <SCH_Init+0x1a>
SCH_Delete_Task ( i ) ;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f91e 	bl	80010bc <SCH_Delete_Task>
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3301      	adds	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b27      	cmp	r3, #39	; 0x27
 8000e8a:	d9f5      	bls.n	8000e78 <SCH_Init+0xc>
 }
 Error_code_G = 0;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <SCH_Init+0x30>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
 }
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000014d 	.word	0x2000014d

08000ea0 <SCH_Update>:

  void SCH_Update ( void ) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  unsigned char Index ;

  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	e05d      	b.n	8000f68 <SCH_Update+0xc8>
  if ( SCH_tasks_G[ Index ] . pTask ) {
 8000eac:	79fa      	ldrb	r2, [r7, #7]
 8000eae:	4933      	ldr	r1, [pc, #204]	; (8000f7c <SCH_Update+0xdc>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d050      	beq.n	8000f62 <SCH_Update+0xc2>
 if ( SCH_tasks_G [ Index ] . Delay == 0 ) {
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	492e      	ldr	r1, [pc, #184]	; (8000f7c <SCH_Update+0xdc>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d132      	bne.n	8000f3c <SCH_Update+0x9c>
  // The task i s due to run
  SCH_tasks_G [ Index ] .RunMe += 1;
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	4928      	ldr	r1, [pc, #160]	; (8000f7c <SCH_Update+0xdc>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2d8      	uxtb	r0, r3
 8000eee:	4923      	ldr	r1, [pc, #140]	; (8000f7c <SCH_Update+0xdc>)
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	440b      	add	r3, r1
 8000efa:	330c      	adds	r3, #12
 8000efc:	4602      	mov	r2, r0
 8000efe:	701a      	strb	r2, [r3, #0]
  if ( SCH_tasks_G [ Index ] . Period ) {
 8000f00:	79fa      	ldrb	r2, [r7, #7]
 8000f02:	491e      	ldr	r1, [pc, #120]	; (8000f7c <SCH_Update+0xdc>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3308      	adds	r3, #8
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d025      	beq.n	8000f62 <SCH_Update+0xc2>
  // Schedule periodic tasks to run again
  SCH_tasks_G [ Index ] . Delay = SCH_tasks_G [ Index ] . Period ;
 8000f16:	79f9      	ldrb	r1, [r7, #7]
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <SCH_Update+0xdc>)
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4403      	add	r3, r0
 8000f26:	3308      	adds	r3, #8
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	4814      	ldr	r0, [pc, #80]	; (8000f7c <SCH_Update+0xdc>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4403      	add	r3, r0
 8000f36:	3304      	adds	r3, #4
 8000f38:	6019      	str	r1, [r3, #0]
 8000f3a:	e012      	b.n	8000f62 <SCH_Update+0xc2>
  }
  } else {
  SCH_tasks_G [ Index ] . Delay -= 1;
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	490f      	ldr	r1, [pc, #60]	; (8000f7c <SCH_Update+0xdc>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	1e59      	subs	r1, r3, #1
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <SCH_Update+0xdc>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	3304      	adds	r3, #4
 8000f60:	6019      	str	r1, [r3, #0]
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3301      	adds	r3, #1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b27      	cmp	r3, #39	; 0x27
 8000f6c:	d99e      	bls.n	8000eac <SCH_Update+0xc>
  }
  }
  }
  }
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000150 	.word	0x20000150

08000f80 <SCH_Add_Task>:

  unsigned char SCH_Add_Task ( void ( * pFunction ) ( ) , unsigned int DELAY, unsigned int PERIOD)
  {
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  unsigned char Index = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8000f90:	e002      	b.n	8000f98 <SCH_Add_Task+0x18>
  {
  Index ++;
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	3301      	adds	r3, #1
 8000f96:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8000f98:	7dfa      	ldrb	r2, [r7, #23]
 8000f9a:	4920      	ldr	r1, [pc, #128]	; (800101c <SCH_Add_Task+0x9c>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <SCH_Add_Task+0x32>
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b27      	cmp	r3, #39	; 0x27
 8000fb0:	d9ef      	bls.n	8000f92 <SCH_Add_Task+0x12>
  }
  if ( Index == SCH_MAX_TASKS)
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b28      	cmp	r3, #40	; 0x28
 8000fb6:	d104      	bne.n	8000fc2 <SCH_Add_Task+0x42>
   {
   // Task l i s t i s f u l l
   Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <SCH_Add_Task+0xa0>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	701a      	strb	r2, [r3, #0]
   return SCH_MAX_TASKS;
 8000fbe:	2328      	movs	r3, #40	; 0x28
 8000fc0:	e027      	b.n	8001012 <SCH_Add_Task+0x92>
   }
   // I f we â€™re here , there i s a space in the task array
   SCH_tasks_G [ Index ] . pTask = pFunction ;
 8000fc2:	7dfa      	ldrb	r2, [r7, #23]
 8000fc4:	4915      	ldr	r1, [pc, #84]	; (800101c <SCH_Add_Task+0x9c>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Delay = DELAY;
 8000fd4:	7dfa      	ldrb	r2, [r7, #23]
 8000fd6:	4911      	ldr	r1, [pc, #68]	; (800101c <SCH_Add_Task+0x9c>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Period = PERIOD;
 8000fe8:	7dfa      	ldrb	r2, [r7, #23]
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <SCH_Add_Task+0x9c>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] .RunMe = 0;
 8000ffc:	7dfa      	ldrb	r2, [r7, #23]
 8000ffe:	4907      	ldr	r1, [pc, #28]	; (800101c <SCH_Add_Task+0x9c>)
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	330c      	adds	r3, #12
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
   return Index ;
 8001010:	7dfb      	ldrb	r3, [r7, #23]
   }
 8001012:	4618      	mov	r0, r3
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000150 	.word	0x20000150
 8001020:	2000014d 	.word	0x2000014d

08001024 <SCH_Dispatch_Tasks>:

  void SCH_Dispatch_Tasks ( void )
  {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  unsigned char Index ;
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	e03a      	b.n	80010a6 <SCH_Dispatch_Tasks+0x82>
  if ( SCH_tasks_G [ Index ] .RunMe > 0 ) {
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	4921      	ldr	r1, [pc, #132]	; (80010b8 <SCH_Dispatch_Tasks+0x94>)
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	330c      	adds	r3, #12
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d02c      	beq.n	80010a0 <SCH_Dispatch_Tasks+0x7c>
  ( * SCH_tasks_G [ Index ] . pTask ) ( ) ; // Run the task
 8001046:	79fa      	ldrb	r2, [r7, #7]
 8001048:	491b      	ldr	r1, [pc, #108]	; (80010b8 <SCH_Dispatch_Tasks+0x94>)
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4798      	blx	r3
  SCH_tasks_G [ Index ] .RunMe -= 1; // Reset / reduce RunMe fl a g
 8001058:	79fa      	ldrb	r2, [r7, #7]
 800105a:	4917      	ldr	r1, [pc, #92]	; (80010b8 <SCH_Dispatch_Tasks+0x94>)
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	330c      	adds	r3, #12
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	3b01      	subs	r3, #1
 800106e:	b2d8      	uxtb	r0, r3
 8001070:	4911      	ldr	r1, [pc, #68]	; (80010b8 <SCH_Dispatch_Tasks+0x94>)
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	330c      	adds	r3, #12
 800107e:	4602      	mov	r2, r0
 8001080:	701a      	strb	r2, [r3, #0]

  if ( SCH_tasks_G [ Index ] . Period == 0 )
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <SCH_Dispatch_Tasks+0x94>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3308      	adds	r3, #8
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <SCH_Dispatch_Tasks+0x7c>
  {
  SCH_Delete_Task ( Index ) ;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f80e 	bl	80010bc <SCH_Delete_Task>
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	3301      	adds	r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b27      	cmp	r3, #39	; 0x27
 80010aa:	d9c1      	bls.n	8001030 <SCH_Dispatch_Tasks+0xc>
  }
  }
  }
  }
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000150 	.word	0x20000150

080010bc <SCH_Delete_Task>:

  unsigned char SCH_Delete_Task (  uint32_t TASK_INDEX) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
   if ( SCH_tasks_G [TASK_INDEX ] . pTask == 0 ) {
 80010c4:	4920      	ldr	r1, [pc, #128]	; (8001148 <SCH_Delete_Task+0x8c>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <SCH_Delete_Task+0x2a>
   Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <SCH_Delete_Task+0x90>)
 80010da:	2203      	movs	r2, #3
 80010dc:	701a      	strb	r2, [r3, #0]
   Return_code = RETURN_ERROR;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <SCH_Delete_Task+0x94>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e002      	b.n	80010ec <SCH_Delete_Task+0x30>
   } else {
   Return_code = RETURN_NORMAL;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <SCH_Delete_Task+0x94>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
   }
   SCH_tasks_G [TASK_INDEX ] . pTask = 0x0000 ;
 80010ec:	4916      	ldr	r1, [pc, #88]	; (8001148 <SCH_Delete_Task+0x8c>)
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Delay = 0;
 80010fe:	4912      	ldr	r1, [pc, #72]	; (8001148 <SCH_Delete_Task+0x8c>)
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3304      	adds	r3, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Period = 0;
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <SCH_Delete_Task+0x8c>)
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3308      	adds	r3, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] .RunMe = 0;
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <SCH_Delete_Task+0x8c>)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	330c      	adds	r3, #12
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
   return Return_code ;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SCH_Delete_Task+0x94>)
 800113c:	781b      	ldrb	r3, [r3, #0]
  }
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000150 	.word	0x20000150
 800114c:	2000014d 	.word	0x2000014d
 8001150:	2000014c 	.word	0x2000014c

08001154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_MspInit+0x5c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6193      	str	r3, [r2, #24]
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_MspInit+0x5c>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MspInit+0x60>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_MspInit+0x60>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000

080011b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c8:	d113      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_TIM_Base_MspInit+0x44>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_TIM_Base_MspInit+0x44>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	201c      	movs	r0, #28
 80011e8:	f000 fb53 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ec:	201c      	movs	r0, #28
 80011ee:	f000 fb6c 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <HAL_TIM_PWM_MspInit+0x34>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10b      	bne.n	800122a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_TIM_PWM_MspInit+0x38>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_TIM_PWM_MspInit+0x38>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_TIM_PWM_MspInit+0x38>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40000400 	.word	0x40000400
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_TIM_MspPostInit+0x58>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d117      	bne.n	800128c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_TIM_MspPostInit+0x5c>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_TIM_MspPostInit+0x5c>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_TIM_MspPostInit+0x5c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2302      	movs	r3, #2
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_TIM_MspPostInit+0x60>)
 8001288:	f000 fbea 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40000400 	.word	0x40000400
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_UART_MspInit+0x98>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d137      	bne.n	8001330 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f0:	2304      	movs	r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <HAL_UART_MspInit+0xa0>)
 8001304:	f000 fbac 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001308:	2308      	movs	r3, #8
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <HAL_UART_MspInit+0xa0>)
 800131c:	f000 fba0 	bl	8001a60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	2026      	movs	r0, #38	; 0x26
 8001326:	f000 fab4 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800132a:	2026      	movs	r0, #38	; 0x26
 800132c:	f000 facd 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40004400 	.word	0x40004400
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f98f 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM2_IRQHandler+0x10>)
 800139a:	f001 fac3 	bl	8002924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200004bc 	.word	0x200004bc

080013a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART2_IRQHandler+0x10>)
 80013ae:	f002 f90d 	bl	80035cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000504 	.word	0x20000504

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f002 fc9c 	bl	8003d28 <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20005000 	.word	0x20005000
 800141c:	00000400 	.word	0x00000400
 8001420:	20000120 	.word	0x20000120
 8001424:	20000560 	.word	0x20000560

08001428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <setTimer1>:
int timer4_flag = 0;
int timer4_counter = 0;

int timer_cycle = 10;

void setTimer1(int duration){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <setTimer1+0x28>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
	timer1_counter = duration / timer_cycle;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <setTimer1+0x2c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fb92 f3f3 	sdiv	r3, r2, r3
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <setTimer1+0x30>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000124 	.word	0x20000124
 8001460:	20000048 	.word	0x20000048
 8001464:	20000128 	.word	0x20000128

08001468 <setTimer2>:
void setTimer2(int duration){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <setTimer2+0x28>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
	timer2_counter = duration / timer_cycle;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <setTimer2+0x2c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <setTimer2+0x30>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000012c 	.word	0x2000012c
 8001494:	20000048 	.word	0x20000048
 8001498:	20000130 	.word	0x20000130

0800149c <setTimer3>:
void setTimer3(int duration){
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	timer3_flag = 0;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <setTimer3+0x28>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
	timer3_counter = duration / timer_cycle;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <setTimer3+0x2c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <setTimer3+0x30>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000134 	.word	0x20000134
 80014c8:	20000048 	.word	0x20000048
 80014cc:	20000138 	.word	0x20000138

080014d0 <setTimer4>:
void setTimer4(int duration){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	timer4_flag = 0;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <setTimer4+0x28>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	timer4_counter = duration / timer_cycle;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <setTimer4+0x2c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <setTimer4+0x30>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2000013c 	.word	0x2000013c
 80014fc:	20000048 	.word	0x20000048
 8001500:	20000140 	.word	0x20000140

08001504 <timer_run>:

void timer_run(){
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	if(timer1_counter >= 0){
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <timer_run+0x2c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0b      	blt.n	8001528 <timer_run+0x24>
		timer1_counter--;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <timer_run+0x2c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <timer_run+0x2c>)
 8001518:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <timer_run+0x2c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <timer_run+0x24>
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <timer_run+0x30>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
	}
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000128 	.word	0x20000128
 8001534:	20000124 	.word	0x20000124

08001538 <timer_run2>:
void timer_run2(){
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	if(timer2_counter >= 0){
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <timer_run2+0x2c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0b      	blt.n	800155c <timer_run2+0x24>
		timer2_counter--;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <timer_run2+0x2c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <timer_run2+0x2c>)
 800154c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <timer_run2+0x2c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <timer_run2+0x24>
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <timer_run2+0x30>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
	}
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000130 	.word	0x20000130
 8001568:	2000012c 	.word	0x2000012c

0800156c <timer_run3>:
void timer_run3(){
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	if(timer3_counter >= 0){
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <timer_run3+0x2c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0b      	blt.n	8001590 <timer_run3+0x24>
		timer3_counter--;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <timer_run3+0x2c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <timer_run3+0x2c>)
 8001580:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <timer_run3+0x2c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <timer_run3+0x24>
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <timer_run3+0x30>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
	}
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000138 	.word	0x20000138
 800159c:	20000134 	.word	0x20000134

080015a0 <timer_run4>:
void timer_run4(){
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	if(timer4_counter >= 0){
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <timer_run4+0x2c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0b      	blt.n	80015c4 <timer_run4+0x24>
		timer4_counter--;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <timer_run4+0x2c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <timer_run4+0x2c>)
 80015b4:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0) timer4_flag = 1;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <timer_run4+0x2c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <timer_run4+0x24>
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <timer_run4+0x30>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
	}
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000140 	.word	0x20000140
 80015d0:	2000013c 	.word	0x2000013c

080015d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	; (8001618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015fa:	f7ff ff15 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f002 fb99 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001602:	f7ff fa21 	bl	8000a48 <main>
  bx lr
 8001606:	4770      	bx	lr
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001610:	08004688 	.word	0x08004688
  ldr r2, =_sbss
 8001614:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001618:	2000055c 	.word	0x2000055c

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x28>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x28>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f923 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fd8a 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f93b 	bl	80018e6 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f903 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000044 	.word	0x20000044
 80016a4:	20000050 	.word	0x20000050
 80016a8:	2000004c 	.word	0x2000004c

080016ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x1c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x20>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_IncTick+0x20>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000050 	.word	0x20000050
 80016cc:	20000548 	.word	0x20000548

080016d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <HAL_GetTick+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000548 	.word	0x20000548

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4906      	ldr	r1, [pc, #24]	; (800177c <__NVIC_EnableIRQ+0x34>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff90 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff2d 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff42 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff35 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001910:	2b02      	cmp	r3, #2
 8001912:	d008      	beq.n	8001926 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2204      	movs	r2, #4
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e020      	b.n	8001968 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 020e 	bic.w	r2, r2, #14
 8001934:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
	...

08001974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001986:	2b02      	cmp	r3, #2
 8001988:	d005      	beq.n	8001996 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2204      	movs	r2, #4
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e051      	b.n	8001a3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 020e 	bic.w	r2, r2, #14
 80019a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_DMA_Abort_IT+0xd0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d029      	beq.n	8001a14 <HAL_DMA_Abort_IT+0xa0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_DMA_Abort_IT+0xd4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d022      	beq.n	8001a10 <HAL_DMA_Abort_IT+0x9c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_DMA_Abort_IT+0xd8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d01a      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x96>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_DMA_Abort_IT+0xdc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d012      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x90>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_DMA_Abort_IT+0xe0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00a      	beq.n	80019fe <HAL_DMA_Abort_IT+0x8a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_DMA_Abort_IT+0xe4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d102      	bne.n	80019f8 <HAL_DMA_Abort_IT+0x84>
 80019f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019f6:	e00e      	b.n	8001a16 <HAL_DMA_Abort_IT+0xa2>
 80019f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019fc:	e00b      	b.n	8001a16 <HAL_DMA_Abort_IT+0xa2>
 80019fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a02:	e008      	b.n	8001a16 <HAL_DMA_Abort_IT+0xa2>
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	e005      	b.n	8001a16 <HAL_DMA_Abort_IT+0xa2>
 8001a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0e:	e002      	b.n	8001a16 <HAL_DMA_Abort_IT+0xa2>
 8001a10:	2310      	movs	r3, #16
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_Abort_IT+0xa2>
 8001a14:	2301      	movs	r3, #1
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_DMA_Abort_IT+0xe8>)
 8001a18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
    } 
  }
  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40020008 	.word	0x40020008
 8001a48:	4002001c 	.word	0x4002001c
 8001a4c:	40020030 	.word	0x40020030
 8001a50:	40020044 	.word	0x40020044
 8001a54:	40020058 	.word	0x40020058
 8001a58:	4002006c 	.word	0x4002006c
 8001a5c:	40020000 	.word	0x40020000

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b08b      	sub	sp, #44	; 0x2c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e169      	b.n	8001d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a74:	2201      	movs	r2, #1
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8158 	bne.w	8001d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a9a      	ldr	r2, [pc, #616]	; (8001d00 <HAL_GPIO_Init+0x2a0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d05e      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001a9c:	4a98      	ldr	r2, [pc, #608]	; (8001d00 <HAL_GPIO_Init+0x2a0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d875      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aa2:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_GPIO_Init+0x2a4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d058      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001aa8:	4a96      	ldr	r2, [pc, #600]	; (8001d04 <HAL_GPIO_Init+0x2a4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d86f      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aae:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_GPIO_Init+0x2a8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d052      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ab4:	4a94      	ldr	r2, [pc, #592]	; (8001d08 <HAL_GPIO_Init+0x2a8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d869      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aba:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_GPIO_Init+0x2ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d04c      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ac0:	4a92      	ldr	r2, [pc, #584]	; (8001d0c <HAL_GPIO_Init+0x2ac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d863      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ac6:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d046      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001acc:	4a90      	ldr	r2, [pc, #576]	; (8001d10 <HAL_GPIO_Init+0x2b0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d85d      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d82a      	bhi.n	8001b2c <HAL_GPIO_Init+0xcc>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d859      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <HAL_GPIO_Init+0x80>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b35 	.word	0x08001b35
 8001ae8:	08001b47 	.word	0x08001b47
 8001aec:	08001b89 	.word	0x08001b89
 8001af0:	08001b8f 	.word	0x08001b8f
 8001af4:	08001b8f 	.word	0x08001b8f
 8001af8:	08001b8f 	.word	0x08001b8f
 8001afc:	08001b8f 	.word	0x08001b8f
 8001b00:	08001b8f 	.word	0x08001b8f
 8001b04:	08001b8f 	.word	0x08001b8f
 8001b08:	08001b8f 	.word	0x08001b8f
 8001b0c:	08001b8f 	.word	0x08001b8f
 8001b10:	08001b8f 	.word	0x08001b8f
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b8f 	.word	0x08001b8f
 8001b1c:	08001b8f 	.word	0x08001b8f
 8001b20:	08001b8f 	.word	0x08001b8f
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	4a79      	ldr	r2, [pc, #484]	; (8001d14 <HAL_GPIO_Init+0x2b4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b32:	e02c      	b.n	8001b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e029      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e024      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e01f      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	330c      	adds	r3, #12
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e01a      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b62:	2304      	movs	r3, #4
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e013      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	611a      	str	r2, [r3, #16]
          break;
 8001b7a:	e009      	b.n	8001b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	615a      	str	r2, [r3, #20]
          break;
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          break;
 8001b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d801      	bhi.n	8001b9a <HAL_GPIO_Init+0x13a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_Init+0x13e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d802      	bhi.n	8001bac <HAL_GPIO_Init+0x14c>
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x152>
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3b08      	subs	r3, #8
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	210f      	movs	r1, #15
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80b1 	beq.w	8001d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be0:	4b4d      	ldr	r3, [pc, #308]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a40      	ldr	r2, [pc, #256]	; (8001d20 <HAL_GPIO_Init+0x2c0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_GPIO_Init+0x1ec>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <HAL_GPIO_Init+0x2c4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00d      	beq.n	8001c48 <HAL_GPIO_Init+0x1e8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_GPIO_Init+0x2c8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d007      	beq.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a3d      	ldr	r2, [pc, #244]	; (8001d2c <HAL_GPIO_Init+0x2cc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_GPIO_Init+0x1e0>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e006      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e004      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_GPIO_Init+0x1ee>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5e:	492f      	ldr	r1, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	492c      	ldr	r1, [pc, #176]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4928      	ldr	r1, [pc, #160]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4922      	ldr	r1, [pc, #136]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	491e      	ldr	r1, [pc, #120]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4918      	ldr	r1, [pc, #96]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4914      	ldr	r1, [pc, #80]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d021      	beq.n	8001d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	490e      	ldr	r1, [pc, #56]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
 8001cfc:	e021      	b.n	8001d42 <HAL_GPIO_Init+0x2e2>
 8001cfe:	bf00      	nop
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10310000 	.word	0x10310000
 8001d08:	10220000 	.word	0x10220000
 8001d0c:	10210000 	.word	0x10210000
 8001d10:	10120000 	.word	0x10120000
 8001d14:	10110000 	.word	0x10110000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40011400 	.word	0x40011400
 8001d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4909      	ldr	r1, [pc, #36]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f47f ae8e 	bne.w	8001a74 <HAL_GPIO_Init+0x14>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	372c      	adds	r7, #44	; 0x2c
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da6:	787b      	ldrb	r3, [r7, #1]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db2:	e003      	b.n	8001dbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e26c      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df4:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
 8001e00:	4b8c      	ldr	r3, [pc, #560]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d168      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e246      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x76>
 8001e30:	4b80      	ldr	r3, [pc, #512]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a7f      	ldr	r2, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e02e      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b78      	ldr	r3, [pc, #480]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a77      	ldr	r2, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xbc>
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a71      	ldr	r2, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a67      	ldr	r2, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fc14 	bl	80016d0 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff fc10 	bl	80016d0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1fa      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xe4>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fc00 	bl	80016d0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff fbfc 	bl	80016d0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1e6      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x10c>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d063      	beq.n	8001fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f0e:	4b49      	ldr	r3, [pc, #292]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
 8001f1a:	4b46      	ldr	r3, [pc, #280]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1ba      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4939      	ldr	r1, [pc, #228]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e03a      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fbb5 	bl	80016d0 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fbb1 	bl	80016d0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e19b      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fb94 	bl	80016d0 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff fb90 	bl	80016d0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e17a      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03a      	beq.n	800204c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fb74 	bl	80016d0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff fb70 	bl	80016d0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e15a      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 fad8 	bl	80025c0 <RCC_Delay>
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_OscConfig+0x274>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff fb5a 	bl	80016d0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201e:	e00f      	b.n	8002040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fb56 	bl	80016d0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d908      	bls.n	8002040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e140      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	42420000 	.word	0x42420000
 800203c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e9      	bne.n	8002020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a6 	beq.w	80021a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b97      	ldr	r3, [pc, #604]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b94      	ldr	r3, [pc, #592]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a93      	ldr	r2, [pc, #588]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <HAL_RCC_OscConfig+0x4f8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x4f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a8a      	ldr	r2, [pc, #552]	; (80022c0 <HAL_RCC_OscConfig+0x4f8>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb17 	bl	80016d0 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7ff fb13 	bl	80016d0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	; 0x64
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0fd      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x312>
 80020cc:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a7a      	ldr	r2, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e02d      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x334>
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a75      	ldr	r2, [pc, #468]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a72      	ldr	r2, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	e01c      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x356>
 8002104:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a6c      	ldr	r2, [pc, #432]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	e00b      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a66      	ldr	r2, [pc, #408]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b64      	ldr	r3, [pc, #400]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a63      	ldr	r2, [pc, #396]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fac7 	bl	80016d0 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff fac3 	bl	80016d0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0ab      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCC_OscConfig+0x37e>
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7ff fab1 	bl	80016d0 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff faad 	bl	80016d0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e095      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b48      	ldr	r3, [pc, #288]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a47      	ldr	r2, [pc, #284]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8081 	beq.w	80022b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d061      	beq.n	8002280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d146      	bne.n	8002252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_RCC_OscConfig+0x4fc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff fa81 	bl	80016d0 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7ff fa7d 	bl	80016d0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e067      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	492d      	ldr	r1, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a19      	ldr	r1, [r3, #32]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	430b      	orrs	r3, r1
 800221e:	4927      	ldr	r1, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x4fc>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff fa51 	bl	80016d0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7ff fa4d 	bl	80016d0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e037      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x46a>
 8002250:	e02f      	b.n	80022b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_RCC_OscConfig+0x4fc>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fa3a 	bl	80016d0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff fa36 	bl	80016d0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e020      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x498>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e013      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x4f4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42420060 	.word	0x42420060

080022c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0d0      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d910      	bls.n	800230c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4965      	ldr	r1, [pc, #404]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0b8      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800232e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002346:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	494d      	ldr	r1, [pc, #308]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d040      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d115      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07f      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e073      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06b      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4936      	ldr	r1, [pc, #216]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7ff f98a 	bl	80016d0 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7ff f986 	bl	80016d0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e053      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d210      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4922      	ldr	r1, [pc, #136]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e032      	b.n	800247e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4916      	ldr	r1, [pc, #88]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002456:	f000 f821 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	490a      	ldr	r1, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1cc>)
 8002470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1d0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f8e8 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
 8002490:	08004634 	.word	0x08004634
 8002494:	20000044 	.word	0x20000044
 8002498:	2000004c 	.word	0x2000004c

0800249c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b490      	push	{r4, r7}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024a4:	1d3c      	adds	r4, r7, #4
 80024a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024ac:	f240 2301 	movw	r3, #513	; 0x201
 80024b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d002      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x40>
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x46>
 80024da:	e02d      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024de:	623b      	str	r3, [r7, #32]
      break;
 80024e0:	e02d      	b.n	800253e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	0c9b      	lsrs	r3, r3, #18
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ee:	4413      	add	r3, r2
 80024f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0c5b      	lsrs	r3, r3, #17
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800250e:	4413      	add	r3, r2
 8002510:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002514:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251a:	fb02 f203 	mul.w	r2, r2, r3
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	e004      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <HAL_RCC_GetSysClockFreq+0xbc>)
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	623b      	str	r3, [r7, #32]
      break;
 8002536:	e002      	b.n	800253e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_GetSysClockFreq+0xb8>)
 800253a:	623b      	str	r3, [r7, #32]
      break;
 800253c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253e:	6a3b      	ldr	r3, [r7, #32]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3728      	adds	r7, #40	; 0x28
 8002544:	46bd      	mov	sp, r7
 8002546:	bc90      	pop	{r4, r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	08004624 	.word	0x08004624
 8002550:	40021000 	.word	0x40021000
 8002554:	007a1200 	.word	0x007a1200
 8002558:	003d0900 	.word	0x003d0900

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_RCC_GetHCLKFreq+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000044 	.word	0x20000044

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002574:	f7ff fff2 	bl	800255c <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004644 	.word	0x08004644

08002598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800259c:	f7ff ffde 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0adb      	lsrs	r3, r3, #11
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004644 	.word	0x08004644

080025c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <RCC_Delay+0x34>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <RCC_Delay+0x38>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0a5b      	lsrs	r3, r3, #9
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025dc:	bf00      	nop
  }
  while (Delay --);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	60fa      	str	r2, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f9      	bne.n	80025dc <RCC_Delay+0x1c>
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000044 	.word	0x20000044
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fdc8 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fc20 	bl	8002e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e03a      	b.n	800272a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_TIM_Base_Start_IT+0x98>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x58>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d009      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x58>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_TIM_Base_Start_IT+0x9c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x58>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_TIM_Base_Start_IT+0xa0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d111      	bne.n	8002718 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d010      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	e007      	b.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800

08002740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e041      	b.n	80027d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fd4a 	bl	8001200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fb7e 	bl	8002e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_TIM_PWM_Start+0x24>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e022      	b.n	800284a <HAL_TIM_PWM_Start+0x6a>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d109      	bne.n	800281e <HAL_TIM_PWM_Start+0x3e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e015      	b.n	800284a <HAL_TIM_PWM_Start+0x6a>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d109      	bne.n	8002838 <HAL_TIM_PWM_Start+0x58>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e008      	b.n	800284a <HAL_TIM_PWM_Start+0x6a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e05e      	b.n	8002910 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d104      	bne.n	8002862 <HAL_TIM_PWM_Start+0x82>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	e013      	b.n	800288a <HAL_TIM_PWM_Start+0xaa>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d104      	bne.n	8002872 <HAL_TIM_PWM_Start+0x92>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	e00b      	b.n	800288a <HAL_TIM_PWM_Start+0xaa>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d104      	bne.n	8002882 <HAL_TIM_PWM_Start+0xa2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	e003      	b.n	800288a <HAL_TIM_PWM_Start+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fd74 	bl	8003380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_TIM_PWM_Start+0x138>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d107      	bne.n	80028b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <HAL_TIM_PWM_Start+0x138>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_TIM_PWM_Start+0xfa>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d009      	beq.n	80028da <HAL_TIM_PWM_Start+0xfa>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_TIM_PWM_Start+0x13c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_TIM_PWM_Start+0xfa>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_TIM_PWM_Start+0x140>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d111      	bne.n	80028fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d010      	beq.n	800290e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fc:	e007      	b.n	800290e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800

08002924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d122      	bne.n	8002980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d11b      	bne.n	8002980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0202 	mvn.w	r2, #2
 8002950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa6f 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa62 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fa71 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d122      	bne.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d11b      	bne.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0204 	mvn.w	r2, #4
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa45 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa38 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fa47 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d122      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d11b      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0208 	mvn.w	r2, #8
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa1b 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa0e 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fa1d 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2208      	movs	r2, #8
 8002a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9f1 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9e4 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9f3 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0201 	mvn.w	r2, #1
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe f9ca 	bl	8000e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fce1 	bl	8003496 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9b7 	bl	8002e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0220 	mvn.w	r2, #32
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fcac 	bl	8003484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0ac      	b.n	8002ca8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	f200 809f 	bhi.w	8002c9c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b99 	.word	0x08002b99
 8002b68:	08002c9d 	.word	0x08002c9d
 8002b6c:	08002c9d 	.word	0x08002c9d
 8002b70:	08002c9d 	.word	0x08002c9d
 8002b74:	08002bd9 	.word	0x08002bd9
 8002b78:	08002c9d 	.word	0x08002c9d
 8002b7c:	08002c9d 	.word	0x08002c9d
 8002b80:	08002c9d 	.word	0x08002c9d
 8002b84:	08002c1b 	.word	0x08002c1b
 8002b88:	08002c9d 	.word	0x08002c9d
 8002b8c:	08002c9d 	.word	0x08002c9d
 8002b90:	08002c9d 	.word	0x08002c9d
 8002b94:	08002c5b 	.word	0x08002c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f9d0 	bl	8002f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0208 	orr.w	r2, r2, #8
 8002bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0204 	bic.w	r2, r2, #4
 8002bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6999      	ldr	r1, [r3, #24]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	619a      	str	r2, [r3, #24]
      break;
 8002bd6:	e062      	b.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa16 	bl	8003010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6999      	ldr	r1, [r3, #24]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	021a      	lsls	r2, r3, #8
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	619a      	str	r2, [r3, #24]
      break;
 8002c18:	e041      	b.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fa5f 	bl	80030e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0208 	orr.w	r2, r2, #8
 8002c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0204 	bic.w	r2, r2, #4
 8002c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69d9      	ldr	r1, [r3, #28]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]
      break;
 8002c58:	e021      	b.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 faa9 	bl	80031b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69d9      	ldr	r1, [r3, #28]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	021a      	lsls	r2, r3, #8
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	61da      	str	r2, [r3, #28]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_ConfigClockSource+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0b3      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x180>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	d03e      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0xd0>
 8002d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d06:	f200 8087 	bhi.w	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	f000 8085 	beq.w	8002e1c <HAL_TIM_ConfigClockSource+0x16c>
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d16:	d87f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d18:	2b70      	cmp	r3, #112	; 0x70
 8002d1a:	d01a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xa2>
 8002d1c:	2b70      	cmp	r3, #112	; 0x70
 8002d1e:	d87b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d20:	2b60      	cmp	r3, #96	; 0x60
 8002d22:	d050      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x116>
 8002d24:	2b60      	cmp	r3, #96	; 0x60
 8002d26:	d877      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d28:	2b50      	cmp	r3, #80	; 0x50
 8002d2a:	d03c      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xf6>
 8002d2c:	2b50      	cmp	r3, #80	; 0x50
 8002d2e:	d873      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d058      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x136>
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d86f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d38:	2b30      	cmp	r3, #48	; 0x30
 8002d3a:	d064      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x156>
 8002d3c:	2b30      	cmp	r3, #48	; 0x30
 8002d3e:	d86b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d060      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x156>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d867      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x156>
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d05a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d50:	e062      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f000 faee 	bl	8003342 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	609a      	str	r2, [r3, #8]
      break;
 8002d7e:	e04e      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f000 fad7 	bl	8003342 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da2:	609a      	str	r2, [r3, #8]
      break;
 8002da4:	e03b      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 fa4e 	bl	8003254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2150      	movs	r1, #80	; 0x50
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 faa5 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e02b      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 fa6c 	bl	80032b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2160      	movs	r1, #96	; 0x60
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fa95 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 8002de4:	e01b      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 fa2e 	bl	8003254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2140      	movs	r1, #64	; 0x40
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa85 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 8002e04:	e00b      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f000 fa7c 	bl	800330e <TIM_ITRx_SetConfig>
        break;
 8002e16:	e002      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a29      	ldr	r2, [pc, #164]	; (8002f38 <TIM_Base_SetConfig+0xb8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <TIM_Base_SetConfig+0x30>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d007      	beq.n	8002eb0 <TIM_Base_SetConfig+0x30>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_Base_SetConfig+0x30>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_Base_SetConfig+0xc0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d108      	bne.n	8002ec2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <TIM_Base_SetConfig+0xb8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_Base_SetConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <TIM_Base_SetConfig+0xc0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <TIM_Base_SetConfig+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800

08002f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0201 	bic.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 0302 	bic.w	r3, r3, #2
 8002f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	; (800300c <TIM_OC1_SetConfig+0xc8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10c      	bne.n	8002fba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0308 	bic.w	r3, r3, #8
 8002fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <TIM_OC1_SetConfig+0xc8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d111      	bne.n	8002fe6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	621a      	str	r2, [r3, #32]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00

08003010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f023 0210 	bic.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0320 	bic.w	r3, r3, #32
 800305a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <TIM_OC2_SetConfig+0xd0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10d      	bne.n	800308c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800308a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <TIM_OC2_SetConfig+0xd0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d113      	bne.n	80030bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800309a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00

080030e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800312c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <TIM_OC3_SetConfig+0xd0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10d      	bne.n	800315e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800315c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <TIM_OC3_SetConfig+0xd0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d113      	bne.n	800318e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800316c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	031b      	lsls	r3, r3, #12
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <TIM_OC4_SetConfig+0x98>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d109      	bne.n	800322c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800321e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40012c00 	.word	0x40012c00

08003254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0201 	bic.w	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800327e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 030a 	bic.w	r3, r3, #10
 8003290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 0210 	bic.w	r2, r3, #16
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	031b      	lsls	r3, r3, #12
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	f043 0307 	orr.w	r3, r3, #7
 8003330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800335c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	431a      	orrs	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2201      	movs	r2, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	401a      	ands	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033dc:	2302      	movs	r3, #2
 80033de:	e046      	b.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d009      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a10      	ldr	r2, [pc, #64]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10c      	bne.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4313      	orrs	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e03f      	b.n	800353a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fee6 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fb8d 	bl	8003c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	4613      	mov	r3, r2
 800354e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	d130      	bne.n	80035be <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_UART_Transmit_IT+0x26>
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e029      	b.n	80035c0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_UART_Transmit_IT+0x38>
 8003576:	2302      	movs	r3, #2
 8003578:	e022      	b.n	80035c0 <HAL_UART_Transmit_IT+0x7e>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	; 0x21
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x52>
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa4f 	bl	8003aba <UART_Receive_IT>
      return;
 800361c:	e17b      	b.n	8003916 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80b1 	beq.w	8003788 <HAL_UART_IRQHandler+0x1bc>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_UART_IRQHandler+0x70>
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80a6 	beq.w	8003788 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_UART_IRQHandler+0x90>
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_UART_IRQHandler+0xb0>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0202 	orr.w	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_UART_IRQHandler+0xd0>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00f      	beq.n	80036c6 <HAL_UART_IRQHandler+0xfa>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_UART_IRQHandler+0xee>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f043 0208 	orr.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 811e 	beq.w	800390c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_UART_IRQHandler+0x11e>
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f9e8 	bl	8003aba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <HAL_UART_IRQHandler+0x146>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d031      	beq.n	8003776 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f92a 	bl	800396c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d023      	beq.n	800376e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003734:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	2b00      	cmp	r3, #0
 800373c:	d013      	beq.n	8003766 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	4a76      	ldr	r2, [pc, #472]	; (800391c <HAL_UART_IRQHandler+0x350>)
 8003744:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f912 	bl	8001974 <HAL_DMA_Abort_IT>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003760:	4610      	mov	r0, r2
 8003762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	e00e      	b.n	8003784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8ec 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	e00a      	b.n	8003784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8e8 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	e006      	b.n	8003784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8e4 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003782:	e0c3      	b.n	800390c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	bf00      	nop
    return;
 8003786:	e0c1      	b.n	800390c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	f040 80a1 	bne.w	80038d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 809b 	beq.w	80038d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8095 	beq.w	80038d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d04e      	beq.n	800386c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037d8:	8a3b      	ldrh	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8098 	beq.w	8003910 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037e4:	8a3a      	ldrh	r2, [r7, #16]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	f080 8092 	bcs.w	8003910 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8a3a      	ldrh	r2, [r7, #16]
 80037f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d02b      	beq.n	8003854 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800380a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0210 	bic.w	r2, r2, #16
 8003848:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe f855 	bl	80018fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800385c:	b29b      	uxth	r3, r3
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	b29b      	uxth	r3, r3
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f876 	bl	8003956 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800386a:	e051      	b.n	8003910 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003874:	b29b      	uxth	r3, r3
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d047      	beq.n	8003914 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003884:	8a7b      	ldrh	r3, [r7, #18]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d044      	beq.n	8003914 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003898:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0210 	bic.w	r2, r2, #16
 80038c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038c8:	8a7b      	ldrh	r3, [r7, #18]
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f842 	bl	8003956 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038d2:	e01f      	b.n	8003914 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_UART_IRQHandler+0x324>
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f87f 	bl	80039ec <UART_Transmit_IT>
    return;
 80038ee:	e012      	b.n	8003916 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <HAL_UART_IRQHandler+0x34a>
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8c0 	bl	8003a8a <UART_EndTransmit_IT>
    return;
 800390a:	e004      	b.n	8003916 <HAL_UART_IRQHandler+0x34a>
    return;
 800390c:	bf00      	nop
 800390e:	e002      	b.n	8003916 <HAL_UART_IRQHandler+0x34a>
      return;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_UART_IRQHandler+0x34a>
      return;
 8003914:	bf00      	nop
  }
}
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	080039c5 	.word	0x080039c5

08003920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003982:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ffb0 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b21      	cmp	r3, #33	; 0x21
 80039fe:	d13e      	bne.n	8003a7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d114      	bne.n	8003a34 <UART_Transmit_IT+0x48>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d110      	bne.n	8003a34 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]
 8003a32:	e008      	b.n	8003a46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	1c59      	adds	r1, r3, #1
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6211      	str	r1, [r2, #32]
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4619      	mov	r1, r3
 8003a54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ff38 	bl	8003920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b22      	cmp	r3, #34	; 0x22
 8003acc:	f040 8099 	bne.w	8003c02 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d117      	bne.n	8003b0a <UART_Receive_IT+0x50>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d113      	bne.n	8003b0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
 8003b08:	e026      	b.n	8003b58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1c:	d007      	beq.n	8003b2e <UART_Receive_IT+0x74>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <UART_Receive_IT+0x82>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e008      	b.n	8003b4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d148      	bne.n	8003bfe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0220 	bic.w	r2, r2, #32
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d123      	bne.n	8003bf4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0210 	bic.w	r2, r2, #16
 8003bc0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d10a      	bne.n	8003be6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff feb2 	bl	8003956 <HAL_UARTEx_RxEventCallback>
 8003bf2:	e002      	b.n	8003bfa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fe9c 	bl	8003932 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e002      	b.n	8003c04 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c46:	f023 030c 	bic.w	r3, r3, #12
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <UART_SetConfig+0x114>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d103      	bne.n	8003c7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe fc90 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	e002      	b.n	8003c82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fc78 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003c80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009a      	lsls	r2, r3, #2
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <UART_SetConfig+0x118>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	0119      	lsls	r1, r3, #4
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009a      	lsls	r2, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <UART_SetConfig+0x118>)
 8003cba:	fba3 0302 	umull	r0, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2064      	movs	r0, #100	; 0x64
 8003cc2:	fb00 f303 	mul.w	r3, r0, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	3332      	adds	r3, #50	; 0x32
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <UART_SetConfig+0x118>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd8:	4419      	add	r1, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009a      	lsls	r2, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <UART_SetConfig+0x118>)
 8003cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2064      	movs	r0, #100	; 0x64
 8003cfa:	fb00 f303 	mul.w	r3, r0, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <UART_SetConfig+0x118>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	440a      	add	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40013800 	.word	0x40013800
 8003d24:	51eb851f 	.word	0x51eb851f

08003d28 <__errno>:
 8003d28:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <__errno+0x8>)
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000054 	.word	0x20000054

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	2600      	movs	r6, #0
 8003d38:	4d0c      	ldr	r5, [pc, #48]	; (8003d6c <__libc_init_array+0x38>)
 8003d3a:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	f000 fc5c 	bl	8004600 <_init>
 8003d48:	2600      	movs	r6, #0
 8003d4a:	4d0a      	ldr	r5, [pc, #40]	; (8003d74 <__libc_init_array+0x40>)
 8003d4c:	4c0a      	ldr	r4, [pc, #40]	; (8003d78 <__libc_init_array+0x44>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08004680 	.word	0x08004680
 8003d70:	08004680 	.word	0x08004680
 8003d74:	08004680 	.word	0x08004680
 8003d78:	08004684 	.word	0x08004684

08003d7c <memset>:
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <siprintf>:
 8003d8c:	b40e      	push	{r1, r2, r3}
 8003d8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d92:	b500      	push	{lr}
 8003d94:	b09c      	sub	sp, #112	; 0x70
 8003d96:	ab1d      	add	r3, sp, #116	; 0x74
 8003d98:	9002      	str	r0, [sp, #8]
 8003d9a:	9006      	str	r0, [sp, #24]
 8003d9c:	9107      	str	r1, [sp, #28]
 8003d9e:	9104      	str	r1, [sp, #16]
 8003da0:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <siprintf+0x38>)
 8003da2:	4909      	ldr	r1, [pc, #36]	; (8003dc8 <siprintf+0x3c>)
 8003da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da8:	9105      	str	r1, [sp, #20]
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	a902      	add	r1, sp, #8
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	f000 f868 	bl	8003e84 <_svfiprintf_r>
 8003db4:	2200      	movs	r2, #0
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	b01c      	add	sp, #112	; 0x70
 8003dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc0:	b003      	add	sp, #12
 8003dc2:	4770      	bx	lr
 8003dc4:	20000054 	.word	0x20000054
 8003dc8:	ffff0208 	.word	0xffff0208

08003dcc <__ssputs_r>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	688e      	ldr	r6, [r1, #8]
 8003dd2:	4682      	mov	sl, r0
 8003dd4:	429e      	cmp	r6, r3
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4690      	mov	r8, r2
 8003dda:	461f      	mov	r7, r3
 8003ddc:	d838      	bhi.n	8003e50 <__ssputs_r+0x84>
 8003dde:	898a      	ldrh	r2, [r1, #12]
 8003de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003de4:	d032      	beq.n	8003e4c <__ssputs_r+0x80>
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	6909      	ldr	r1, [r1, #16]
 8003dea:	3301      	adds	r3, #1
 8003dec:	eba5 0901 	sub.w	r9, r5, r1
 8003df0:	6965      	ldr	r5, [r4, #20]
 8003df2:	444b      	add	r3, r9
 8003df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dfc:	106d      	asrs	r5, r5, #1
 8003dfe:	429d      	cmp	r5, r3
 8003e00:	bf38      	it	cc
 8003e02:	461d      	movcc	r5, r3
 8003e04:	0553      	lsls	r3, r2, #21
 8003e06:	d531      	bpl.n	8003e6c <__ssputs_r+0xa0>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f000 fb53 	bl	80044b4 <_malloc_r>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	b950      	cbnz	r0, 8003e28 <__ssputs_r+0x5c>
 8003e12:	230c      	movs	r3, #12
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f8ca 3000 	str.w	r3, [sl]
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e28:	464a      	mov	r2, r9
 8003e2a:	6921      	ldr	r1, [r4, #16]
 8003e2c:	f000 face 	bl	80043cc <memcpy>
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	6126      	str	r6, [r4, #16]
 8003e3e:	444e      	add	r6, r9
 8003e40:	6026      	str	r6, [r4, #0]
 8003e42:	463e      	mov	r6, r7
 8003e44:	6165      	str	r5, [r4, #20]
 8003e46:	eba5 0509 	sub.w	r5, r5, r9
 8003e4a:	60a5      	str	r5, [r4, #8]
 8003e4c:	42be      	cmp	r6, r7
 8003e4e:	d900      	bls.n	8003e52 <__ssputs_r+0x86>
 8003e50:	463e      	mov	r6, r7
 8003e52:	4632      	mov	r2, r6
 8003e54:	4641      	mov	r1, r8
 8003e56:	6820      	ldr	r0, [r4, #0]
 8003e58:	f000 fac6 	bl	80043e8 <memmove>
 8003e5c:	68a3      	ldr	r3, [r4, #8]
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	4432      	add	r2, r6
 8003e64:	2000      	movs	r0, #0
 8003e66:	60a3      	str	r3, [r4, #8]
 8003e68:	6022      	str	r2, [r4, #0]
 8003e6a:	e7db      	b.n	8003e24 <__ssputs_r+0x58>
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	f000 fb7b 	bl	8004568 <_realloc_r>
 8003e72:	4606      	mov	r6, r0
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d1e1      	bne.n	8003e3c <__ssputs_r+0x70>
 8003e78:	4650      	mov	r0, sl
 8003e7a:	6921      	ldr	r1, [r4, #16]
 8003e7c:	f000 face 	bl	800441c <_free_r>
 8003e80:	e7c7      	b.n	8003e12 <__ssputs_r+0x46>
	...

08003e84 <_svfiprintf_r>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	4698      	mov	r8, r3
 8003e8a:	898b      	ldrh	r3, [r1, #12]
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	460d      	mov	r5, r1
 8003e92:	4614      	mov	r4, r2
 8003e94:	b09d      	sub	sp, #116	; 0x74
 8003e96:	d50e      	bpl.n	8003eb6 <_svfiprintf_r+0x32>
 8003e98:	690b      	ldr	r3, [r1, #16]
 8003e9a:	b963      	cbnz	r3, 8003eb6 <_svfiprintf_r+0x32>
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	f000 fb09 	bl	80044b4 <_malloc_r>
 8003ea2:	6028      	str	r0, [r5, #0]
 8003ea4:	6128      	str	r0, [r5, #16]
 8003ea6:	b920      	cbnz	r0, 8003eb2 <_svfiprintf_r+0x2e>
 8003ea8:	230c      	movs	r3, #12
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e0d1      	b.n	8004056 <_svfiprintf_r+0x1d2>
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	616b      	str	r3, [r5, #20]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eba:	2320      	movs	r3, #32
 8003ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ec0:	2330      	movs	r3, #48	; 0x30
 8003ec2:	f04f 0901 	mov.w	r9, #1
 8003ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004070 <_svfiprintf_r+0x1ec>
 8003ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	469a      	mov	sl, r3
 8003ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eda:	b10a      	cbz	r2, 8003ee0 <_svfiprintf_r+0x5c>
 8003edc:	2a25      	cmp	r2, #37	; 0x25
 8003ede:	d1f9      	bne.n	8003ed4 <_svfiprintf_r+0x50>
 8003ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ee4:	d00b      	beq.n	8003efe <_svfiprintf_r+0x7a>
 8003ee6:	465b      	mov	r3, fp
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff6d 	bl	8003dcc <__ssputs_r>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f000 80aa 	beq.w	800404c <_svfiprintf_r+0x1c8>
 8003ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003efa:	445a      	add	r2, fp
 8003efc:	9209      	str	r2, [sp, #36]	; 0x24
 8003efe:	f89a 3000 	ldrb.w	r3, [sl]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a2 	beq.w	800404c <_svfiprintf_r+0x1c8>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f12:	f10a 0a01 	add.w	sl, sl, #1
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	9307      	str	r3, [sp, #28]
 8003f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f20:	4654      	mov	r4, sl
 8003f22:	2205      	movs	r2, #5
 8003f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f28:	4851      	ldr	r0, [pc, #324]	; (8004070 <_svfiprintf_r+0x1ec>)
 8003f2a:	f000 fa41 	bl	80043b0 <memchr>
 8003f2e:	9a04      	ldr	r2, [sp, #16]
 8003f30:	b9d8      	cbnz	r0, 8003f6a <_svfiprintf_r+0xe6>
 8003f32:	06d0      	lsls	r0, r2, #27
 8003f34:	bf44      	itt	mi
 8003f36:	2320      	movmi	r3, #32
 8003f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3c:	0711      	lsls	r1, r2, #28
 8003f3e:	bf44      	itt	mi
 8003f40:	232b      	movmi	r3, #43	; 0x2b
 8003f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f46:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4c:	d015      	beq.n	8003f7a <_svfiprintf_r+0xf6>
 8003f4e:	4654      	mov	r4, sl
 8003f50:	2000      	movs	r0, #0
 8003f52:	f04f 0c0a 	mov.w	ip, #10
 8003f56:	9a07      	ldr	r2, [sp, #28]
 8003f58:	4621      	mov	r1, r4
 8003f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f5e:	3b30      	subs	r3, #48	; 0x30
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d94e      	bls.n	8004002 <_svfiprintf_r+0x17e>
 8003f64:	b1b0      	cbz	r0, 8003f94 <_svfiprintf_r+0x110>
 8003f66:	9207      	str	r2, [sp, #28]
 8003f68:	e014      	b.n	8003f94 <_svfiprintf_r+0x110>
 8003f6a:	eba0 0308 	sub.w	r3, r0, r8
 8003f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	46a2      	mov	sl, r4
 8003f76:	9304      	str	r3, [sp, #16]
 8003f78:	e7d2      	b.n	8003f20 <_svfiprintf_r+0x9c>
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	9103      	str	r1, [sp, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfbb      	ittet	lt
 8003f86:	425b      	neglt	r3, r3
 8003f88:	f042 0202 	orrlt.w	r2, r2, #2
 8003f8c:	9307      	strge	r3, [sp, #28]
 8003f8e:	9307      	strlt	r3, [sp, #28]
 8003f90:	bfb8      	it	lt
 8003f92:	9204      	strlt	r2, [sp, #16]
 8003f94:	7823      	ldrb	r3, [r4, #0]
 8003f96:	2b2e      	cmp	r3, #46	; 0x2e
 8003f98:	d10c      	bne.n	8003fb4 <_svfiprintf_r+0x130>
 8003f9a:	7863      	ldrb	r3, [r4, #1]
 8003f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9e:	d135      	bne.n	800400c <_svfiprintf_r+0x188>
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	3402      	adds	r4, #2
 8003fa4:	1d1a      	adds	r2, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	9203      	str	r2, [sp, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfb8      	it	lt
 8003fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004080 <_svfiprintf_r+0x1fc>
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4650      	mov	r0, sl
 8003fbc:	7821      	ldrb	r1, [r4, #0]
 8003fbe:	f000 f9f7 	bl	80043b0 <memchr>
 8003fc2:	b140      	cbz	r0, 8003fd6 <_svfiprintf_r+0x152>
 8003fc4:	2340      	movs	r3, #64	; 0x40
 8003fc6:	eba0 000a 	sub.w	r0, r0, sl
 8003fca:	fa03 f000 	lsl.w	r0, r3, r0
 8003fce:	9b04      	ldr	r3, [sp, #16]
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	4303      	orrs	r3, r0
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fda:	2206      	movs	r2, #6
 8003fdc:	4825      	ldr	r0, [pc, #148]	; (8004074 <_svfiprintf_r+0x1f0>)
 8003fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fe2:	f000 f9e5 	bl	80043b0 <memchr>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d038      	beq.n	800405c <_svfiprintf_r+0x1d8>
 8003fea:	4b23      	ldr	r3, [pc, #140]	; (8004078 <_svfiprintf_r+0x1f4>)
 8003fec:	bb1b      	cbnz	r3, 8004036 <_svfiprintf_r+0x1b2>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	3307      	adds	r3, #7
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffc:	4433      	add	r3, r6
 8003ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8004000:	e767      	b.n	8003ed2 <_svfiprintf_r+0x4e>
 8004002:	460c      	mov	r4, r1
 8004004:	2001      	movs	r0, #1
 8004006:	fb0c 3202 	mla	r2, ip, r2, r3
 800400a:	e7a5      	b.n	8003f58 <_svfiprintf_r+0xd4>
 800400c:	2300      	movs	r3, #0
 800400e:	f04f 0c0a 	mov.w	ip, #10
 8004012:	4619      	mov	r1, r3
 8004014:	3401      	adds	r4, #1
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	4620      	mov	r0, r4
 800401a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800401e:	3a30      	subs	r2, #48	; 0x30
 8004020:	2a09      	cmp	r2, #9
 8004022:	d903      	bls.n	800402c <_svfiprintf_r+0x1a8>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0c5      	beq.n	8003fb4 <_svfiprintf_r+0x130>
 8004028:	9105      	str	r1, [sp, #20]
 800402a:	e7c3      	b.n	8003fb4 <_svfiprintf_r+0x130>
 800402c:	4604      	mov	r4, r0
 800402e:	2301      	movs	r3, #1
 8004030:	fb0c 2101 	mla	r1, ip, r1, r2
 8004034:	e7f0      	b.n	8004018 <_svfiprintf_r+0x194>
 8004036:	ab03      	add	r3, sp, #12
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	462a      	mov	r2, r5
 800403c:	4638      	mov	r0, r7
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <_svfiprintf_r+0x1f8>)
 8004040:	a904      	add	r1, sp, #16
 8004042:	f3af 8000 	nop.w
 8004046:	1c42      	adds	r2, r0, #1
 8004048:	4606      	mov	r6, r0
 800404a:	d1d6      	bne.n	8003ffa <_svfiprintf_r+0x176>
 800404c:	89ab      	ldrh	r3, [r5, #12]
 800404e:	065b      	lsls	r3, r3, #25
 8004050:	f53f af2c 	bmi.w	8003eac <_svfiprintf_r+0x28>
 8004054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004056:	b01d      	add	sp, #116	; 0x74
 8004058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405c:	ab03      	add	r3, sp, #12
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	462a      	mov	r2, r5
 8004062:	4638      	mov	r0, r7
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <_svfiprintf_r+0x1f8>)
 8004066:	a904      	add	r1, sp, #16
 8004068:	f000 f87c 	bl	8004164 <_printf_i>
 800406c:	e7eb      	b.n	8004046 <_svfiprintf_r+0x1c2>
 800406e:	bf00      	nop
 8004070:	0800464c 	.word	0x0800464c
 8004074:	08004656 	.word	0x08004656
 8004078:	00000000 	.word	0x00000000
 800407c:	08003dcd 	.word	0x08003dcd
 8004080:	08004652 	.word	0x08004652

08004084 <_printf_common>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	4616      	mov	r6, r2
 800408a:	4699      	mov	r9, r3
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	690b      	ldr	r3, [r1, #16]
 8004090:	4607      	mov	r7, r0
 8004092:	4293      	cmp	r3, r2
 8004094:	bfb8      	it	lt
 8004096:	4613      	movlt	r3, r2
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800409e:	460c      	mov	r4, r1
 80040a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a4:	b10a      	cbz	r2, 80040aa <_printf_common+0x26>
 80040a6:	3301      	adds	r3, #1
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	0699      	lsls	r1, r3, #26
 80040ae:	bf42      	ittt	mi
 80040b0:	6833      	ldrmi	r3, [r6, #0]
 80040b2:	3302      	addmi	r3, #2
 80040b4:	6033      	strmi	r3, [r6, #0]
 80040b6:	6825      	ldr	r5, [r4, #0]
 80040b8:	f015 0506 	ands.w	r5, r5, #6
 80040bc:	d106      	bne.n	80040cc <_printf_common+0x48>
 80040be:	f104 0a19 	add.w	sl, r4, #25
 80040c2:	68e3      	ldr	r3, [r4, #12]
 80040c4:	6832      	ldr	r2, [r6, #0]
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	dc28      	bgt.n	800411e <_printf_common+0x9a>
 80040cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d0:	1e13      	subs	r3, r2, #0
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	bf18      	it	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	0692      	lsls	r2, r2, #26
 80040da:	d42d      	bmi.n	8004138 <_printf_common+0xb4>
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d020      	beq.n	800412c <_printf_common+0xa8>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	68e5      	ldr	r5, [r4, #12]
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf18      	it	ne
 80040f6:	2500      	movne	r5, #0
 80040f8:	6832      	ldr	r2, [r6, #0]
 80040fa:	f04f 0600 	mov.w	r6, #0
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	bf08      	it	eq
 8004102:	1aad      	subeq	r5, r5, r2
 8004104:	6922      	ldr	r2, [r4, #16]
 8004106:	bf08      	it	eq
 8004108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800410c:	4293      	cmp	r3, r2
 800410e:	bfc4      	itt	gt
 8004110:	1a9b      	subgt	r3, r3, r2
 8004112:	18ed      	addgt	r5, r5, r3
 8004114:	341a      	adds	r4, #26
 8004116:	42b5      	cmp	r5, r6
 8004118:	d11a      	bne.n	8004150 <_printf_common+0xcc>
 800411a:	2000      	movs	r0, #0
 800411c:	e008      	b.n	8004130 <_printf_common+0xac>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4649      	mov	r1, r9
 8004124:	4638      	mov	r0, r7
 8004126:	47c0      	blx	r8
 8004128:	3001      	adds	r0, #1
 800412a:	d103      	bne.n	8004134 <_printf_common+0xb0>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	3501      	adds	r5, #1
 8004136:	e7c4      	b.n	80040c2 <_printf_common+0x3e>
 8004138:	2030      	movs	r0, #48	; 0x30
 800413a:	18e1      	adds	r1, r4, r3
 800413c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004146:	4422      	add	r2, r4
 8004148:	3302      	adds	r3, #2
 800414a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800414e:	e7c5      	b.n	80040dc <_printf_common+0x58>
 8004150:	2301      	movs	r3, #1
 8004152:	4622      	mov	r2, r4
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d0e6      	beq.n	800412c <_printf_common+0xa8>
 800415e:	3601      	adds	r6, #1
 8004160:	e7d9      	b.n	8004116 <_printf_common+0x92>
	...

08004164 <_printf_i>:
 8004164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	460c      	mov	r4, r1
 800416a:	7e27      	ldrb	r7, [r4, #24]
 800416c:	4691      	mov	r9, r2
 800416e:	2f78      	cmp	r7, #120	; 0x78
 8004170:	4680      	mov	r8, r0
 8004172:	469a      	mov	sl, r3
 8004174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800417a:	d807      	bhi.n	800418c <_printf_i+0x28>
 800417c:	2f62      	cmp	r7, #98	; 0x62
 800417e:	d80a      	bhi.n	8004196 <_printf_i+0x32>
 8004180:	2f00      	cmp	r7, #0
 8004182:	f000 80d9 	beq.w	8004338 <_printf_i+0x1d4>
 8004186:	2f58      	cmp	r7, #88	; 0x58
 8004188:	f000 80a4 	beq.w	80042d4 <_printf_i+0x170>
 800418c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004194:	e03a      	b.n	800420c <_printf_i+0xa8>
 8004196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419a:	2b15      	cmp	r3, #21
 800419c:	d8f6      	bhi.n	800418c <_printf_i+0x28>
 800419e:	a001      	add	r0, pc, #4	; (adr r0, 80041a4 <_printf_i+0x40>)
 80041a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	08004211 	.word	0x08004211
 80041ac:	0800418d 	.word	0x0800418d
 80041b0:	0800418d 	.word	0x0800418d
 80041b4:	0800418d 	.word	0x0800418d
 80041b8:	0800418d 	.word	0x0800418d
 80041bc:	08004211 	.word	0x08004211
 80041c0:	0800418d 	.word	0x0800418d
 80041c4:	0800418d 	.word	0x0800418d
 80041c8:	0800418d 	.word	0x0800418d
 80041cc:	0800418d 	.word	0x0800418d
 80041d0:	0800431f 	.word	0x0800431f
 80041d4:	08004241 	.word	0x08004241
 80041d8:	08004301 	.word	0x08004301
 80041dc:	0800418d 	.word	0x0800418d
 80041e0:	0800418d 	.word	0x0800418d
 80041e4:	08004341 	.word	0x08004341
 80041e8:	0800418d 	.word	0x0800418d
 80041ec:	08004241 	.word	0x08004241
 80041f0:	0800418d 	.word	0x0800418d
 80041f4:	0800418d 	.word	0x0800418d
 80041f8:	08004309 	.word	0x08004309
 80041fc:	680b      	ldr	r3, [r1, #0]
 80041fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004202:	1d1a      	adds	r2, r3, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	600a      	str	r2, [r1, #0]
 8004208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800420c:	2301      	movs	r3, #1
 800420e:	e0a4      	b.n	800435a <_printf_i+0x1f6>
 8004210:	6825      	ldr	r5, [r4, #0]
 8004212:	6808      	ldr	r0, [r1, #0]
 8004214:	062e      	lsls	r6, r5, #24
 8004216:	f100 0304 	add.w	r3, r0, #4
 800421a:	d50a      	bpl.n	8004232 <_printf_i+0xce>
 800421c:	6805      	ldr	r5, [r0, #0]
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	2d00      	cmp	r5, #0
 8004222:	da03      	bge.n	800422c <_printf_i+0xc8>
 8004224:	232d      	movs	r3, #45	; 0x2d
 8004226:	426d      	negs	r5, r5
 8004228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422c:	230a      	movs	r3, #10
 800422e:	485e      	ldr	r0, [pc, #376]	; (80043a8 <_printf_i+0x244>)
 8004230:	e019      	b.n	8004266 <_printf_i+0x102>
 8004232:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004236:	6805      	ldr	r5, [r0, #0]
 8004238:	600b      	str	r3, [r1, #0]
 800423a:	bf18      	it	ne
 800423c:	b22d      	sxthne	r5, r5
 800423e:	e7ef      	b.n	8004220 <_printf_i+0xbc>
 8004240:	680b      	ldr	r3, [r1, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	1d18      	adds	r0, r3, #4
 8004246:	6008      	str	r0, [r1, #0]
 8004248:	0628      	lsls	r0, r5, #24
 800424a:	d501      	bpl.n	8004250 <_printf_i+0xec>
 800424c:	681d      	ldr	r5, [r3, #0]
 800424e:	e002      	b.n	8004256 <_printf_i+0xf2>
 8004250:	0669      	lsls	r1, r5, #25
 8004252:	d5fb      	bpl.n	800424c <_printf_i+0xe8>
 8004254:	881d      	ldrh	r5, [r3, #0]
 8004256:	2f6f      	cmp	r7, #111	; 0x6f
 8004258:	bf0c      	ite	eq
 800425a:	2308      	moveq	r3, #8
 800425c:	230a      	movne	r3, #10
 800425e:	4852      	ldr	r0, [pc, #328]	; (80043a8 <_printf_i+0x244>)
 8004260:	2100      	movs	r1, #0
 8004262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004266:	6866      	ldr	r6, [r4, #4]
 8004268:	2e00      	cmp	r6, #0
 800426a:	bfa8      	it	ge
 800426c:	6821      	ldrge	r1, [r4, #0]
 800426e:	60a6      	str	r6, [r4, #8]
 8004270:	bfa4      	itt	ge
 8004272:	f021 0104 	bicge.w	r1, r1, #4
 8004276:	6021      	strge	r1, [r4, #0]
 8004278:	b90d      	cbnz	r5, 800427e <_printf_i+0x11a>
 800427a:	2e00      	cmp	r6, #0
 800427c:	d04d      	beq.n	800431a <_printf_i+0x1b6>
 800427e:	4616      	mov	r6, r2
 8004280:	fbb5 f1f3 	udiv	r1, r5, r3
 8004284:	fb03 5711 	mls	r7, r3, r1, r5
 8004288:	5dc7      	ldrb	r7, [r0, r7]
 800428a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800428e:	462f      	mov	r7, r5
 8004290:	42bb      	cmp	r3, r7
 8004292:	460d      	mov	r5, r1
 8004294:	d9f4      	bls.n	8004280 <_printf_i+0x11c>
 8004296:	2b08      	cmp	r3, #8
 8004298:	d10b      	bne.n	80042b2 <_printf_i+0x14e>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	07df      	lsls	r7, r3, #31
 800429e:	d508      	bpl.n	80042b2 <_printf_i+0x14e>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6861      	ldr	r1, [r4, #4]
 80042a4:	4299      	cmp	r1, r3
 80042a6:	bfde      	ittt	le
 80042a8:	2330      	movle	r3, #48	; 0x30
 80042aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042b2:	1b92      	subs	r2, r2, r6
 80042b4:	6122      	str	r2, [r4, #16]
 80042b6:	464b      	mov	r3, r9
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	aa03      	add	r2, sp, #12
 80042c2:	f7ff fedf 	bl	8004084 <_printf_common>
 80042c6:	3001      	adds	r0, #1
 80042c8:	d14c      	bne.n	8004364 <_printf_i+0x200>
 80042ca:	f04f 30ff 	mov.w	r0, #4294967295
 80042ce:	b004      	add	sp, #16
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	4834      	ldr	r0, [pc, #208]	; (80043a8 <_printf_i+0x244>)
 80042d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042da:	680e      	ldr	r6, [r1, #0]
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f856 5b04 	ldr.w	r5, [r6], #4
 80042e2:	061f      	lsls	r7, r3, #24
 80042e4:	600e      	str	r6, [r1, #0]
 80042e6:	d514      	bpl.n	8004312 <_printf_i+0x1ae>
 80042e8:	07d9      	lsls	r1, r3, #31
 80042ea:	bf44      	itt	mi
 80042ec:	f043 0320 	orrmi.w	r3, r3, #32
 80042f0:	6023      	strmi	r3, [r4, #0]
 80042f2:	b91d      	cbnz	r5, 80042fc <_printf_i+0x198>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f023 0320 	bic.w	r3, r3, #32
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	2310      	movs	r3, #16
 80042fe:	e7af      	b.n	8004260 <_printf_i+0xfc>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f043 0320 	orr.w	r3, r3, #32
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	2378      	movs	r3, #120	; 0x78
 800430a:	4828      	ldr	r0, [pc, #160]	; (80043ac <_printf_i+0x248>)
 800430c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004310:	e7e3      	b.n	80042da <_printf_i+0x176>
 8004312:	065e      	lsls	r6, r3, #25
 8004314:	bf48      	it	mi
 8004316:	b2ad      	uxthmi	r5, r5
 8004318:	e7e6      	b.n	80042e8 <_printf_i+0x184>
 800431a:	4616      	mov	r6, r2
 800431c:	e7bb      	b.n	8004296 <_printf_i+0x132>
 800431e:	680b      	ldr	r3, [r1, #0]
 8004320:	6826      	ldr	r6, [r4, #0]
 8004322:	1d1d      	adds	r5, r3, #4
 8004324:	6960      	ldr	r0, [r4, #20]
 8004326:	600d      	str	r5, [r1, #0]
 8004328:	0635      	lsls	r5, r6, #24
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	d501      	bpl.n	8004332 <_printf_i+0x1ce>
 800432e:	6018      	str	r0, [r3, #0]
 8004330:	e002      	b.n	8004338 <_printf_i+0x1d4>
 8004332:	0671      	lsls	r1, r6, #25
 8004334:	d5fb      	bpl.n	800432e <_printf_i+0x1ca>
 8004336:	8018      	strh	r0, [r3, #0]
 8004338:	2300      	movs	r3, #0
 800433a:	4616      	mov	r6, r2
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	e7ba      	b.n	80042b6 <_printf_i+0x152>
 8004340:	680b      	ldr	r3, [r1, #0]
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	600a      	str	r2, [r1, #0]
 8004346:	681e      	ldr	r6, [r3, #0]
 8004348:	2100      	movs	r1, #0
 800434a:	4630      	mov	r0, r6
 800434c:	6862      	ldr	r2, [r4, #4]
 800434e:	f000 f82f 	bl	80043b0 <memchr>
 8004352:	b108      	cbz	r0, 8004358 <_printf_i+0x1f4>
 8004354:	1b80      	subs	r0, r0, r6
 8004356:	6060      	str	r0, [r4, #4]
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004362:	e7a8      	b.n	80042b6 <_printf_i+0x152>
 8004364:	4632      	mov	r2, r6
 8004366:	4649      	mov	r1, r9
 8004368:	4640      	mov	r0, r8
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	47d0      	blx	sl
 800436e:	3001      	adds	r0, #1
 8004370:	d0ab      	beq.n	80042ca <_printf_i+0x166>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	079b      	lsls	r3, r3, #30
 8004376:	d413      	bmi.n	80043a0 <_printf_i+0x23c>
 8004378:	68e0      	ldr	r0, [r4, #12]
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	4298      	cmp	r0, r3
 800437e:	bfb8      	it	lt
 8004380:	4618      	movlt	r0, r3
 8004382:	e7a4      	b.n	80042ce <_printf_i+0x16a>
 8004384:	2301      	movs	r3, #1
 8004386:	4632      	mov	r2, r6
 8004388:	4649      	mov	r1, r9
 800438a:	4640      	mov	r0, r8
 800438c:	47d0      	blx	sl
 800438e:	3001      	adds	r0, #1
 8004390:	d09b      	beq.n	80042ca <_printf_i+0x166>
 8004392:	3501      	adds	r5, #1
 8004394:	68e3      	ldr	r3, [r4, #12]
 8004396:	9903      	ldr	r1, [sp, #12]
 8004398:	1a5b      	subs	r3, r3, r1
 800439a:	42ab      	cmp	r3, r5
 800439c:	dcf2      	bgt.n	8004384 <_printf_i+0x220>
 800439e:	e7eb      	b.n	8004378 <_printf_i+0x214>
 80043a0:	2500      	movs	r5, #0
 80043a2:	f104 0619 	add.w	r6, r4, #25
 80043a6:	e7f5      	b.n	8004394 <_printf_i+0x230>
 80043a8:	0800465d 	.word	0x0800465d
 80043ac:	0800466e 	.word	0x0800466e

080043b0 <memchr>:
 80043b0:	4603      	mov	r3, r0
 80043b2:	b510      	push	{r4, lr}
 80043b4:	b2c9      	uxtb	r1, r1
 80043b6:	4402      	add	r2, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	d101      	bne.n	80043c2 <memchr+0x12>
 80043be:	2000      	movs	r0, #0
 80043c0:	e003      	b.n	80043ca <memchr+0x1a>
 80043c2:	7804      	ldrb	r4, [r0, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	428c      	cmp	r4, r1
 80043c8:	d1f6      	bne.n	80043b8 <memchr+0x8>
 80043ca:	bd10      	pop	{r4, pc}

080043cc <memcpy>:
 80043cc:	440a      	add	r2, r1
 80043ce:	4291      	cmp	r1, r2
 80043d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043d4:	d100      	bne.n	80043d8 <memcpy+0xc>
 80043d6:	4770      	bx	lr
 80043d8:	b510      	push	{r4, lr}
 80043da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043de:	4291      	cmp	r1, r2
 80043e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043e4:	d1f9      	bne.n	80043da <memcpy+0xe>
 80043e6:	bd10      	pop	{r4, pc}

080043e8 <memmove>:
 80043e8:	4288      	cmp	r0, r1
 80043ea:	b510      	push	{r4, lr}
 80043ec:	eb01 0402 	add.w	r4, r1, r2
 80043f0:	d902      	bls.n	80043f8 <memmove+0x10>
 80043f2:	4284      	cmp	r4, r0
 80043f4:	4623      	mov	r3, r4
 80043f6:	d807      	bhi.n	8004408 <memmove+0x20>
 80043f8:	1e43      	subs	r3, r0, #1
 80043fa:	42a1      	cmp	r1, r4
 80043fc:	d008      	beq.n	8004410 <memmove+0x28>
 80043fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004406:	e7f8      	b.n	80043fa <memmove+0x12>
 8004408:	4601      	mov	r1, r0
 800440a:	4402      	add	r2, r0
 800440c:	428a      	cmp	r2, r1
 800440e:	d100      	bne.n	8004412 <memmove+0x2a>
 8004410:	bd10      	pop	{r4, pc}
 8004412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800441a:	e7f7      	b.n	800440c <memmove+0x24>

0800441c <_free_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4605      	mov	r5, r0
 8004420:	2900      	cmp	r1, #0
 8004422:	d043      	beq.n	80044ac <_free_r+0x90>
 8004424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004428:	1f0c      	subs	r4, r1, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	bfb8      	it	lt
 800442e:	18e4      	addlt	r4, r4, r3
 8004430:	f000 f8d0 	bl	80045d4 <__malloc_lock>
 8004434:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <_free_r+0x94>)
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	4610      	mov	r0, r2
 800443a:	b933      	cbnz	r3, 800444a <_free_r+0x2e>
 800443c:	6063      	str	r3, [r4, #4]
 800443e:	6014      	str	r4, [r2, #0]
 8004440:	4628      	mov	r0, r5
 8004442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004446:	f000 b8cb 	b.w	80045e0 <__malloc_unlock>
 800444a:	42a3      	cmp	r3, r4
 800444c:	d90a      	bls.n	8004464 <_free_r+0x48>
 800444e:	6821      	ldr	r1, [r4, #0]
 8004450:	1862      	adds	r2, r4, r1
 8004452:	4293      	cmp	r3, r2
 8004454:	bf01      	itttt	eq
 8004456:	681a      	ldreq	r2, [r3, #0]
 8004458:	685b      	ldreq	r3, [r3, #4]
 800445a:	1852      	addeq	r2, r2, r1
 800445c:	6022      	streq	r2, [r4, #0]
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	6004      	str	r4, [r0, #0]
 8004462:	e7ed      	b.n	8004440 <_free_r+0x24>
 8004464:	461a      	mov	r2, r3
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	b10b      	cbz	r3, 800446e <_free_r+0x52>
 800446a:	42a3      	cmp	r3, r4
 800446c:	d9fa      	bls.n	8004464 <_free_r+0x48>
 800446e:	6811      	ldr	r1, [r2, #0]
 8004470:	1850      	adds	r0, r2, r1
 8004472:	42a0      	cmp	r0, r4
 8004474:	d10b      	bne.n	800448e <_free_r+0x72>
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	4401      	add	r1, r0
 800447a:	1850      	adds	r0, r2, r1
 800447c:	4283      	cmp	r3, r0
 800447e:	6011      	str	r1, [r2, #0]
 8004480:	d1de      	bne.n	8004440 <_free_r+0x24>
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4401      	add	r1, r0
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	6053      	str	r3, [r2, #4]
 800448c:	e7d8      	b.n	8004440 <_free_r+0x24>
 800448e:	d902      	bls.n	8004496 <_free_r+0x7a>
 8004490:	230c      	movs	r3, #12
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	e7d4      	b.n	8004440 <_free_r+0x24>
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	1821      	adds	r1, r4, r0
 800449a:	428b      	cmp	r3, r1
 800449c:	bf01      	itttt	eq
 800449e:	6819      	ldreq	r1, [r3, #0]
 80044a0:	685b      	ldreq	r3, [r3, #4]
 80044a2:	1809      	addeq	r1, r1, r0
 80044a4:	6021      	streq	r1, [r4, #0]
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	6054      	str	r4, [r2, #4]
 80044aa:	e7c9      	b.n	8004440 <_free_r+0x24>
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
 80044ae:	bf00      	nop
 80044b0:	20000144 	.word	0x20000144

080044b4 <_malloc_r>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	1ccd      	adds	r5, r1, #3
 80044b8:	f025 0503 	bic.w	r5, r5, #3
 80044bc:	3508      	adds	r5, #8
 80044be:	2d0c      	cmp	r5, #12
 80044c0:	bf38      	it	cc
 80044c2:	250c      	movcc	r5, #12
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	4606      	mov	r6, r0
 80044c8:	db01      	blt.n	80044ce <_malloc_r+0x1a>
 80044ca:	42a9      	cmp	r1, r5
 80044cc:	d903      	bls.n	80044d6 <_malloc_r+0x22>
 80044ce:	230c      	movs	r3, #12
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	2000      	movs	r0, #0
 80044d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d6:	f000 f87d 	bl	80045d4 <__malloc_lock>
 80044da:	4921      	ldr	r1, [pc, #132]	; (8004560 <_malloc_r+0xac>)
 80044dc:	680a      	ldr	r2, [r1, #0]
 80044de:	4614      	mov	r4, r2
 80044e0:	b99c      	cbnz	r4, 800450a <_malloc_r+0x56>
 80044e2:	4f20      	ldr	r7, [pc, #128]	; (8004564 <_malloc_r+0xb0>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	b923      	cbnz	r3, 80044f2 <_malloc_r+0x3e>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4630      	mov	r0, r6
 80044ec:	f000 f862 	bl	80045b4 <_sbrk_r>
 80044f0:	6038      	str	r0, [r7, #0]
 80044f2:	4629      	mov	r1, r5
 80044f4:	4630      	mov	r0, r6
 80044f6:	f000 f85d 	bl	80045b4 <_sbrk_r>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	d123      	bne.n	8004546 <_malloc_r+0x92>
 80044fe:	230c      	movs	r3, #12
 8004500:	4630      	mov	r0, r6
 8004502:	6033      	str	r3, [r6, #0]
 8004504:	f000 f86c 	bl	80045e0 <__malloc_unlock>
 8004508:	e7e3      	b.n	80044d2 <_malloc_r+0x1e>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	1b5b      	subs	r3, r3, r5
 800450e:	d417      	bmi.n	8004540 <_malloc_r+0x8c>
 8004510:	2b0b      	cmp	r3, #11
 8004512:	d903      	bls.n	800451c <_malloc_r+0x68>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	441c      	add	r4, r3
 8004518:	6025      	str	r5, [r4, #0]
 800451a:	e004      	b.n	8004526 <_malloc_r+0x72>
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	42a2      	cmp	r2, r4
 8004520:	bf0c      	ite	eq
 8004522:	600b      	streq	r3, [r1, #0]
 8004524:	6053      	strne	r3, [r2, #4]
 8004526:	4630      	mov	r0, r6
 8004528:	f000 f85a 	bl	80045e0 <__malloc_unlock>
 800452c:	f104 000b 	add.w	r0, r4, #11
 8004530:	1d23      	adds	r3, r4, #4
 8004532:	f020 0007 	bic.w	r0, r0, #7
 8004536:	1ac2      	subs	r2, r0, r3
 8004538:	d0cc      	beq.n	80044d4 <_malloc_r+0x20>
 800453a:	1a1b      	subs	r3, r3, r0
 800453c:	50a3      	str	r3, [r4, r2]
 800453e:	e7c9      	b.n	80044d4 <_malloc_r+0x20>
 8004540:	4622      	mov	r2, r4
 8004542:	6864      	ldr	r4, [r4, #4]
 8004544:	e7cc      	b.n	80044e0 <_malloc_r+0x2c>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d0e3      	beq.n	8004518 <_malloc_r+0x64>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4630      	mov	r0, r6
 8004554:	f000 f82e 	bl	80045b4 <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d1dd      	bne.n	8004518 <_malloc_r+0x64>
 800455c:	e7cf      	b.n	80044fe <_malloc_r+0x4a>
 800455e:	bf00      	nop
 8004560:	20000144 	.word	0x20000144
 8004564:	20000148 	.word	0x20000148

08004568 <_realloc_r>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	4607      	mov	r7, r0
 800456c:	4614      	mov	r4, r2
 800456e:	460e      	mov	r6, r1
 8004570:	b921      	cbnz	r1, 800457c <_realloc_r+0x14>
 8004572:	4611      	mov	r1, r2
 8004574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004578:	f7ff bf9c 	b.w	80044b4 <_malloc_r>
 800457c:	b922      	cbnz	r2, 8004588 <_realloc_r+0x20>
 800457e:	f7ff ff4d 	bl	800441c <_free_r>
 8004582:	4625      	mov	r5, r4
 8004584:	4628      	mov	r0, r5
 8004586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004588:	f000 f830 	bl	80045ec <_malloc_usable_size_r>
 800458c:	42a0      	cmp	r0, r4
 800458e:	d20f      	bcs.n	80045b0 <_realloc_r+0x48>
 8004590:	4621      	mov	r1, r4
 8004592:	4638      	mov	r0, r7
 8004594:	f7ff ff8e 	bl	80044b4 <_malloc_r>
 8004598:	4605      	mov	r5, r0
 800459a:	2800      	cmp	r0, #0
 800459c:	d0f2      	beq.n	8004584 <_realloc_r+0x1c>
 800459e:	4631      	mov	r1, r6
 80045a0:	4622      	mov	r2, r4
 80045a2:	f7ff ff13 	bl	80043cc <memcpy>
 80045a6:	4631      	mov	r1, r6
 80045a8:	4638      	mov	r0, r7
 80045aa:	f7ff ff37 	bl	800441c <_free_r>
 80045ae:	e7e9      	b.n	8004584 <_realloc_r+0x1c>
 80045b0:	4635      	mov	r5, r6
 80045b2:	e7e7      	b.n	8004584 <_realloc_r+0x1c>

080045b4 <_sbrk_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	2300      	movs	r3, #0
 80045b8:	4d05      	ldr	r5, [pc, #20]	; (80045d0 <_sbrk_r+0x1c>)
 80045ba:	4604      	mov	r4, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	f7fc fefc 	bl	80013bc <_sbrk>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_sbrk_r+0x1a>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_sbrk_r+0x1a>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	2000054c 	.word	0x2000054c

080045d4 <__malloc_lock>:
 80045d4:	4801      	ldr	r0, [pc, #4]	; (80045dc <__malloc_lock+0x8>)
 80045d6:	f000 b811 	b.w	80045fc <__retarget_lock_acquire_recursive>
 80045da:	bf00      	nop
 80045dc:	20000554 	.word	0x20000554

080045e0 <__malloc_unlock>:
 80045e0:	4801      	ldr	r0, [pc, #4]	; (80045e8 <__malloc_unlock+0x8>)
 80045e2:	f000 b80c 	b.w	80045fe <__retarget_lock_release_recursive>
 80045e6:	bf00      	nop
 80045e8:	20000554 	.word	0x20000554

080045ec <_malloc_usable_size_r>:
 80045ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f0:	1f18      	subs	r0, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfbc      	itt	lt
 80045f6:	580b      	ldrlt	r3, [r1, r0]
 80045f8:	18c0      	addlt	r0, r0, r3
 80045fa:	4770      	bx	lr

080045fc <__retarget_lock_acquire_recursive>:
 80045fc:	4770      	bx	lr

080045fe <__retarget_lock_release_recursive>:
 80045fe:	4770      	bx	lr

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
